/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.3.6 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, https://github.com/requirejs/requirejs/blob/master/LICENSE
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global, setTimeout) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.3.7-outsystems.5',
        commentRegExp = /\/\*[\s\S]*?\*\/|([^:"'=]|^)\/\/.*$/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    //Could match something like ')//comment', do not lose the prefix to comment.
    function commentReplace(match, singlePrefix) {
        return singlePrefix || '';
    }

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules, parentModules) {
        var e = new Error(msg + '\nhttps://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        e.parentModules = parentModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (isNormalized) {
                        normalizedName = name;
                    } else if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                each(globalDefQueue, function(queueItem) {
                    var id = queueItem[0];
                    if (typeof id === 'string') {
                        context.defQueueMap[id] = true;
                    }
                    defQueue.push(queueItem);
                });
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    // Only fetch if not already in the defQueue.
                    if (!hasProp(context.defQueueMap, id)) {
                        this.fetch();
                    }
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                var resLoadMaps = [];
                                each(this.depMaps, function (depMap) {
                                    resLoadMaps.push(depMap.normalizedMap || depMap);
                                });
                                req.onResourceLoad(context, this.map, resLoadMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap,
                                                      true);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.map.normalizedMap = normalizedMap;
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            if (this.undefed) {
                                return;
                            }
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' +
                        args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
            context.defQueueMap = {};
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            defQueueMap: {},
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                // Convert old style urlArgs string to a function.
                if (typeof cfg.urlArgs === 'string') {
                    var urlArgs = cfg.urlArgs;
                    cfg.urlArgs = function(id, url) {
                        return (url.indexOf('?') === -1 ? '?' : '&') + urlArgs;
                    };
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? {name: pkgObj} : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id, null, true);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        mod.undefed = true;
                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if (args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });
                        delete context.defQueueMap[id];

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }
                context.defQueueMap = {};

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|^blob\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs && !/^blob\:/.test(url) ?
                       url + config.urlArgs(moduleName, url) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var originalAttrId = getScriptData(evt).id;
                var attrId = originalAttrId;
                if (!hasPathFallback(originalAttrId)) {
                    var parents = [];
                    var matchFound;
                    do {
                        matchFound = false;
                        eachProp(registry, function(value, key) {
                            if (key.indexOf('_@r') !== 0) {
                                each(value.depMaps, function(depMap) {
                                    if (depMap.id === attrId) {
                                        parents.push(key);
                                        attrId = key;
                                        matchFound = true;
                                        return true;
                                    }
                                });
                            }
                        });
                    } while(matchFound);
                    return onError(makeError('scripterror', 'Script error for "' + originalAttrId +
                                             (parents.length ?
                                             '", needed by: ' + parents.join(', ') :
                                             '"'), evt, [originalAttrId], parents));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    // If this function is altered, please replicate the changes in the configSanitized.html test file
    function sanitizeConfig(config) {
        // Denylist of potentially harmful properties or values
        const denylist = ["__proto__", "constructor", "prototype"];
        for (const key in config) {
            if (denylist.includes(key)) {
                delete config[key];
            }
        }
        return config;
    }

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        const sanitizedConfig = sanitizeConfig(config);
        return req(sanitizedConfig);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/requirejs/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/requirejs/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //Calling onNodeCreated after all properties on the node have been
            //set, but before it is placed in the DOM.
            if (config.onNodeCreated) {
                config.onNodeCreated(node, config, moduleName, url);
            }

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation is that a build has been done so
                //that only one script needs to be loaded anyway. This may need
                //to be reevaluated if other use cases become common.

                // Post a task to the event loop to work around a bug in WebKit
                // where the worker gets garbage-collected after calling
                // importScripts(): https://webkit.org/b/153317
                setTimeout(function() {}, 0);
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one,
                //but only do so if the data-main value is not a loader plugin
                //module ID.
                if (!cfg.baseUrl && mainScript.indexOf('!') === -1) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, commentReplace)
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        if (context) {
            context.defQueue.push([name, deps, callback]);
            context.defQueueMap[name] = true;
        } else {
            globalDefQueue.push([name, deps, callback]);
        }
    };

    define.amd = {
        jQuery: true
    };

    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this, (typeof setTimeout === 'undefined' ? undefined : setTimeout)));

define("requireLib", function(){});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global global, define, Symbol, Reflect, Promise, SuppressedError */
var __extends;
var __assign;
var __rest;
var __decorate;
var __param;
var __esDecorate;
var __runInitializers;
var __propKey;
var __setFunctionName;
var __metadata;
var __awaiter;
var __generator;
var __exportStar;
var __values;
var __read;
var __spread;
var __spreadArrays;
var __spreadArray;
var __await;
var __asyncGenerator;
var __asyncDelegator;
var __asyncValues;
var __makeTemplateObject;
var __importStar;
var __importDefault;
var __classPrivateFieldGet;
var __classPrivateFieldSet;
var __classPrivateFieldIn;
var __createBinding;
var __addDisposableResource;
var __disposeResources;
(function (factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function (exports) { factory(createExporter(root, createExporter(exports))); });
    }
    else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
    }
    else {
        factory(createExporter(root));
    }
    function createExporter(exports, previous) {
        if (exports !== root) {
            if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", { value: true });
            }
            else {
                exports.__esModule = true;
            }
        }
        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };
    }
})
(function (exporter) {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };

    __extends = function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };

    __assign = Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };

    __rest = function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };

    __decorate = function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };

    __param = function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };

    __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
        function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
        var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
        var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
        var _, done = false;
        for (var i = decorators.length - 1; i >= 0; i--) {
            var context = {};
            for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
            for (var p in contextIn.access) context.access[p] = contextIn.access[p];
            context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
            var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
            if (kind === "accessor") {
                if (result === void 0) continue;
                if (result === null || typeof result !== "object") throw new TypeError("Object expected");
                if (_ = accept(result.get)) descriptor.get = _;
                if (_ = accept(result.set)) descriptor.set = _;
                if (_ = accept(result.init)) initializers.unshift(_);
            }
            else if (_ = accept(result)) {
                if (kind === "field") initializers.unshift(_);
                else descriptor[key] = _;
            }
        }
        if (target) Object.defineProperty(target, contextIn.name, descriptor);
        done = true;
    };

    __runInitializers = function (thisArg, initializers, value) {
        var useValue = arguments.length > 2;
        for (var i = 0; i < initializers.length; i++) {
            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
        }
        return useValue ? value : void 0;
    };

    __propKey = function (x) {
        return typeof x === "symbol" ? x : "".concat(x);
    };

    __setFunctionName = function (f, name, prefix) {
        if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
        return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
    };

    __metadata = function (metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    };

    __awaiter = function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };

    __generator = function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };

    __exportStar = function(m, o) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
    };

    __createBinding = Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    });

    __values = function (o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };

    __read = function (o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    };

    /** @deprecated */
    __spread = function () {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    };

    /** @deprecated */
    __spreadArrays = function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    __spreadArray = function (to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    };

    __await = function (v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    };

    __asyncGenerator = function (thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    };

    __asyncDelegator = function (o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
    };

    __asyncValues = function (o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    };

    __makeTemplateObject = function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    var __setModuleDefault = Object.create ? (function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function(o, v) {
        o["default"] = v;
    };

    __importStar = function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };

    __importDefault = function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };

    __classPrivateFieldGet = function (receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    __classPrivateFieldSet = function (receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    };

    __classPrivateFieldIn = function (state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    };

    __addDisposableResource = function (env, value, async) {
        if (value !== null && value !== void 0) {
            if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
            var dispose;
            if (async) {
                if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
                dispose = value[Symbol.asyncDispose];
            }
            if (dispose === void 0) {
                if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
                dispose = value[Symbol.dispose];
            }
            if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
            env.stack.push({ value: value, dispose: dispose, async: async });
        }
        else if (async) {
            env.stack.push({ async: true });
        }
        return value;
    };

    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    __disposeResources = function (env) {
        function fail(e) {
            env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        function next() {
            while (env.stack.length) {
                var rec = env.stack.pop();
                try {
                    var result = rec.dispose && rec.dispose.call(rec.value);
                    if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                }
                catch (e) {
                    fail(e);
                }
            }
            if (env.hasError) throw env.error;
        }
        return next();
    };

    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__esDecorate", __esDecorate);
    exporter("__runInitializers", __runInitializers);
    exporter("__propKey", __propKey);
    exporter("__setFunctionName", __setFunctionName);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    exporter("__classPrivateFieldIn", __classPrivateFieldIn);
    exporter("__addDisposableResource", __addDisposableResource);
    exporter("__disposeResources", __disposeResources);
});

define('OutSystems/ClientRuntime/TransitionAnimation',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransitionAnimation = void 0;
    var TransitionAnimation;
    (function (TransitionAnimation) {
        TransitionAnimation[TransitionAnimation["None"] = 0] = "None";
        TransitionAnimation[TransitionAnimation["Default"] = 1] = "Default";
        TransitionAnimation[TransitionAnimation["Fade"] = 2] = "Fade";
        TransitionAnimation[TransitionAnimation["SlideFromLeft"] = 3] = "SlideFromLeft";
        TransitionAnimation[TransitionAnimation["SlideFromRight"] = 4] = "SlideFromRight";
        TransitionAnimation[TransitionAnimation["SlideFromBottom"] = 5] = "SlideFromBottom";
        TransitionAnimation[TransitionAnimation["SlideFromTop"] = 6] = "SlideFromTop";
    })(TransitionAnimation || (exports.TransitionAnimation = TransitionAnimation = {}));
});
// All licensing information regarding this source code can be found in the LICENSES.txt file.
//# sourceMappingURL=OutSystems.js.map?ts=1739882575883
define('OutSystems/ClientRuntime/Transitions',["require", "exports", "./TransitionAnimation"], function (require, exports, TransitionAnimationModule) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reverseTransition = exports.createTransition = exports.sanitizeTransition = exports.setDefaultTransition = exports.Default = exports.Transition = exports.TransitionAnimation = void 0;
    exports.TransitionAnimation = TransitionAnimationModule.TransitionAnimation;
    var Transition = (function () {
        function Transition(name) {
            if (name === void 0) { name = ""; }
            this.name = name;
        }
        return Transition;
    }());
    exports.Transition = Transition;
    var None = new Transition();
    var Fade = new Transition("fade");
    var SlideFromLeft = new Transition("slide-from-left");
    var SlideFromRight = new Transition("slide-from-right");
    var SlideFromBottom = new Transition("slide-from-bottom");
    var SlideFromTop = new Transition("slide-from-top");
    exports.Default = new Transition();
    function setDefaultTransition(transition) {
        exports.Default = transition;
    }
    exports.setDefaultTransition = setDefaultTransition;
    function sanitizeTransition(transition) {
        return new Transition(transition ? transition.name : "");
    }
    exports.sanitizeTransition = sanitizeTransition;
    function createTransition(transitionType, defaultTransition) {
        if (typeof transitionType === "string") {
            return new Transition(transitionType);
        }
        else {
            switch (transitionType) {
                case exports.TransitionAnimation.None:
                    return None;
                case exports.TransitionAnimation.Fade:
                    return Fade;
                case exports.TransitionAnimation.SlideFromLeft:
                    return SlideFromLeft;
                case exports.TransitionAnimation.SlideFromRight:
                    return SlideFromRight;
                case exports.TransitionAnimation.SlideFromBottom:
                    return SlideFromBottom;
                case exports.TransitionAnimation.SlideFromTop:
                    return SlideFromTop;
                case exports.TransitionAnimation.Default:
                    return exports.Default;
                default:
                    return defaultTransition;
            }
        }
    }
    exports.createTransition = createTransition;
    function reverseTransition(transition) {
        if (!transition || !transition.name) {
            return new Transition("");
        }
        switch (transition.name) {
            case Fade.name:
                return new Transition(Fade.name);
            case SlideFromBottom.name:
                return new Transition(SlideFromTop.name);
            case SlideFromLeft.name:
                return new Transition(SlideFromRight.name);
            case SlideFromRight.name:
                return new Transition(SlideFromLeft.name);
            case SlideFromTop.name:
                return new Transition(SlideFromBottom.name);
            default:
                return new Transition(transition.name + "-back");
        }
    }
    exports.reverseTransition = reverseTransition;
});
//# sourceMappingURL=Transitions.js.map;
define('OutSystems/ClientRuntime/ApplicationInfo',["require", "exports", "./Transitions"], function (require, exports, Transitions) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBasePath = exports.moduleBelongsToApp = exports.showWatermark = exports.isWebApplication = exports.getErrorPageConfig = exports.getDefaultTransition = exports.setApplicationDefaultTimeout = exports.getApplicationDefaultTimeout = exports.getHomeModuleLanguageResourcesName = exports.getHomeModuleControllerName = exports.isDebugEnabled = exports.getUserProviderName = exports.getUserCookieName = exports.getDefaultModuleHomeScreenURL = exports.getScreenDefinitionFromScreenName = exports.getScreenDefinition = exports.getHomeModuleDefinition = exports.getHomeModuleKey = exports.getHomeModuleName = exports.setDatabaseName = exports.setClientEntitiesModules = exports.getClientEntitiesModules = exports.getHomeScreen = exports.getModuleFromKey = exports.getModules = exports.setModules = exports.getDatabaseName = exports.getApplicationName = exports.getApplicationKey = exports.getEnvironmentName = exports.getEnvironmentKey = exports.setApplicationDefinition = void 0;
    var appDefinition = {
        environmentKey: "",
        environmentName: "",
        applicationKey: "",
        applicationName: "",
        userProviderName: "",
        debugEnabled: false,
        homeModuleName: "",
        homeModuleKey: "",
        modules: {},
        homeModuleControllerName: "",
        homeModuleLanguageResourcesName: "",
        clientEntitiesModules: [],
        applicationDefaultTimeout: null,
        isWeb: false,
        showWatermark: false,
    };
    function setApplicationDefinition(newApplicationDefinition) {
        appDefinition = newApplicationDefinition;
    }
    exports.setApplicationDefinition = setApplicationDefinition;
    function getEnvironmentKey() {
        return appDefinition.environmentKey;
    }
    exports.getEnvironmentKey = getEnvironmentKey;
    function getEnvironmentName() {
        return appDefinition.environmentName;
    }
    exports.getEnvironmentName = getEnvironmentName;
    function getApplicationKey() {
        return appDefinition.applicationKey;
    }
    exports.getApplicationKey = getApplicationKey;
    function getApplicationName() {
        return appDefinition.applicationName;
    }
    exports.getApplicationName = getApplicationName;
    function getDatabaseName() {
        return appDefinition.databaseName;
    }
    exports.getDatabaseName = getDatabaseName;
    function setModules(modules) {
        appDefinition.modules = modules;
    }
    exports.setModules = setModules;
    function getModules() {
        return appDefinition.modules;
    }
    exports.getModules = getModules;
    function getModuleFromKey(moduleKey) {
        var modules = appDefinition.modules;
        var moduleDefinition = modules[moduleKey];
        if (!moduleDefinition) {
            modules[moduleKey] = {
                moduleName: null,
                homeScreenName: null,
                splashScreenName: null,
                screens: [],
                staticEntities: {},
            };
        }
        return modules[moduleKey];
    }
    exports.getModuleFromKey = getModuleFromKey;
    function getHomeScreen(module) {
        if (module.homeScreenName) {
            return getScreenDefinitionFromScreenName(module, module.homeScreenName);
        }
        if (module.screens && module.screens.length > 0) {
            return module.screens[0];
        }
        return null;
    }
    exports.getHomeScreen = getHomeScreen;
    function getClientEntitiesModules() {
        return appDefinition.clientEntitiesModules;
    }
    exports.getClientEntitiesModules = getClientEntitiesModules;
    function setClientEntitiesModules(moduleNames) {
        appDefinition.clientEntitiesModules = moduleNames;
    }
    exports.setClientEntitiesModules = setClientEntitiesModules;
    function setDatabaseName(databaseName) {
        appDefinition.databaseName = databaseName;
    }
    exports.setDatabaseName = setDatabaseName;
    function getHomeModuleName() {
        return appDefinition.homeModuleName;
    }
    exports.getHomeModuleName = getHomeModuleName;
    function getHomeModuleKey() {
        return appDefinition.homeModuleKey;
    }
    exports.getHomeModuleKey = getHomeModuleKey;
    function getHomeModuleDefinition() {
        if (appDefinition.homeModuleName && appDefinition.modules) {
            var homeModule = appDefinition.modules[appDefinition.homeModuleKey];
            return !!homeModule ? homeModule : null;
        }
        return null;
    }
    exports.getHomeModuleDefinition = getHomeModuleDefinition;
    function getScreenDefinition(moduleDefinition, screenUrl) {
        for (var _i = 0, _a = moduleDefinition.screens; _i < _a.length; _i++) {
            var screen_1 = _a[_i];
            if (screen_1.screenUrl === screenUrl) {
                return screen_1;
            }
        }
        return null;
    }
    exports.getScreenDefinition = getScreenDefinition;
    function getScreenDefinitionFromScreenName(moduleDefinition, screenName) {
        for (var _i = 0, _a = moduleDefinition.screens; _i < _a.length; _i++) {
            var screen_2 = _a[_i];
            if (screen_2.screenName === screenName) {
                return screen_2;
            }
        }
        return null;
    }
    exports.getScreenDefinitionFromScreenName = getScreenDefinitionFromScreenName;
    function getDefaultModuleHomeScreenURL() {
        var moduleDefinition = getHomeModuleDefinition();
        var homeScreen = getHomeScreen(moduleDefinition);
        return homeScreen ? "/".concat(moduleDefinition.moduleName, "/").concat(homeScreen.screenUrl) : null;
    }
    exports.getDefaultModuleHomeScreenURL = getDefaultModuleHomeScreenURL;
    function getUserCookieName() {
        return "nr2" + appDefinition.userProviderName;
    }
    exports.getUserCookieName = getUserCookieName;
    function getUserProviderName() {
        return appDefinition.userProviderName;
    }
    exports.getUserProviderName = getUserProviderName;
    function isDebugEnabled() {
        return appDefinition.debugEnabled;
    }
    exports.isDebugEnabled = isDebugEnabled;
    function getHomeModuleControllerName() {
        return appDefinition.homeModuleControllerName;
    }
    exports.getHomeModuleControllerName = getHomeModuleControllerName;
    function getHomeModuleLanguageResourcesName() {
        return appDefinition.homeModuleLanguageResourcesName;
    }
    exports.getHomeModuleLanguageResourcesName = getHomeModuleLanguageResourcesName;
    function getApplicationDefaultTimeout() {
        return appDefinition.applicationDefaultTimeout;
    }
    exports.getApplicationDefaultTimeout = getApplicationDefaultTimeout;
    function setApplicationDefaultTimeout(applicationDefaultTimeout) {
        appDefinition.applicationDefaultTimeout = applicationDefaultTimeout;
    }
    exports.setApplicationDefaultTimeout = setApplicationDefaultTimeout;
    function getDefaultTransition() {
        var transitionAnimation = Transitions.TransitionAnimation[appDefinition.defaultTransition];
        return Transitions.createTransition(transitionAnimation);
    }
    exports.getDefaultTransition = getDefaultTransition;
    function getErrorPageConfig() {
        return appDefinition.errorPageConfig;
    }
    exports.getErrorPageConfig = getErrorPageConfig;
    function isWebApplication() {
        return appDefinition.isWeb;
    }
    exports.isWebApplication = isWebApplication;
    function showWatermark() {
        return appDefinition.showWatermark;
    }
    exports.showWatermark = showWatermark;
    function moduleBelongsToApp(moduleName) {
        var _a;
        var targetModule = Object.keys(appDefinition.modules)
            .map(function (key) { return appDefinition.modules[key]; })
            .filter(function (module) { return module.moduleName === moduleName; });
        return ((_a = targetModule[0]) === null || _a === void 0 ? void 0 : _a.ownerAppKey) === getApplicationKey();
    }
    exports.moduleBelongsToApp = moduleBelongsToApp;
    function getBasePath(_a) {
        var _b, _c;
        var _d = _a === void 0 ? {} : _a, _e = _d.applicationHomeModule, applicationHomeModule = _e === void 0 ? getHomeModuleName : _e;
        var globalObject = typeof window !== "undefined" ? window : global;
        var basePath = (_c = (_b = globalObject.OutSystemsApp) === null || _b === void 0 ? void 0 : _b.basePath) !== null && _c !== void 0 ? _c : applicationHomeModule();
        return "/".concat(basePath, "/").replace(/\/(\/)+/gm, "/");
    }
    exports.getBasePath = getBasePath;
});
//# sourceMappingURL=ApplicationInfo.js.map;
define('OutSystems/ClientRuntime/modules/Storage/StorageType',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var StorageType;
    (function (StorageType) {
        StorageType[StorageType["Persistent"] = 0] = "Persistent";
        StorageType[StorageType["Session"] = 1] = "Session";
    })(StorageType || (StorageType = {}));
    exports.default = StorageType;
});
//# sourceMappingURL=StorageType.js.map;
define('OutSystems/ClientRuntime/modules/Storage/InMemoryStorage',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var InMemoryStorage = (function () {
        function InMemoryStorage(other) {
            this.storageObj = {};
            if (!!other) {
                var i = 0;
                var key = other.key(i);
                while (key !== null) {
                    this.storageObj[key] = other.getItem(key);
                    key = other.key(++i);
                }
            }
        }
        Object.defineProperty(InMemoryStorage.prototype, "length", {
            get: function () {
                return Object.keys(this.storageObj).length;
            },
            enumerable: false,
            configurable: true
        });
        InMemoryStorage.prototype.clear = function () {
            this.storageObj = {};
        };
        InMemoryStorage.prototype.getItem = function (key) {
            return this.storageObj.hasOwnProperty(key) ? this.storageObj[key] : null;
        };
        InMemoryStorage.prototype.key = function (index) {
            var keys = Object.keys(this.storageObj);
            return index < keys.length ? keys[index] : null;
        };
        InMemoryStorage.prototype.removeItem = function (key) {
            if (this.storageObj.hasOwnProperty(key)) {
                delete this.storageObj[key];
            }
        };
        InMemoryStorage.prototype.setItem = function (key, data) {
            this.storageObj[key] = data;
        };
        return InMemoryStorage;
    }());
    exports.default = InMemoryStorage;
});
//# sourceMappingURL=InMemoryStorage.js.map;
define('OutSystems/ClientRuntime/modules/Storage/StorageNaming',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setDefaultStorageNamespace = exports.getDefaultStorageNamespace = exports.OS_STORAGE_PREFIX = void 0;
    exports.OS_STORAGE_PREFIX = "$OS_";
    var defaultNameSpace = "OS";
    function getDefaultStorageNamespace() {
        return defaultNameSpace;
    }
    exports.getDefaultStorageNamespace = getDefaultStorageNamespace;
    function setDefaultStorageNamespace(storageNamespace) {
        defaultNameSpace = storageNamespace;
    }
    exports.setDefaultStorageNamespace = setDefaultStorageNamespace;
});
//# sourceMappingURL=StorageNaming.js.map;
define('OutSystems/ClientRuntime/modules/Storage/StorageEnvironment',["require", "exports", "./InMemoryStorage", "./StorageNaming", "./StorageType"], function (require, exports, InMemoryStorage_1, StorageNaming_1, StorageType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tryExpandStorage = exports.setCustomSessionStorage = exports.setCustomPersistentStorage = exports.getSessionStorage = exports.getPersistentStorage = exports.isSpecificStorageAvailable = void 0;
    var builtInPersistentStorage = typeof window === "undefined" ? undefined : window.localStorage;
    var builtInSessionStorage = typeof window === "undefined" ? undefined : window.sessionStorage;
    var getBuiltInStorage = function (storageType) {
        return storageType === StorageType_1.default.Persistent ? builtInPersistentStorage : builtInSessionStorage;
    };
    var currentPersistentStorage = isSpecificStorageAvailable(StorageType_1.default.Persistent)
        ? getBuiltInStorage(StorageType_1.default.Persistent)
        : new InMemoryStorage_1.default();
    var currentSessionStorage = isSpecificStorageAvailable(StorageType_1.default.Session)
        ? getBuiltInStorage(StorageType_1.default.Session)
        : new InMemoryStorage_1.default();
    function isSpecificStorageAvailable(storageType) {
        var testKey = StorageNaming_1.OS_STORAGE_PREFIX + "test";
        var testValue = "1";
        try {
            var storage = getBuiltInStorage(storageType);
            storage.setItem(testKey, testValue);
            var writeOkFlag = storage.getItem(testKey) === testValue;
            storage.removeItem(testKey);
            return writeOkFlag;
        }
        catch (e) {
            return false;
        }
    }
    exports.isSpecificStorageAvailable = isSpecificStorageAvailable;
    function getPersistentStorage() {
        return currentPersistentStorage;
    }
    exports.getPersistentStorage = getPersistentStorage;
    function getSessionStorage() {
        return currentSessionStorage;
    }
    exports.getSessionStorage = getSessionStorage;
    function setCustomPersistentStorage(customStorage) {
        currentPersistentStorage = customStorage;
    }
    exports.setCustomPersistentStorage = setCustomPersistentStorage;
    function setCustomSessionStorage(customStorage) {
        currentSessionStorage = customStorage;
    }
    exports.setCustomSessionStorage = setCustomSessionStorage;
    function tryExpandStorage(storageType) {
        if (storageType === StorageType_1.default.Persistent && currentPersistentStorage !== builtInPersistentStorage) {
            console.warn("The localStorage is full... Proceding with a static Javascript object");
            currentPersistentStorage = new InMemoryStorage_1.default(currentPersistentStorage);
            return true;
        }
        else if (storageType === StorageType_1.default.Session && currentSessionStorage !== builtInSessionStorage) {
            console.warn("The sessionStorage is full... Proceding with a static Javascript object");
            currentSessionStorage = new InMemoryStorage_1.default(currentSessionStorage);
            return true;
        }
        return false;
    }
    exports.tryExpandStorage = tryExpandStorage;
});
//# sourceMappingURL=StorageEnvironment.js.map;
define('OutSystems/ClientRuntime/modules/Storage/StorageObject',["require", "exports", "./StorageEnvironment", "./StorageNaming", "./StorageType"], function (require, exports, StorageEnvironment_1, StorageNaming_1, StorageType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CACHE_NO_VALUE = Object.freeze(Object());
    var StorageObject = (function () {
        function StorageObject(storageType, key, defaultValue, getModuleName) {
            this.storageType = storageType;
            this.key = key;
            this.defaultValue = defaultValue;
            this.getModuleName = function () { return (0, StorageNaming_1.getDefaultStorageNamespace)(); };
            this.clearCache();
            if (getModuleName) {
                this.getModuleName = getModuleName;
            }
        }
        StorageObject.prototype.get = function () {
            return this.getValueForModule(this.getModuleName());
        };
        StorageObject.prototype.set = function (value) {
            this.setValueForModule(this.getModuleName(), value);
        };
        StorageObject.prototype.remove = function () {
            this.removeValueForModule(this.getModuleName());
        };
        StorageObject.prototype.isDefined = function () {
            return this.hasValueForModule(this.getModuleName());
        };
        StorageObject.prototype.getStorageKeyForModule = function (moduleName) {
            return StorageNaming_1.OS_STORAGE_PREFIX + moduleName + "$" + this.key;
        };
        Object.defineProperty(StorageObject.prototype, "storage", {
            get: function () {
                return this.storageType === StorageType_1.default.Persistent ? (0, StorageEnvironment_1.getPersistentStorage)() : (0, StorageEnvironment_1.getSessionStorage)();
            },
            enumerable: false,
            configurable: true
        });
        StorageObject.prototype.getValueForModule = function (moduleName) {
            if (this.cachedValue === CACHE_NO_VALUE) {
                this.cachedValue = this.getValueForModuleFromStorage(moduleName);
            }
            return this.cachedValue;
        };
        StorageObject.prototype.getValueForModuleFromStorage = function (moduleName) {
            var value = this.storage.getItem(this.getStorageKeyForModule(moduleName));
            if (value === null) {
                return this.defaultValue;
            }
            return value === "undefined" || value === undefined ? undefined : JSON.parse(value);
        };
        StorageObject.prototype.hasValueForModule = function (moduleName) {
            var value = this.storage.getItem(this.getStorageKeyForModule(moduleName));
            return value !== null && value !== undefined && value !== "undefined";
        };
        StorageObject.prototype.setValueForModule = function (moduleName, value) {
            var storageKey = this.getStorageKeyForModule(moduleName);
            var stringValue = JSON.stringify(value);
            var storageObject = this.storage;
            if (!storageObject || !storageObject.setItem) {
                throw Error("The storage object for " + this.key + " is invalid.");
            }
            try {
                storageObject.setItem(storageKey, stringValue);
                this.cachedValue = value;
            }
            catch (error) {
                if ((0, StorageEnvironment_1.tryExpandStorage)(this.storageType)) {
                    this.storage.setItem(storageKey, stringValue);
                }
                else {
                    throw error;
                }
            }
        };
        StorageObject.prototype.removeValueForModule = function (moduleName) {
            this.storage.removeItem(this.getStorageKeyForModule(moduleName));
            this.clearCache();
        };
        StorageObject.prototype.clearCache = function () {
            this.cachedValue = CACHE_NO_VALUE;
        };
        return StorageObject;
    }());
    exports.default = StorageObject;
});
//# sourceMappingURL=StorageObject.js.map;
define('OutSystems/ClientRuntime/StorageProvider',["require", "exports", "./modules/Storage/StorageType", "./modules/Storage/InMemoryStorage", "./modules/Storage/StorageObject", "./modules/Storage/StorageNaming", "./modules/Storage/StorageEnvironment"], function (require, exports, StorageType_1, InMemoryStorage_1, StorageObject_1, StorageNaming_1, StorageEnvironment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setCustomSessionStorage = exports.setCustomPersistentStorage = exports.getSessionStorage = exports.getPersistentStorage = exports.getDefaultStorageNamespace = exports.setDefaultStorageNamespace = exports.StorageObject = exports.DummyStorage = exports.StorageType = void 0;
    Object.defineProperty(exports, "StorageType", { enumerable: true, get: function () { return StorageType_1.default; } });
    Object.defineProperty(exports, "DummyStorage", { enumerable: true, get: function () { return InMemoryStorage_1.default; } });
    Object.defineProperty(exports, "StorageObject", { enumerable: true, get: function () { return StorageObject_1.default; } });
    Object.defineProperty(exports, "setDefaultStorageNamespace", { enumerable: true, get: function () { return StorageNaming_1.setDefaultStorageNamespace; } });
    Object.defineProperty(exports, "getDefaultStorageNamespace", { enumerable: true, get: function () { return StorageNaming_1.getDefaultStorageNamespace; } });
    Object.defineProperty(exports, "getPersistentStorage", { enumerable: true, get: function () { return StorageEnvironment_1.getPersistentStorage; } });
    Object.defineProperty(exports, "getSessionStorage", { enumerable: true, get: function () { return StorageEnvironment_1.getSessionStorage; } });
    Object.defineProperty(exports, "setCustomPersistentStorage", { enumerable: true, get: function () { return StorageEnvironment_1.setCustomPersistentStorage; } });
    Object.defineProperty(exports, "setCustomSessionStorage", { enumerable: true, get: function () { return StorageEnvironment_1.setCustomSessionStorage; } });
});
//# sourceMappingURL=StorageProvider.js.map;
define('OutSystems/ClientRuntime/ClientInfo',["require", "exports", "./StorageProvider"], function (require, exports, StorageProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClientInfo = exports.setClientInfo = void 0;
    var ClientInfo = (function () {
        function ClientInfo(_device) {
            this._device = _device;
        }
        Object.defineProperty(ClientInfo.prototype, "device", {
            get: function () {
                return this._device;
            },
            enumerable: false,
            configurable: true
        });
        return ClientInfo;
    }());
    var DeviceInfo = (function () {
        function DeviceInfo(_platform, _version, _manufacturer, _model, _uuid, _serial, _cordova, _isVirtual) {
            this._platform = _platform;
            this._version = _version;
            this._manufacturer = _manufacturer;
            this._model = _model;
            this._uuid = _uuid;
            this._serial = _serial;
            this._cordova = _cordova;
            this._isVirtual = _isVirtual;
        }
        Object.defineProperty(DeviceInfo.prototype, "platform", {
            get: function () {
                return this._platform;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "version", {
            get: function () {
                return this._version;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "manufacturer", {
            get: function () {
                return this._manufacturer;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "model", {
            get: function () {
                return this._model;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "uuid", {
            get: function () {
                return this._uuid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "serial", {
            get: function () {
                return this._serial;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "cordova", {
            get: function () {
                return this._cordova;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeviceInfo.prototype, "isVirtual", {
            get: function () {
                return this._isVirtual;
            },
            enumerable: false,
            configurable: true
        });
        return DeviceInfo;
    }());
    var Serialization;
    (function (Serialization) {
        function serializeClientInfo(clientInfo) {
            var obj = clientInfoToObject(clientInfo);
            if (!obj) {
                return;
            }
            return JSON.stringify(obj);
        }
        Serialization.serializeClientInfo = serializeClientInfo;
        function clientInfoToObject(clientInfo) {
            if (!clientInfo) {
                return;
            }
            return {
                device: clientInfo.device ? deviceInfoToObject(clientInfo.device) : undefined,
            };
        }
        function deviceInfoToObject(deviceInfo) {
            if (!deviceInfo) {
                return;
            }
            return {
                platform: deviceInfo.platform,
                version: deviceInfo.version,
                manufacturer: deviceInfo.manufacturer,
                model: deviceInfo.model,
                uuid: deviceInfo.uuid,
                serial: deviceInfo.serial,
                cordova: deviceInfo.cordova,
                isVirtual: deviceInfo.isVirtual,
            };
        }
        function deserializeClientInfo(json) {
            var obj;
            try {
                obj = JSON.parse(json);
            }
            catch (e) { }
            if (!obj) {
                return;
            }
            return objectToClientInfo(obj);
        }
        Serialization.deserializeClientInfo = deserializeClientInfo;
        function objectToClientInfo(source) {
            if (!source) {
                return;
            }
            return new ClientInfo(objectToDeviceInfo(source.device));
        }
        function objectToDeviceInfo(source) {
            if (!source) {
                return;
            }
            return new DeviceInfo(typeof source.platform === "string" ? source.platform : undefined, typeof source.version === "string" ? source.version : undefined, typeof source.manufacturer === "string" ? source.manufacturer : undefined, typeof source.model === "string" ? source.model : undefined, typeof source.uuid === "string" ? source.uuid : undefined, typeof source.serial === "string" ? source.serial : undefined, typeof source.cordova === "string" ? source.cordova : undefined, typeof source.isVirtual === "boolean" ? source.isVirtual : undefined);
        }
    })(Serialization || (Serialization = {}));
    var clientInfoStorage = new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Persistent, "ClientInfo");
    function setClientInfo() {
        var device = window.device;
        if (device) {
            var clientInfo = new ClientInfo(new DeviceInfo(device.platform, device.version, device.manufacturer, device.model, device.uuid, device.serial, device.cordova, device.isVirtual));
            clientInfoStorage.set(Serialization.serializeClientInfo(clientInfo));
        }
    }
    exports.setClientInfo = setClientInfo;
    function getClientInfo() {
        var clientInfoData = clientInfoStorage.get();
        if (!clientInfoData) {
            return;
        }
        return Serialization.deserializeClientInfo(clientInfoData);
    }
    exports.getClientInfo = getClientInfo;
});
//# sourceMappingURL=ClientInfo.js.map;
define('OutSystems/ClientRuntime/CookiesManager',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readCookie = exports.initialize = void 0;
    var nativeHttp;
    function initialize(nativeHttpPlugin) {
        nativeHttp = nativeHttpPlugin;
    }
    exports.initialize = initialize;
    function getCookies() {
        if (nativeHttp) {
            return nativeHttp.getCookies();
        }
        else {
            return document.cookie;
        }
    }
    function readCookie(cookieName) {
        var cookieKey = cookieName + "=";
        var cookies = getCookies().split(";");
        for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i];
            while (cookie.charAt(0) === " ") {
                cookie = cookie.substring(1, cookie.length);
            }
            if (cookie.indexOf(cookieKey) === 0) {
                return decodeURIComponent(cookie.substring(cookieKey.length, cookie.length));
            }
        }
        return null;
    }
    exports.readCookie = readCookie;
});
//# sourceMappingURL=CookiesManager.js.map;
define('OutSystems/ClientRuntime/Exceptions',["require", "exports", "tslib"], function (require, exports, tslib_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isApplicationOffline = exports.isSystem = exports.getException = exports.getExceptionInfo = exports.getStack = exports.getMessage = exports.isInstanceOf = exports.Exceptions = void 0;
    var Exceptions;
    (function (Exceptions) {
        Exceptions.CustomError = function (message) {
            var _this = Error.call(this, message);
            if (typeof Object.setPrototypeOf === "function") {
                Object.setPrototypeOf(_this, this.constructor.prototype);
            }
            else {
                _this.__proto__ = this.constructor.prototype;
            }
            if (!("stack" in this)) {
                if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, this.constructor);
                }
            }
        };
        Exceptions.CustomError.prototype = Error.prototype;
        var Exception = (function (_super) {
            tslib_1.__extends(Exception, _super);
            function Exception(message, extraStack) {
                var _this_1 = _super.call(this, message) || this;
                _this_1.extraStack = extraStack;
                _this_1.message = message;
                _this_1.name = "Exception";
                return _this_1;
            }
            return Exception;
        }(Exceptions.CustomError));
        Exceptions.Exception = Exception;
        var ServerException = (function (_super) {
            tslib_1.__extends(ServerException, _super);
            function ServerException(specificType, message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.specificType = specificType;
                _this_1.name = specificType;
                return _this_1;
            }
            return ServerException;
        }(Exception));
        Exceptions.ServerException = ServerException;
        var DataBaseException = (function (_super) {
            tslib_1.__extends(DataBaseException, _super);
            function DataBaseException(specificType, message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.specificType = specificType;
                _this_1.name = specificType;
                return _this_1;
            }
            return DataBaseException;
        }(Exception));
        Exceptions.DataBaseException = DataBaseException;
        var OpenDatabaseException = (function (_super) {
            tslib_1.__extends(OpenDatabaseException, _super);
            function OpenDatabaseException(message, extraStack) {
                return _super.call(this, "OpenDatabaseException", message, extraStack) || this;
            }
            return OpenDatabaseException;
        }(DataBaseException));
        Exceptions.OpenDatabaseException = OpenDatabaseException;
        var CommunicationException = (function (_super) {
            tslib_1.__extends(CommunicationException, _super);
            function CommunicationException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "CommunicationException";
                return _this_1;
            }
            return CommunicationException;
        }(Exception));
        Exceptions.CommunicationException = CommunicationException;
        var NumberOverflowException = (function (_super) {
            tslib_1.__extends(NumberOverflowException, _super);
            function NumberOverflowException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "NumberOverflowException";
                return _this_1;
            }
            NumberOverflowException.prototype.valueOf = function () {
                return this.name + ": " + this.message;
            };
            return NumberOverflowException;
        }(Exception));
        Exceptions.NumberOverflowException = NumberOverflowException;
        var InvalidJavascriptType = (function (_super) {
            tslib_1.__extends(InvalidJavascriptType, _super);
            function InvalidJavascriptType(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "InvalidJavascriptType";
                return _this_1;
            }
            InvalidJavascriptType.prototype.valueOf = function () {
                return this.name + ": " + this.message;
            };
            return InvalidJavascriptType;
        }(Exception));
        Exceptions.InvalidJavascriptType = InvalidJavascriptType;
        var SecurityException = (function (_super) {
            tslib_1.__extends(SecurityException, _super);
            function SecurityException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "SecurityException";
                return _this_1;
            }
            return SecurityException;
        }(Exception));
        Exceptions.SecurityException = SecurityException;
        var InvalidLoginException = (function (_super) {
            tslib_1.__extends(InvalidLoginException, _super);
            function InvalidLoginException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "InvalidLoginException";
                return _this_1;
            }
            return InvalidLoginException;
        }(SecurityException));
        Exceptions.InvalidLoginException = InvalidLoginException;
        var NotRegisteredException = (function (_super) {
            tslib_1.__extends(NotRegisteredException, _super);
            function NotRegisteredException(specificType, message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.specificType = specificType;
                _this_1.name = specificType;
                return _this_1;
            }
            return NotRegisteredException;
        }(SecurityException));
        Exceptions.NotRegisteredException = NotRegisteredException;
        var SystemException = (function (_super) {
            tslib_1.__extends(SystemException, _super);
            function SystemException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "SystemException";
                return _this_1;
            }
            return SystemException;
        }(Exception));
        Exceptions.SystemException = SystemException;
        var IgnorableSystemException = (function (_super) {
            tslib_1.__extends(IgnorableSystemException, _super);
            function IgnorableSystemException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "IgnorableSystemException";
                return _this_1;
            }
            return IgnorableSystemException;
        }(SystemException));
        Exceptions.IgnorableSystemException = IgnorableSystemException;
        var ViewHasChangedException = (function (_super) {
            tslib_1.__extends(ViewHasChangedException, _super);
            function ViewHasChangedException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "ViewHasChangedException";
                return _this_1;
            }
            return ViewHasChangedException;
        }(IgnorableSystemException));
        Exceptions.ViewHasChangedException = ViewHasChangedException;
        var OutOfOrderException = (function (_super) {
            tslib_1.__extends(OutOfOrderException, _super);
            function OutOfOrderException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "OutOfOrderException";
                return _this_1;
            }
            return OutOfOrderException;
        }(IgnorableSystemException));
        Exceptions.OutOfOrderException = OutOfOrderException;
        var OutOfContextException = (function (_super) {
            tslib_1.__extends(OutOfContextException, _super);
            function OutOfContextException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "OutOfContextException";
                return _this_1;
            }
            return OutOfContextException;
        }(IgnorableSystemException));
        Exceptions.OutOfContextException = OutOfContextException;
        var RedirectOccurredException = (function (_super) {
            tslib_1.__extends(RedirectOccurredException, _super);
            function RedirectOccurredException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "RedirectOccurredException";
                return _this_1;
            }
            return RedirectOccurredException;
        }(IgnorableSystemException));
        Exceptions.RedirectOccurredException = RedirectOccurredException;
        var UnhandledOrIgnoredErrorInEventException = (function (_super) {
            tslib_1.__extends(UnhandledOrIgnoredErrorInEventException, _super);
            function UnhandledOrIgnoredErrorInEventException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "UnhandledOrIgnoredErrorInEventException";
                return _this_1;
            }
            Object.defineProperty(UnhandledOrIgnoredErrorInEventException.prototype, "handleErrorResult", {
                get: function () {
                    return this._handleErrorResult;
                },
                enumerable: false,
                configurable: true
            });
            UnhandledOrIgnoredErrorInEventException.create = function (handleErrorResult, message, extraStack) {
                var result = new UnhandledOrIgnoredErrorInEventException(message, extraStack);
                result._handleErrorResult = handleErrorResult;
                return result;
            };
            UnhandledOrIgnoredErrorInEventException.ignore = function (error) {
                if (!isInstanceOf(error, UnhandledOrIgnoredErrorInEventException)) {
                    throw error;
                }
            };
            return UnhandledOrIgnoredErrorInEventException;
        }(IgnorableSystemException));
        Exceptions.UnhandledOrIgnoredErrorInEventException = UnhandledOrIgnoredErrorInEventException;
        var ApplicationBackendUnavailableException = (function (_super) {
            tslib_1.__extends(ApplicationBackendUnavailableException, _super);
            function ApplicationBackendUnavailableException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "ApplicationBackendUnavailableException";
                return _this_1;
            }
            return ApplicationBackendUnavailableException;
        }(SystemException));
        Exceptions.ApplicationBackendUnavailableException = ApplicationBackendUnavailableException;
        var LicensingException = (function (_super) {
            tslib_1.__extends(LicensingException, _super);
            function LicensingException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "LicensingException";
                return _this_1;
            }
            return LicensingException;
        }(SystemException));
        Exceptions.LicensingException = LicensingException;
        var IncompatibleProducerException = (function (_super) {
            tslib_1.__extends(IncompatibleProducerException, _super);
            function IncompatibleProducerException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "IncompatibleProducerException";
                return _this_1;
            }
            return IncompatibleProducerException;
        }(SystemException));
        Exceptions.IncompatibleProducerException = IncompatibleProducerException;
        var ControllerDisposedException = (function (_super) {
            tslib_1.__extends(ControllerDisposedException, _super);
            function ControllerDisposedException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "ControllerDisposedException";
                return _this_1;
            }
            return ControllerDisposedException;
        }(IgnorableSystemException));
        Exceptions.ControllerDisposedException = ControllerDisposedException;
        var AbortActivityChangeException = (function (_super) {
            tslib_1.__extends(AbortActivityChangeException, _super);
            function AbortActivityChangeException(message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.name = "AbortActivityChangeException";
                return _this_1;
            }
            return AbortActivityChangeException;
        }(Exception));
        Exceptions.AbortActivityChangeException = AbortActivityChangeException;
        var UserException = (function (_super) {
            tslib_1.__extends(UserException, _super);
            function UserException(specificType, message, extraStack) {
                var _this_1 = _super.call(this, message, extraStack) || this;
                _this_1.specificType = specificType;
                _this_1.name = specificType;
                return _this_1;
            }
            return UserException;
        }(Exception));
        Exceptions.UserException = UserException;
    })(Exceptions || (exports.Exceptions = Exceptions = {}));
    function isInstanceOf(ex, type, specificType) {
        if (specificType === void 0) { specificType = ""; }
        if (type === Exceptions.Exception) {
            return true;
        }
        if (ex instanceof type) {
            if (specificType !== "") {
                if (ex.specificType) {
                    return ex.specificType === specificType;
                }
                return false;
            }
            return true;
        }
        return false;
    }
    exports.isInstanceOf = isInstanceOf;
    function getMessage(ex) {
        if (ex === undefined) {
            return "";
        }
        else if (ex instanceof Error) {
            return ex.message;
        }
        else {
            var message = ex.toString();
            if (message === "[object SQLError]") {
                return ex.message.toString();
            }
            else {
                return message;
            }
        }
    }
    exports.getMessage = getMessage;
    function getStack(ex) {
        var stack = (ex.extraStack !== undefined ? ex.extraStack + "\r\n " : "") + (ex.stack || "");
        return stack || "";
    }
    exports.getStack = getStack;
    function getExceptionInfo(error) {
        var info = {
            name: error.name,
            message: getMessage(error),
            stack: getStack(error),
            extraStack: error instanceof Exceptions.Exception ? error.extraStack : undefined,
        };
        return info;
    }
    exports.getExceptionInfo = getExceptionInfo;
    function getException(info) {
        if (!!info.name) {
            if (!!info.specificType) {
                return new Exceptions[info.name](info.specificType, info.message, info.extraStack);
            }
            else {
                return new Exceptions[info.name](info.message, info.extraStack);
            }
        }
        else {
            return new Exceptions.Exception(info.message, info.extraStack);
        }
    }
    exports.getException = getException;
    function isSystem(ex) {
        return isInstanceOf(ex, Exceptions.SystemException);
    }
    exports.isSystem = isSystem;
    function isApplicationOffline(ex) {
        return isInstanceOf(ex, Exceptions.LicensingException);
    }
    exports.isApplicationOffline = isApplicationOffline;
});
//# sourceMappingURL=Exceptions.js.map;
define('OutSystems/ClientRuntime/Flow',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.whileTrueAsync = exports.doWhileAsync = exports.forEachAsync = exports.whileAsync = exports.executeAsyncFlow = exports.tryFinally = exports.tryCatch = exports.tryCatchFinally = exports.executeSequence = exports.throwAsync = exports.returnAsync = exports.continueAsync = exports.breakAsync = exports.resolve = exports.promise = exports.isPromiseCompatible = void 0;
    var MethodSignalReturn = (function () {
        function MethodSignalReturn(returnValue) {
            this.returnValue = returnValue;
        }
        return MethodSignalReturn;
    }());
    var LOOP_SIGNAL_BREAK = new Object();
    var LOOP_SIGNAL_CONTINUE = new Object();
    function isPromiseCompatible(target) {
        var promise = target;
        return promise && typeof promise.then === "function" && typeof promise.catch === "function";
    }
    exports.isPromiseCompatible = isPromiseCompatible;
    function handleLoopSignal(loop, signal) {
        switch (signal) {
            case LOOP_SIGNAL_CONTINUE:
                return loop();
            case LOOP_SIGNAL_BREAK:
                return undefined;
            default:
                return Promise.reject(signal);
        }
    }
    function createLoopCond(cond) {
        return cond() ? Promise.resolve(undefined) : breakAsync();
    }
    function promise(callback) {
        return new Promise(callback);
    }
    exports.promise = promise;
    function resolve(value) {
        return Promise.resolve(value);
    }
    exports.resolve = resolve;
    function breakAsync() {
        return Promise.reject(LOOP_SIGNAL_BREAK);
    }
    exports.breakAsync = breakAsync;
    function continueAsync() {
        return Promise.reject(LOOP_SIGNAL_CONTINUE);
    }
    exports.continueAsync = continueAsync;
    function returnAsync(returnValue) {
        return Promise.reject(new MethodSignalReturn(returnValue));
    }
    exports.returnAsync = returnAsync;
    function throwAsync(exception) {
        return Promise.reject(exception);
    }
    exports.throwAsync = throwAsync;
    function executeSequence(f) {
        return innerExecuteSequence(f);
    }
    exports.executeSequence = executeSequence;
    function innerExecuteSequence(f, errorTimeoutHandle) {
        var result = undefined;
        var error = undefined;
        var raiseError = function () {
            throw error;
        };
        var postponeRaiseError = function () {
            clearTimeout(errorTimeoutHandle);
            errorTimeoutHandle = setTimeout(raiseError, 0);
        };
        function handleResult(onFulfilled, onRejected) {
            if (error) {
                if (onRejected) {
                    clearTimeout(errorTimeoutHandle);
                    return innerExecuteSequence(function () { return onRejected(error); });
                }
                postponeRaiseError();
                return innerExecuteSequence(raiseError, errorTimeoutHandle);
            }
            if (onFulfilled) {
                return innerExecuteSequence(function () { return onFulfilled(result); });
            }
            return innerExecuteSequence(function () { return result; });
        }
        try {
            result = f();
        }
        catch (e) {
            error = e;
            postponeRaiseError();
        }
        if (isPromiseCompatible(result)) {
            return result;
        }
        return {
            then: function (onFulfilled, onRejected) {
                return handleResult(onFulfilled, onRejected);
            },
            catch: function (onRejected) {
                return handleResult(undefined, onRejected);
            },
        };
    }
    function tryCatchFinally(tryBranch, catchBranch, finallyBranch) {
        if (catchBranch === void 0) { catchBranch = function (e) { return Promise.reject(e); }; }
        if (finallyBranch === void 0) { finallyBranch = function () { return Promise.resolve(undefined); }; }
        return executeSequence(tryBranch)
            .catch(catchBranch)
            .then(function (returnValue) {
            return executeSequence(finallyBranch).then(function (finallyReturnValue) {
                return finallyReturnValue !== undefined ? finallyReturnValue : returnValue;
            });
        }, function (error) { return executeSequence(finallyBranch).then(function () { return Promise.reject(error); }); });
    }
    exports.tryCatchFinally = tryCatchFinally;
    function tryCatch(tryFunction, catchFunction) {
        return tryCatchFinally(tryFunction, catchFunction, undefined);
    }
    exports.tryCatch = tryCatch;
    function tryFinally(tryFunction, finallyFunction) {
        return tryCatchFinally(tryFunction, undefined, finallyFunction);
    }
    exports.tryFinally = tryFinally;
    function executeAsyncFlow(x) {
        if (x === void 0) { x = function () { return void 0; }; }
        return executeSequence(x).catch(handleReturnSignal);
    }
    exports.executeAsyncFlow = executeAsyncFlow;
    function whileAsync(cond, body) {
        function loop() {
            return createLoopCond(cond).then(body).then(loop, handleLoopSignal.bind(null, loop));
        }
        return loop();
    }
    exports.whileAsync = whileAsync;
    function forEachAsync(arr, body) {
        var i = 0;
        return whileAsync(function () { return i < arr.length; }, function () {
            var elem = arr[i++];
            return body(elem);
        });
    }
    exports.forEachAsync = forEachAsync;
    function doWhileAsync(cond, body) {
        function conditionAndLoop() {
            return createLoopCond(cond).then(loop, handleLoopSignal.bind(null, loop));
        }
        function loop() {
            return executeSequence(body)
                .then(function () { return createLoopCond(cond); })
                .then(loop, handleLoopSignal.bind(null, conditionAndLoop));
        }
        return loop();
    }
    exports.doWhileAsync = doWhileAsync;
    exports.whileTrueAsync = whileAsync.bind(null, function () { return true; });
    function handleReturnSignal(signal) {
        if (signal instanceof MethodSignalReturn) {
            return signal.returnValue;
        }
        else {
            return Promise.reject(signal);
        }
    }
});
//# sourceMappingURL=Flow.js.map;
define('OutSystems/ClientRuntime/VersionDefinition',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toObject = exports.registerPackage = exports.clientRuntimeKey = void 0;
    var versions = new Map();
    exports.clientRuntimeKey = "Client Runtime Packages";
    var cacheResult;
    function registerPackage(project, version) {
        cacheResult = null;
        versions.set(project, version);
    }
    exports.registerPackage = registerPackage;
    function toObject() {
        if (!cacheResult) {
            var result_1 = { "Client Runtime Packages": "" };
            versions.forEach(function (version, project) {
                if (version && project) {
                    result_1[exports.clientRuntimeKey] += "".concat(project, "= ").concat(version, ";");
                }
            });
            cacheResult = result_1;
        }
        return cacheResult;
    }
    exports.toObject = toObject;
});
//# sourceMappingURL=VersionDefinition.js.map;
define('OutSystems/ClientRuntime/Logger',["require", "exports", "./ClientInfo", "./Exceptions", "./StorageProvider", "./VersionDefinition"], function (require, exports, ClientInfo_1, Exceptions, StorageProvider_1, VersionDefinition) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.serializeObjectForLog = exports.setDeviceDetails = exports.error = exports.log = exports.trace = exports.setTracingEnabled = exports.hadSessionLogs = exports.hasPendingLogs = exports.setBatchSize = exports.flushLogsToServerIfOnline = exports.flushLogsToStorage = exports.flushLogsToServer = exports.enableFallbackStorage = exports.setNetworkStatusChecker = exports.setOfflineStorage = exports.setPostLogsFunction = exports.initialize = exports.forceTracing = exports.DummyLogStorage = exports.ServerLogAppender = exports.LogTypes = exports.LoggerStorage = void 0;
    exports.LoggerStorage = {
        hasTracingEnabled: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Persistent, "HasTracingEnabled"),
        fallbackLogStorage: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Persistent, "FallbackLogStorage", []),
    };
    exports.LogTypes = {
        Error: "error",
        General: "general",
        Trace: "trace",
    };
    var ServerLogAppender = (function () {
        function ServerLogAppender(postLog) {
            this.postLog = postLog;
        }
        ServerLogAppender.prototype.writeLog = function (logMessage) {
            return this.writeLogBatch([logMessage]);
        };
        ServerLogAppender.prototype.writeLogBatch = function (logBatch) {
            return this.postLog(logBatch);
        };
        return ServerLogAppender;
    }());
    exports.ServerLogAppender = ServerLogAppender;
    var DummyLogStorage = (function () {
        function DummyLogStorage() {
        }
        DummyLogStorage.prototype.writeLog = function (logMessage) {
            return Promise.resolve(undefined);
        };
        DummyLogStorage.prototype.writeLogBatch = function (logBatch) {
            return Promise.resolve(undefined);
        };
        DummyLogStorage.prototype.countLogs = function () {
            return Promise.resolve(0);
        };
        DummyLogStorage.prototype.getLogs = function (numberRows) {
            return Promise.resolve([]);
        };
        DummyLogStorage.prototype.popLogs = function (numberRows) {
            return Promise.resolve([]);
        };
        DummyLogStorage.prototype.removeLogs = function (numberRowsToDelete) {
            return Promise.resolve(undefined);
        };
        return DummyLogStorage;
    }());
    exports.DummyLogStorage = DummyLogStorage;
    var LOGGER_MODULE_NAME = "Logger";
    var DEFAULT_BATCH_SIZE = 10;
    var TIMEOUT_BASE_TIME = 200;
    var TIMEOUT_BASE_FACTOR = 1.2;
    var TIMEOUT_MAX_EXPONENT = 40;
    var ERROR_COUNT_THRESHOLD = 5;
    var SERVER_PING_TIMEOUT = 5000;
    var MESSAGE_MAX_SIZE = 2000;
    var logs;
    var batchSize;
    var timeout;
    var errorCount;
    var pingRetries;
    var tracingEnabled;
    var processLogBlocked = false;
    var isProcessingLogs;
    var retrieveLogs;
    var isOnline;
    var isServerAvailable;
    var placedLogsInFallbackStorage;
    var retrievedLogsFromFallbackStorage;
    var hasOnlineAppenderSet;
    var hasOfflineStorageSet;
    var hasFallbackStorageEnabled;
    var offlineStoragePromise;
    var onlineAppenderPromise;
    var networkStatus;
    var onSetOfflineStorage;
    var onSetOnlineAppender;
    var deviceDetails;
    function initialize() {
        logs = [];
        batchSize = DEFAULT_BATCH_SIZE;
        timeout = TIMEOUT_BASE_TIME;
        errorCount = 0;
        pingRetries = 0;
        isProcessingLogs = false;
        retrieveLogs = false;
        isOnline = false;
        isServerAvailable = false;
        placedLogsInFallbackStorage = false;
        retrievedLogsFromFallbackStorage = false;
        hasOnlineAppenderSet = false;
        hasOfflineStorageSet = false;
        hasFallbackStorageEnabled = false;
        deviceDetails = "";
        onlineAppenderPromise = new Promise(function (resolve, reject) {
            onSetOnlineAppender = function (appender) {
                hasOnlineAppenderSet = true;
                resolve(appender);
                retrieveLogs = true;
            };
        });
        offlineStoragePromise = new Promise(function (resolve, reject) {
            onSetOfflineStorage = function (storage) {
                hasOfflineStorageSet = true;
                resolve(storage);
                retrieveLogs = true;
            };
        });
    }
    exports.initialize = initialize;
    function setPostLogsFunction(postLogs) {
        var onlineAppender = new ServerLogAppender(postLogs);
        onSetOnlineAppender(onlineAppender);
    }
    exports.setPostLogsFunction = setPostLogsFunction;
    function setOfflineStorage(offlineStorage) {
        onSetOfflineStorage(offlineStorage);
    }
    exports.setOfflineStorage = setOfflineStorage;
    function setNetworkStatusChecker(networkStatusChecker) {
        networkStatusChecker.onOnline(function () { return onOnline(); });
        networkStatusChecker.onOffline(function () { return onOffline(); });
        isOnline = networkStatusChecker.isOnline();
        isServerAvailable = true;
        retrieveLogs = isOnline;
        networkStatus = networkStatusChecker;
    }
    exports.setNetworkStatusChecker = setNetworkStatusChecker;
    function enableFallbackStorage() {
        hasFallbackStorageEnabled = true;
        retrieveLogsFromFallbackStorage();
        tracingEnabled = exports.LoggerStorage.hasTracingEnabled.get();
    }
    exports.enableFallbackStorage = enableFallbackStorage;
    function processLogs() {
        if (processLogBlocked) {
            return;
        }
        isProcessingLogs = true;
        if (retrieveLogs && hasOfflineStorageSet) {
            retrieveLogsFromStorage();
            return;
        }
        Promise.resolve()
            .then(function () {
            if (isOnline && isServerAvailable && hasOnlineAppenderSet) {
                return sendLogsToServer();
            }
            else if (hasOfflineStorageSet) {
                return writeToOfflineStorage();
            }
            else {
                isProcessingLogs = false;
                return;
            }
        })
            .catch(function () {
            isProcessingLogs = false;
        });
    }
    function needsProcessing() {
        return !isEmpty() || retrieveLogs;
    }
    function sendLogsToServer() {
        if (errorCount >= ERROR_COUNT_THRESHOLD && networkStatus) {
            isServerAvailable = false;
            pingRetries = 0;
            pingServerAvailability();
            setTimeout(function () { return processLogs(); }, timeout);
            return;
        }
        return onlineAppenderPromise.then(function (appender) {
            return writeLogs(appender, batchSize);
        });
    }
    function writeToOfflineStorage(numLogs) {
        if (numLogs === void 0) { numLogs = batchSize; }
        return offlineStoragePromise.then(function (offlineStorage) {
            return writeLogs(offlineStorage, numLogs);
        });
    }
    function writeLogs(appender, numberLogs) {
        if (isEmpty()) {
            isProcessingLogs = false;
            return Promise.resolve(undefined);
        }
        var currentLogs = logs.slice(0, numberLogs);
        return appender
            .writeLogBatch(currentLogs)
            .then(function () {
            logs.splice(0, currentLogs.length);
            errorCount = 0;
            if (needsProcessing()) {
                setTimeout(function () { return processLogs(); }, timeout);
            }
            else {
                isProcessingLogs = false;
            }
        })
            .catch(function () {
            logs.splice(0, currentLogs.length);
            logs = logs.concat(currentLogs);
            errorCount++;
            setTimeout(function () { return processLogs(); }, calculateRetryTime(errorCount));
        });
    }
    function flushLogsToServer() {
        onOnline();
    }
    exports.flushLogsToServer = flushLogsToServer;
    function flushLogsToStorage(blockProcessLog) {
        if (blockProcessLog === void 0) { blockProcessLog = false; }
        processLogBlocked = blockProcessLog;
        if (hasOfflineStorageSet) {
            return writeToOfflineStorage(logs.length);
        }
        else if (hasFallbackStorageEnabled) {
            var currentLogs = logs;
            if (placedLogsInFallbackStorage) {
                currentLogs = exports.LoggerStorage.fallbackLogStorage.get().concat(logs);
            }
            exports.LoggerStorage.fallbackLogStorage.set(currentLogs);
            placedLogsInFallbackStorage = true;
            logs = [];
        }
        return Promise.resolve(undefined);
    }
    exports.flushLogsToStorage = flushLogsToStorage;
    function retrieveLogsFromFallbackStorage() {
        var sessionLogs = exports.LoggerStorage.fallbackLogStorage.get();
        if (sessionLogs.length !== 0) {
            pushBatch(sessionLogs);
            if (isOnline) {
                exports.LoggerStorage.fallbackLogStorage.remove();
            }
            else {
                networkStatus.onOnline(function () { return exports.LoggerStorage.fallbackLogStorage.remove(); });
                offlineStoragePromise.then(function () { return exports.LoggerStorage.fallbackLogStorage.remove(); });
            }
            retrievedLogsFromFallbackStorage = true;
        }
    }
    function retrieveLogsFromStorage() {
        return offlineStoragePromise.then(function (offlineStorage) {
            offlineStorage
                .getLogs()
                .then(function (retrievedLogs) {
                logs = retrievedLogs.concat(logs);
                if (retrievedLogs.length > 0) {
                    offlineStorage
                        .removeLogs(retrievedLogs.length)
                        .then(function () {
                        retrieveLogs = false;
                        setTimeout(function () { return processLogs(); }, timeout);
                    })
                        .catch(function () {
                        logs.splice(0, retrievedLogs.length);
                        setTimeout(function () { return processLogs(); }, timeout);
                    });
                }
                else {
                    retrieveLogs = false;
                    setTimeout(function () { return processLogs(); }, timeout);
                }
            })
                .catch(function () {
                setTimeout(function () { return processLogs(); }, timeout);
            });
        });
    }
    function onOnline() {
        isOnline = true;
        isServerAvailable = true;
        retrieveLogs = true;
        errorCount = 0;
        if (!isProcessingLogs) {
            processLogs();
        }
    }
    function onOffline() {
        isOnline = false;
        isServerAvailable = false;
        retrieveLogs = false;
        errorCount = 0;
        if (!isProcessingLogs) {
            processLogs();
        }
    }
    var flushLogsToServerIfOnline = function () {
        if (isOnline) {
            flushLogsToServer();
        }
    };
    exports.flushLogsToServerIfOnline = flushLogsToServerIfOnline;
    function pingServerAvailability() {
        if (!networkStatus) {
            return;
        }
        networkStatus
            .ping(SERVER_PING_TIMEOUT)
            .then(function () {
            pingRetries = 0;
            onOnline();
        })
            .catch(function () {
            if (isOnline && !isServerAvailable) {
                pingRetries++;
                setTimeout(function () {
                    pingServerAvailability();
                }, calculateRetryTime(pingRetries));
            }
        });
    }
    function setBatchSize(newBatchSize) {
        batchSize = newBatchSize;
    }
    exports.setBatchSize = setBatchSize;
    function isEmpty() {
        return logs.length === 0;
    }
    function push(logData) {
        logs.push(truncateLog(logData));
        if (!isProcessingLogs) {
            processLogs();
        }
    }
    function pushBatch(logs) {
        logs.forEach(function (log) { return push(log); });
    }
    function truncateLog(logData) {
        logData.message = !!logData.message ? logData.message.substring(0, MESSAGE_MAX_SIZE) : logData.message;
        logData.stack = !!logData.stack ? logData.stack.substring(0, MESSAGE_MAX_SIZE) : logData.stack;
        return logData;
    }
    function calculateRetryTime(numberRetries) {
        var exponent = Math.min(numberRetries, TIMEOUT_MAX_EXPONENT);
        return Math.pow(TIMEOUT_BASE_FACTOR, exponent) * timeout;
    }
    function hasPendingLogs() {
        return !isEmpty();
    }
    exports.hasPendingLogs = hasPendingLogs;
    function hadSessionLogs() {
        return retrievedLogsFromFallbackStorage;
    }
    exports.hadSessionLogs = hadSessionLogs;
    function setTracingEnabled(enableTracing) {
        if (enableTracing === void 0) { enableTracing = false; }
        tracingEnabled = enableTracing;
        try {
            exports.LoggerStorage.hasTracingEnabled.set(tracingEnabled);
        }
        catch (e) {
            trace(LOGGER_MODULE_NAME, "Error saving the new value of 'tracingEnabled' property in the local storage. " + e);
        }
    }
    exports.setTracingEnabled = setTracingEnabled;
    function trace(callerModule, message) {
        if (callerModule && message && (tracingEnabled || exports.forceTracing)) {
            var name_1 = "";
            if (typeof callerModule === "string") {
                name_1 = callerModule;
            }
            else {
                name_1 = callerModule.constructor.name;
                if (name_1 === "Function") {
                    name_1 = callerModule.name;
                }
            }
            var traceMessage = void 0;
            if (typeof message === "string") {
                traceMessage = message;
            }
            else {
                traceMessage = message();
            }
            innerLog(name_1, traceMessage, exports.LogTypes.Trace);
        }
    }
    exports.trace = trace;
    function log(module, message) {
        innerLog(module, message, exports.LogTypes.General);
    }
    exports.log = log;
    function error(module, messageOrError, error) {
        var message = "";
        var stack = "";
        if (typeof messageOrError === "string") {
            message = messageOrError;
        }
        else {
            message = Exceptions.getMessage(messageOrError);
            stack = Exceptions.getStack(messageOrError);
        }
        if (error) {
            message += "\n" + Exceptions.getMessage(error);
            stack += (stack ? "\n" : "") + Exceptions.getStack(error);
        }
        innerLog(module, message, exports.LogTypes.Error, stack);
    }
    exports.error = error;
    function setDeviceDetails(isNative) {
        if (tracingEnabled && isNative) {
            getDeviceDetails();
            trace(LOGGER_MODULE_NAME, "Device details initialized");
        }
        else {
            trace(LOGGER_MODULE_NAME, "Device details not initialized: isNative = [".concat(isNative, "] tracingEnabled = [").concat(tracingEnabled, "]"));
        }
    }
    exports.setDeviceDetails = setDeviceDetails;
    function serializeObjectForLog(val, depth, replacer, space, onGetObjID) {
        if (depth === void 0) { depth = 3; }
        replacer = replacer || trimObject;
        depth = isNaN(+depth) ? 1 : depth;
        var recursMap = new WeakMap();
        function _build(val, depth, o, a, r) {
            return !val || typeof val !== "object"
                ? val
                : ((r = recursMap.has(val)),
                    recursMap.set(val, true),
                    (a = Array.isArray(val)),
                    r
                        ? (o = (onGetObjID && onGetObjID(val)) || null)
                        : JSON.stringify(val, function (k, v) {
                            if (a || depth > 0) {
                                if (replacer) {
                                    v = replacer(k, v);
                                }
                                if (!k) {
                                    return (a = Array.isArray(v)), (val = v);
                                }
                                o = o || (a ? [] : {});
                                o[k] = _build(v, a ? depth : depth - 1);
                            }
                        }),
                    o === void 0 ? (a ? [] : "(...)") : o);
        }
        return JSON.stringify(_build(val, depth), null, space);
    }
    exports.serializeObjectForLog = serializeObjectForLog;
    function trimObject(key, value) {
        var maxArrayElems = 10;
        var maxProps = 10;
        var maxStringLength = 25;
        if (key === "") {
            if (Array.isArray(value)) {
                var arrValue = value;
                if (arrValue.length >= maxArrayElems) {
                    arrValue = arrValue.slice(0, maxArrayElems - 1);
                    arrValue.push("(...)");
                }
                return arrValue;
            }
            var obj = cloneObjectWithPropLimit(value, maxProps);
            return obj;
        }
        else if (typeof value === "string") {
            var stringValue = value;
            return stringValue.length > maxStringLength
                ? stringValue.substring(0, maxStringLength - 6) + " (...)"
                : stringValue;
        }
        return value;
    }
    function cloneObjectWithPropLimit(object, maxProps) {
        var numProps = 0;
        var wasTrucated = false;
        var obj = Object.keys(object).reduce(function (result, key) {
            numProps++;
            if (numProps <= maxProps) {
                result[key] = object[key];
            }
            else {
                wasTrucated = true;
            }
            return result;
        }, {});
        if (wasTrucated) {
            obj["..."] = "(...)";
        }
        return obj;
    }
    function innerLog(userDefinedModuleName, message, logType, stack) {
        if (!logType || logType.trim() === "") {
            throw new Error("Logger: Error sending log. LogType must be defined.");
        }
        var now = new Date().toISOString();
        var moduleString = userDefinedModuleName ? userDefinedModuleName + " " : "";
        var serverMessage = "".concat(message).concat(deviceDetails);
        var consoleMessage = "".concat(moduleString, "[").concat(now, "]: ").concat(message, " ").concat(stack ? "\n" + stack : "");
        var logMessage = {
            instant: now,
            logType: logType,
            message: serverMessage,
            moduleName: userDefinedModuleName,
            stack: stack,
        };
        if (logType === exports.LogTypes.Error) {
            logMessage.extra = VersionDefinition.toObject();
            console.error(consoleMessage);
        }
        else {
            console.log(consoleMessage);
        }
        push(logMessage);
    }
    function getDeviceDetails() {
        if (!deviceDetails) {
            var clientInfo = (0, ClientInfo_1.getClientInfo)();
            if (clientInfo && clientInfo.device) {
                var device = clientInfo.device;
                deviceDetails = " [".concat(device.platform, "|").concat(device.version, "|").concat(device.manufacturer, "|").concat(device.model, "|").concat(device.uuid, "|").concat(device.cordova, "]");
            }
        }
        return deviceDetails;
    }
    initialize();
});
//# sourceMappingURL=Logger.js.map;
define('OutSystems/ClientRuntime/Injector',["require", "exports", "./Logger"], function (require, exports, Logger) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolve = exports.removeRegistrationListener = exports.addRegistrationListener = exports.unregister = exports.register = void 0;
    var INJECTOR_MODULE_NAME = "Injector";
    var registered = {};
    var registrationHandlers = {};
    function register(service, implementation) {
        try {
            Logger.trace(INJECTOR_MODULE_NAME, "Registering ".concat(service, " service"));
            var serviceImplementation_1 = implementation();
            registered[service] = serviceImplementation_1;
            if (service in registrationHandlers) {
                registrationHandlers[service].forEach(function (handler) { return handler(service, serviceImplementation_1); });
            }
            return true;
        }
        catch (error) {
            Logger.trace(INJECTOR_MODULE_NAME, "Failed to initialize ".concat(service, " service: ").concat(error));
            return false;
        }
    }
    exports.register = register;
    function unregister(service) {
        delete registered[service];
    }
    exports.unregister = unregister;
    function addRegistrationListener(service, handler) {
        if (service in registrationHandlers) {
            registrationHandlers[service].push(handler);
        }
        else {
            registrationHandlers[service] = [handler];
        }
    }
    exports.addRegistrationListener = addRegistrationListener;
    function removeRegistrationListener(service, handler) {
        if (service in registrationHandlers) {
            registrationHandlers[service] = registrationHandlers[service].filter(function (h) { return h !== handler; });
        }
    }
    exports.removeRegistrationListener = removeRegistrationListener;
    function resolve(service) {
        return registered[service];
    }
    exports.resolve = resolve;
    var injectorImpl = {
        register: register,
        unregister: unregister,
        resolve: resolve,
        addRegistrationListener: addRegistrationListener,
        removeRegistrationListener: removeRegistrationListener,
    };
    exports.default = injectorImpl;
});
//# sourceMappingURL=Injector.js.map;
define('OutSystems/ClientRuntime/Injector/KnownServices',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServiceNames = void 0;
    var ServiceNames;
    (function (ServiceNames) {
        ServiceNames["DeviceHelperClassProvider"] = "DeviceHelperClassProvider";
        ServiceNames["ClientVariablesService"] = "ClientVariablesService";
        ServiceNames["TranslationsService"] = "TranslationsService";
        ServiceNames["LocaleService"] = "LocaleService";
        ServiceNames["EntityService"] = "EntityService";
        ServiceNames["GlobalExceptionHandler"] = "GlobalExceptionHandler";
    })(ServiceNames || (exports.ServiceNames = ServiceNames = {}));
});
//# sourceMappingURL=KnownServices.js.map;
define('OutSystems/ClientRuntime/modules/Common/RequestUtils',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatDataToBeSent = void 0;
    var MAX_SIZE_BYTES = 100 * 1024 * 1024;
    function formatDataToBeSent(data, maxSize) {
        if (maxSize === void 0) { maxSize = MAX_SIZE_BYTES; }
        if ((data === null || data === void 0 ? void 0 : data.length) >= maxSize) {
            return new Blob([data], {
                type: "text/plain",
            });
        }
        else {
            return data;
        }
    }
    exports.formatDataToBeSent = formatDataToBeSent;
});
//# sourceMappingURL=RequestUtils.js.map;
define('OutSystems/ClientRuntime/modules/Native/IOutSystemsNativeHost',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isIOutSystemsNativeHost = void 0;
    function isIOutSystemsNativeHost(obj) {
        return !!(obj === null || obj === void 0 ? void 0 : obj.OutSystemsNative);
    }
    exports.isIOutSystemsNativeHost = isIOutSystemsNativeHost;
});
//# sourceMappingURL=IOutSystemsNativeHost.js.map;
define('OutSystems/ClientRuntime/modules/Common/BrowserUtils',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSafari = exports.windowInsideIframe = void 0;
    function windowInsideIframe(win) {
        try {
            return win && win.self !== win.top;
        }
        catch (e) {
            return true;
        }
    }
    exports.windowInsideIframe = windowInsideIframe;
    function isSafari(userAgent) {
        return /^((?!chrome|android).)*safari/i.test(userAgent);
    }
    exports.isSafari = isSafari;
});
//# sourceMappingURL=BrowserUtils.js.map;
define('OutSystems/ClientRuntime/NativeHelper',["require", "exports", "./Flow", "./Logger", "./modules/Common/BrowserUtils"], function (require, exports, Flow, Logger, BrowserUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addNativeEventListener = exports.exitApp = exports.ensureNativeReady = exports.whenDeviceReady = exports.isIOS = exports.isAndroid = exports.isRunningOnNative = void 0;
    var SupportedPlatforms = {
        Android: "Android",
        iOS: "iOS",
    };
    function trace(message) {
        Logger.trace("NativeHelper", message);
    }
    function isRunningOnNative() {
        var isNative = typeof navigator !== "undefined" && /OutSystemsApp/i.test(navigator.userAgent);
        var isInsideIframe = (0, BrowserUtils_1.windowInsideIframe)(typeof window !== "undefined" ? window : null);
        trace("Running on ".concat(isNative ? "native shell" : "browser").concat(isInsideIframe ? " inside an iframe" : ""));
        return !isInsideIframe && isNative;
    }
    exports.isRunningOnNative = isRunningOnNative;
    function isAndroid() {
        return isRunningOnPlatform(SupportedPlatforms.Android);
    }
    exports.isAndroid = isAndroid;
    function isIOS() {
        return isRunningOnPlatform(SupportedPlatforms.iOS);
    }
    exports.isIOS = isIOS;
    function isRunningOnPlatform(platform) {
        return isRunningOnNative() && window.device.platform === platform;
    }
    exports.whenDeviceReady = Flow.promise(function (resolve, reject) {
        if (!addEventListener("deviceready", function () { return resolve(); })) {
            resolve();
        }
    });
    var nativeReadyPromise = null;
    function ensureNativeReady() {
        if (!nativeReadyPromise) {
            nativeReadyPromise = Flow.promise(function (resolve, reject) {
                trace("Waiting for 'deviceready' event");
                if (isRunningOnNative()) {
                    if (window.cordova === undefined) {
                        reject("Running on native but cordova wasn't loaded");
                    }
                    else {
                        resolve(exports.whenDeviceReady);
                    }
                }
                else {
                    trace("'deviceready' event wait ignored");
                    resolve();
                }
            });
        }
        return nativeReadyPromise;
    }
    exports.ensureNativeReady = ensureNativeReady;
    function exitApp() {
        if (isAndroid()) {
            navigator.app.exitApp();
            return true;
        }
        else {
            return false;
        }
    }
    exports.exitApp = exitApp;
    function addNativeEventListener(event, listener) {
        ensureNativeReady().then(function () { return addEventListener(event, listener); });
    }
    exports.addNativeEventListener = addNativeEventListener;
    function addEventListener(event, listener) {
        if (typeof document !== "undefined" && document.addEventListener) {
            document.addEventListener(event, listener);
            return true;
        }
        return false;
    }
});
//# sourceMappingURL=NativeHelper.js.map;
define('OutSystems/ClientRuntime/NativeHttp',["require", "exports", "tslib", "./modules/Native/IOutSystemsNativeHost", "./NativeHelper", "./Settings"], function (require, exports, tslib_1, IOutSystemsNativeHost_1, NativeHelper, Settings) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createNativeHttpRequest = exports.isNativeHttpPluginAvailable = exports.getNativeHttpPlugin = void 0;
    function getNativeHttpPlugin() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, NativeHelper.ensureNativeReady()];
                    case 1:
                        _a.sent();
                        if ((0, IOutSystemsNativeHost_1.isIOutSystemsNativeHost)(window)) {
                            return [2, window.OutSystemsNative.Http];
                        }
                        else {
                            return [2, null];
                        }
                        return [3, 3];
                    case 2:
                        e_1 = _a.sent();
                        return [2, null];
                    case 3: return [2];
                }
            });
        });
    }
    exports.getNativeHttpPlugin = getNativeHttpPlugin;
    function isNativeHttpPluginAvailable() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var nativeHttp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, getNativeHttpPlugin()];
                    case 1:
                        nativeHttp = _a.sent();
                        return [2, !Settings.getEnvParams().ForceXhrCommunication && !!nativeHttp];
                }
            });
        });
    }
    exports.isNativeHttpPluginAvailable = isNativeHttpPluginAvailable;
    function createNativeHttpRequest(method, url) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var nativeHttp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, getNativeHttpPlugin()];
                    case 1:
                        nativeHttp = _a.sent();
                        return [2, new NativeRequestHandler(nativeHttp, method, url)];
                }
            });
        });
    }
    exports.createNativeHttpRequest = createNativeHttpRequest;
    var NativeHttpResponse = (function () {
        function NativeHttpResponse(requestHandler, nativeHttp) {
            this.requestHandler = requestHandler;
            this.nativeHttp = nativeHttp;
        }
        Object.defineProperty(NativeHttpResponse.prototype, "complete", {
            get: function () {
                return this.requestHandler.isDone();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NativeHttpResponse.prototype, "responseUrl", {
            get: function () {
                return this.nativeHttp.responseUrl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NativeHttpResponse.prototype, "statusCode", {
            get: function () {
                return this.nativeHttp.status;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NativeHttpResponse.prototype, "statusText", {
            get: function () {
                return this.nativeHttp.statusText;
            },
            enumerable: false,
            configurable: true
        });
        NativeHttpResponse.prototype.getHeader = function (name) {
            name = name || "";
            return this.nativeHttp.responseHeaders[name.toLowerCase()];
        };
        Object.defineProperty(NativeHttpResponse.prototype, "headers", {
            get: function () {
                return this.nativeHttp.responseHeaders;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NativeHttpResponse.prototype, "responseText", {
            get: function () {
                return this.nativeHttp.responseText;
            },
            enumerable: false,
            configurable: true
        });
        return NativeHttpResponse;
    }());
    var NativeRequestHandler = (function () {
        function NativeRequestHandler(nativeHttp, method, url) {
            this.nativeRequest = nativeHttp.createRequest(method, url);
            this._url = url;
        }
        Object.defineProperty(NativeRequestHandler.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        NativeRequestHandler.prototype.createRequestCallback = function (callback) {
            var _this = this;
            return function (_) {
                var response = new NativeHttpResponse(_this, _this.nativeRequest);
                callback(response);
            };
        };
        NativeRequestHandler.prototype.setTimeout = function (value) {
            this.nativeRequest.setTimeout(value);
        };
        NativeRequestHandler.prototype.setBody = function (body) {
            this.nativeRequest.setBody(body);
        };
        NativeRequestHandler.prototype.setHeader = function (name, value) {
            this.nativeRequest.setHeader(name, value);
        };
        NativeRequestHandler.prototype.isDone = function () {
            return this.nativeRequest.readyState === 4;
        };
        NativeRequestHandler.prototype.send = function () {
            if (!!this.onSuccess) {
                this.nativeRequest.onSuccess = this.createRequestCallback(this.onSuccess);
            }
            if (!!this.onError) {
                this.nativeRequest.onError = this.createRequestCallback(this.onError);
            }
            if (!!this.onTimeout) {
                this.nativeRequest.onTimeout = this.createRequestCallback(this.onTimeout);
            }
            if (!!this.onAbort) {
                this.nativeRequest.onAbort = this.createRequestCallback(this.onAbort);
            }
            if (!!this.onFinish) {
                this.nativeRequest.onFinish = this.createRequestCallback(this.onFinish);
            }
            this.nativeRequest.send();
        };
        NativeRequestHandler.prototype.abort = function () {
            this.nativeRequest.abort();
        };
        return NativeRequestHandler;
    }());
});
//# sourceMappingURL=NativeHttp.js.map;
define('OutSystems/ClientRuntime/Request',["require", "exports", "tslib", "./modules/Common/RequestUtils", "./NativeHttp"], function (require, exports, tslib_1, RequestUtils, NativeHttp) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createHttpRequest = void 0;
    var RequestReadyStates = {
        Unsent: 0,
        Opened: 1,
        HeadersReceived: 2,
        Loading: 3,
        Done: 4,
    };
    var MULTIPLE_NEWLINE_RX = /[\r\n]+/;
    var DEFAULT_BASE_PATH = "/";
    var XmlHttpResponse = (function () {
        function XmlHttpResponse(request, xhr) {
            this.request = request;
            this.xhr = xhr;
        }
        Object.defineProperty(XmlHttpResponse.prototype, "complete", {
            get: function () {
                return this.request.isDone();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(XmlHttpResponse.prototype, "responseUrl", {
            get: function () {
                return this.xhr.responseURL;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(XmlHttpResponse.prototype, "statusCode", {
            get: function () {
                return this.xhr.status;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(XmlHttpResponse.prototype, "statusText", {
            get: function () {
                return this.xhr.statusText;
            },
            enumerable: false,
            configurable: true
        });
        XmlHttpResponse.prototype.getHeader = function (name) {
            return this.xhr.getResponseHeader(name);
        };
        Object.defineProperty(XmlHttpResponse.prototype, "headers", {
            get: function () {
                var headerMap = {};
                var allHeaders = this.xhr.getAllResponseHeaders() || "";
                return allHeaders.split(MULTIPLE_NEWLINE_RX).reduce(function (headerAggregator, header) {
                    var separatorIndex = header.indexOf(":");
                    var key = header.substr(0, separatorIndex);
                    var value = header.substr(separatorIndex + 1).trim();
                    headerAggregator[key] = value;
                    return headerAggregator;
                }, headerMap);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(XmlHttpResponse.prototype, "responseText", {
            get: function () {
                return this.xhr.responseText;
            },
            enumerable: false,
            configurable: true
        });
        return XmlHttpResponse;
    }());
    var XmlHttpRequestHandler = (function () {
        function XmlHttpRequestHandler(method, url) {
            this.xhr = new XMLHttpRequest();
            this.xhr.open(method, url, true);
            this._url = url;
        }
        Object.defineProperty(XmlHttpRequestHandler.prototype, "url", {
            get: function () {
                return this._url;
            },
            enumerable: false,
            configurable: true
        });
        XmlHttpRequestHandler.prototype.createRequestCallback = function (callback) {
            var _this = this;
            return function (_) {
                var response = new XmlHttpResponse(_this, _this.xhr);
                callback(response);
            };
        };
        XmlHttpRequestHandler.prototype.setTimeout = function (value) {
            this.xhr.timeout = value;
        };
        XmlHttpRequestHandler.prototype.setBody = function (body) {
            this.body = body;
        };
        XmlHttpRequestHandler.prototype.setHeader = function (name, value) {
            this.xhr.setRequestHeader(name, value);
        };
        XmlHttpRequestHandler.prototype.isDone = function () {
            return this.xhr.readyState === RequestReadyStates.Done;
        };
        XmlHttpRequestHandler.prototype.send = function () {
            if (!!this.onSuccess) {
                this.xhr.onload = this.createRequestCallback(this.onSuccess);
            }
            if (!!this.onError) {
                this.xhr.onerror = this.createRequestCallback(this.onError);
            }
            if (!!this.onTimeout) {
                this.xhr.ontimeout = this.createRequestCallback(this.onTimeout);
            }
            if (!!this.onAbort) {
                this.xhr.onabort = this.createRequestCallback(this.onAbort);
            }
            if (!!this.onFinish) {
                this.xhr.onloadend = this.createRequestCallback(this.onFinish);
            }
            this.xhr.send(RequestUtils.formatDataToBeSent(this.body));
        };
        XmlHttpRequestHandler.prototype.abort = function () {
            this.xhr.abort();
        };
        return XmlHttpRequestHandler;
    }());
    function createHttpRequest(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function (_b) {
            var isNativeHttpPluginAvailable, requestUrl;
            var method = _b.method, url = _b.url, _c = _b.basePath, basePath = _c === void 0 ? DEFAULT_BASE_PATH : _c, _d = _b.nativeHttpPluginAvailable, nativeHttpPluginAvailable = _d === void 0 ? NativeHttp.isNativeHttpPluginAvailable : _d, _e = _b.createNativeHttpRequest, createNativeHttpRequest = _e === void 0 ? NativeHttp.createNativeHttpRequest : _e;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0: return [4, nativeHttpPluginAvailable()];
                    case 1:
                        isNativeHttpPluginAvailable = _f.sent();
                        requestUrl = "/".concat(basePath, "/").concat(url).replace(new RegExp("/(/)+", "gm"), "/");
                        if (!isNativeHttpPluginAvailable) return [3, 3];
                        return [4, createNativeHttpRequest(method, requestUrl)];
                    case 2: return [2, _f.sent()];
                    case 3: return [2, new XmlHttpRequestHandler(method, requestUrl)];
                }
            });
        });
    }
    exports.createHttpRequest = createHttpRequest;
});
//# sourceMappingURL=Request.js.map;
define('OutSystems/ClientRuntime/Communication',["require", "exports", "tslib", "./ApplicationInfo", "./ClientInfo", "./CookiesManager", "./Exceptions", "./Flow", "./Injector", "./Injector/KnownServices", "./Logger", "./Request"], function (require, exports, tslib_1, ApplicationInfo, ClientInfo_1, CookiesManager, Exceptions, Flow, Injector, KnownServices_1, Logger, Request) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRoles = exports.initialize = exports.postLog = exports.post = exports.get = exports.NetworkStatus = exports.LocaleInfo = exports.CSRF = exports.ROLES_REQUEST_ENDPOINT = exports.COMMUNICATION_MODULE_NAME = void 0;
    exports.COMMUNICATION_MODULE_NAME = "Communication";
    var LOG_POST_TIMEOUT = 10000;
    var CUSTOM_HEADER_PREFIX = "OutSystems-";
    var CUSTOM_HEADER_PREFIX_RX_CI = new RegExp("^" + CUSTOM_HEADER_PREFIX, "i");
    exports.ROLES_REQUEST_ENDPOINT = "moduleservices/roles";
    var ROLES_REQUEST_TIMEOUT = 10000;
    var timeoutsDisabledWhenDebugging = false;
    var userCookieName;
    var onNewVersion;
    var CSRF;
    (function (CSRF) {
        CSRF.CSRFHeader = "X-CSRFToken";
        CSRF.AnonymousCSRFToken = "T6C+9iB49TLra4jEsMeSckDMNhQ=";
        function getCSRFToken() {
            var cookieValue = CookiesManager.readCookie(userCookieName);
            if (cookieValue === null) {
                Logger.trace(exports.COMMUNICATION_MODULE_NAME, "User cookie " + userCookieName + " not found. Request CSRF header set to " + CSRF.AnonymousCSRFToken);
                return CSRF.AnonymousCSRFToken;
            }
            var csfTokenRegex = /crf=([^;]+)/;
            var match = cookieValue.match(csfTokenRegex);
            if (match === null) {
                Logger.trace(exports.COMMUNICATION_MODULE_NAME, "User cookie " + userCookieName + " found with value: " + cookieValue + ". But no 'crf' key found");
                throw new Error("Cookie format error: no 'crf' key found");
            }
            return match[1];
        }
        CSRF.getCSRFToken = getCSRFToken;
    })(CSRF || (exports.CSRF = CSRF = {}));
    var LocaleInfo;
    (function (LocaleInfo) {
        LocaleInfo.LocaleHeader = CUSTOM_HEADER_PREFIX + "locale";
        function getLocaleValue() {
            var localeService = Injector.resolve(KnownServices_1.ServiceNames.LocaleService);
            if (localeService) {
                return localeService.getCurrentLocale();
            }
        }
        LocaleInfo.getLocaleValue = getLocaleValue;
        function setLocaleValue(locale) {
            var localeService = Injector.resolve(KnownServices_1.ServiceNames.LocaleService);
            if (localeService) {
                localeService.setCurrentLocale(locale);
            }
        }
        LocaleInfo.setLocaleValue = setLocaleValue;
    })(LocaleInfo || (exports.LocaleInfo = LocaleInfo = {}));
    var NetworkStatusModule;
    (function (NetworkStatusModule) {
        function isOnline() {
            var globalObj = typeof window !== "undefined" ? window : global;
            var isNetworkPluginAvailable = globalObj && globalObj.cordova && globalObj.navigator && globalObj.navigator.connection;
            if (isNetworkPluginAvailable) {
                return globalObj.navigator.connection.type !== "none";
            }
            else {
                return globalObj.navigator.onLine;
            }
        }
        NetworkStatusModule.isOnline = isOnline;
        function onOnline(callback) {
            if (typeof document !== "undefined" && document.addEventListener) {
                document.addEventListener("online", callback, false);
            }
        }
        NetworkStatusModule.onOnline = onOnline;
        function onOffline(callback) {
            if (typeof document !== "undefined" && document.addEventListener) {
                document.addEventListener("offline", callback, false);
            }
        }
        NetworkStatusModule.onOffline = onOffline;
        function ping(timeout, getBasePath) {
            if (getBasePath === void 0) { getBasePath = ApplicationInfo.getBasePath; }
            var url = "moduleservices/ping";
            return get(url, timeout, true, false, false, getBasePath());
        }
        NetworkStatusModule.ping = ping;
    })(NetworkStatusModule || (NetworkStatusModule = {}));
    exports.NetworkStatus = NetworkStatusModule;
    function getRandomInt() {
        var min = 0;
        var max = 9007199254740991;
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    function onNewModuleVersion(currentViewHasChanged, isAutoUpgradeDisabled) {
        if (onNewVersion) {
            onNewVersion(currentViewHasChanged, isAutoUpgradeDisabled);
        }
    }
    function createHttpRequest(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function (_b) {
            var request, locale;
            var _c = _b.method, method = _c === void 0 ? "POST" : _c, url = _b.url, basePath = _b.basePath, _d = _b.useLocaleInfo, useLocaleInfo = _d === void 0 ? false : _d;
            return tslib_1.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4, Request.createHttpRequest({ method: method, url: url, basePath: basePath })];
                    case 1:
                        request = _e.sent();
                        if (useLocaleInfo) {
                            locale = LocaleInfo.getLocaleValue();
                            if (locale) {
                                request.setHeader(LocaleInfo.LocaleHeader, locale);
                            }
                        }
                        request.setHeader(CSRF.CSRFHeader, CSRF.getCSRFToken());
                        request.setHeader("Content-Type", "application/json; charset=UTF-8");
                        request.setHeader("Accept", "application/json");
                        return [2, request];
                }
            });
        });
    }
    function checkRequestSuspendedByDebugger(requestToken, basePath) {
        return Flow.promise(function (resolve, reject) {
            var url = "/moduleservices/checkrequestsuspended?requestToken=".concat(requestToken);
            createHttpRequest({ method: "GET", url: url, basePath: basePath })
                .then(function (request) {
                var handleError = function () { return resolve(false); };
                request.onSuccess = function (response) {
                    if (response.statusCode === 200) {
                        resolve(JSON.parse(response.responseText));
                    }
                    else {
                        handleError();
                    }
                };
                request.onTimeout = handleError;
                request.onError = handleError;
                request.onAbort = handleError;
                request.setTimeout(10 * 1000);
                request.send();
            })
                .catch(reject);
        });
    }
    function sendWithTimeout(request, data, basePath, timeout, disableTimeoutWhenDebugging) {
        if (timeout) {
            if (disableTimeoutWhenDebugging) {
                var requestToken_1 = getRandomInt().toString();
                var timeoutHandle_1 = setTimeout(function () {
                    if (!request.isDone()) {
                        checkRequestSuspendedByDebugger(requestToken_1, basePath).then(function (isSuspended) {
                            if (!isSuspended) {
                                request.abort();
                                request.onTimeout(null);
                            }
                        });
                    }
                }, timeout * 1000);
                request.onFinish = function () {
                    clearTimeout(timeoutHandle_1);
                };
                request.setHeader(CUSTOM_HEADER_PREFIX + "Request-Token", requestToken_1);
            }
            else {
                request.setTimeout(timeout * 1000);
            }
        }
        request.setBody(data);
        request.send();
    }
    function getCommunicationErrorMessage(url, status, aborted) {
        if (aborted === void 0) { aborted = false; }
        var reason = aborted ? " (request aborted)" : "";
        return "Unable to access '".concat(url, "'").concat(reason, ". Error Code: ").concat(status);
    }
    function get(url, timeout, checkOffline, parseResponse, useInvalidationSuffix, basePath) {
        if (timeout === void 0) { timeout = undefined; }
        if (checkOffline === void 0) { checkOffline = false; }
        if (parseResponse === void 0) { parseResponse = true; }
        if (useInvalidationSuffix === void 0) { useInvalidationSuffix = true; }
        return new Promise(function (resolve, reject) {
            if (checkOffline && typeof navigator !== "undefined" && !navigator.onLine) {
                return reject("Unable to access '".concat(url, "' - There's no network connection."));
            }
            var cacheInvalidationSuffix = useInvalidationSuffix ? "" : "?" + new Date().getTime();
            var urlWithCacheSuffix = "".concat(url).concat(cacheInvalidationSuffix);
            Request.createHttpRequest({ method: "GET", url: urlWithCacheSuffix, basePath: basePath })
                .then(function (request) {
                request.onSuccess = function (response) {
                    if (!response.complete || response.statusCode !== 200) {
                        return reject(getCommunicationErrorMessage(url, response.statusCode));
                    }
                    var parsedResponse;
                    if (parseResponse) {
                        try {
                            parsedResponse = JSON.parse(response.responseText.substring(response.responseText.indexOf("{"), response.responseText.length));
                        }
                        catch (e) {
                            return reject(e);
                        }
                        if (!parsedResponse) {
                            return reject(Error("Unable to parse payload downloaded from '".concat(url, "'.")));
                        }
                    }
                    resolve(parsedResponse);
                };
                request.onError = request.onTimeout = function (response) {
                    return reject(Error(getCommunicationErrorMessage(url, response.statusCode)));
                };
                request.onAbort = function (response) {
                    return reject(Error(getCommunicationErrorMessage(url, response.statusCode, true)));
                };
                if (timeout) {
                    request.setTimeout(timeout);
                }
                request.setHeader("Accept", "application/json");
                setDeviceInfoHeaders(request);
                request.send();
            })
                .catch(reject);
        });
    }
    exports.get = get;
    function post(url, payload, basePath, timeout, onTimeout, onResponseParsed, validateOutOfOrder, instanceId, headers, useLocaleInfo) {
        if (timeout === void 0) { timeout = undefined; }
        if (validateOutOfOrder === void 0) { validateOutOfOrder = false; }
        if (instanceId === void 0) { instanceId = 0; }
        if (useLocaleInfo === void 0) { useLocaleInfo = false; }
        return Flow.promise(function (resolve, reject) {
            var trackingUrl = url + instanceId;
            var reqId = validateOutOfOrder ? RequestSequenceTracker.startTracking(trackingUrl) : -1;
            var prevLocale = useLocaleInfo ? LocaleInfo.getLocaleValue() : undefined;
            createHttpRequest({ method: "POST", url: url, basePath: basePath, useLocaleInfo: useLocaleInfo })
                .then(function (request) {
                request.onSuccess = function (response) {
                    if (validateOutOfOrder) {
                        try {
                            var requestInfo = RequestSequenceTracker.getRequestInfo(reqId, trackingUrl);
                            if (requestInfo.isOutOfOrder) {
                                return reject(new Exceptions.Exceptions.OutOfOrderException("Response out of endpoint order: Endpoint= ".concat(url, " Last= ").concat(requestInfo.lastRequestId, " Got= ").concat(reqId)));
                            }
                        }
                        finally {
                            RequestSequenceTracker.stopTracking(trackingUrl);
                        }
                    }
                    var endpointOk = response.statusCode === 200;
                    var endpointOfflineOrLicenseProblem = response.statusCode === 503 && response.getHeader("Content-Type") === "application/json";
                    if (!endpointOk && !endpointOfflineOrLicenseProblem) {
                        if (response.statusCode === 404) {
                            onNewModuleVersion(true);
                            reject(new Exceptions.Exceptions.ViewHasChangedException());
                        }
                        else {
                            reject(new Exceptions.Exceptions.CommunicationException("Request failed with status " + response.statusCode));
                        }
                        return;
                    }
                    try {
                        if (useLocaleInfo) {
                            var locale = response.getHeader(LocaleInfo.LocaleHeader);
                            if (locale && prevLocale && locale !== prevLocale) {
                                LocaleInfo.setLocaleValue(locale);
                            }
                        }
                        var json = void 0;
                        try {
                            json = JSON.parse(response.responseText);
                        }
                        catch (ex) {
                            return reject(new Exceptions.Exceptions.CommunicationException("Invalid server response from ".concat(request.url, ": ").concat(ex.message), ex.stack));
                        }
                        if (!endpointOfflineOrLicenseProblem) {
                            if (!!json.versionInfo) {
                                if (json.versionInfo.hasModuleVersionChanged) {
                                    if (json.versionInfo.hasApiVersionChanged) {
                                        onNewModuleVersion(true, json.versionInfo.isAutoUpgradeDisabled);
                                        reject(new Exceptions.Exceptions.ViewHasChangedException());
                                        return;
                                    }
                                    else {
                                        onNewModuleVersion(false, json.versionInfo.isAutoUpgradeDisabled);
                                    }
                                }
                            }
                            if (!!onResponseParsed) {
                                var responseHeaders = getResponseCustomHeaders(response);
                                onResponseParsed(json, responseHeaders, { url: url });
                            }
                        }
                        if (!!json.exception) {
                            reject(Exceptions.getException(json.exception));
                        }
                        else {
                            resolve(json.data);
                        }
                    }
                    catch (e) {
                        reject(e);
                    }
                };
                request.onError = function () {
                    reject(new Exceptions.Exceptions.CommunicationException("Request failed with an error"));
                };
                if (timeout !== undefined) {
                    request.onTimeout = function () {
                        if (!!onTimeout) {
                            onTimeout();
                        }
                        reject(new Exceptions.Exceptions.CommunicationException("The connection has timed out"));
                    };
                }
                setRequestCustomHeaders(request, headers);
                setDeviceInfoHeaders(request);
                sendWithTimeout(request, JSON.stringify(payload), basePath, timeout, timeoutsDisabledWhenDebugging);
            })
                .catch(reject);
        });
    }
    exports.post = post;
    function postLog(logMessages, getBasePath) {
        if (getBasePath === void 0) { getBasePath = ApplicationInfo.getBasePath; }
        return Flow.promise(function (resolve, reject) {
            var url = "moduleservices/log";
            var cacheInvalidationSuffix = new Date().getTime();
            var urlWithCacheSuffix = "".concat(url, "?clientTimeInMillis=").concat(cacheInvalidationSuffix);
            createHttpRequest({ method: "POST", url: urlWithCacheSuffix, basePath: getBasePath() })
                .then(function (request) {
                request.onSuccess = function (response) {
                    if (response.statusCode === 200) {
                        resolve();
                    }
                    else {
                        reject(new Exceptions.Exceptions.CommunicationException("Logger: Error sending log to ".concat(url, ". Error Code: ").concat(response.statusCode)));
                    }
                };
                request.onError = function (response) {
                    reject(new Exceptions.Exceptions.CommunicationException("Logger: Error sending log to ".concat(url, ". Error Code: ").concat(response.statusCode)));
                };
                request.onAbort = function (response) {
                    reject(new Exceptions.Exceptions.CommunicationException("Logger: Error sending log to ".concat(url, " (Aborted). Error Code: ").concat(response.statusCode)));
                };
                request.onTimeout = function (_) {
                    reject(new Exceptions.Exceptions.CommunicationException("Logger: Error sending log to ".concat(url, " (Timeout).")));
                };
                request.setTimeout(LOG_POST_TIMEOUT);
                setDeviceInfoHeaders(request);
                request.setBody(JSON.stringify(logMessages));
                request.send();
            })
                .catch(reject);
        });
    }
    exports.postLog = postLog;
    function setDeviceInfoHeaders(request) {
        var clientInfo = (0, ClientInfo_1.getClientInfo)();
        if (clientInfo && clientInfo.device && clientInfo.device.uuid) {
            request.setHeader(CUSTOM_HEADER_PREFIX + "device-uuid", clientInfo.device.uuid);
        }
    }
    function setRequestCustomHeaders(request, headers) {
        if (request && headers) {
            for (var header in headers) {
                if (headers.hasOwnProperty(header)) {
                    request.setHeader(CUSTOM_HEADER_PREFIX + header, headers[header]);
                }
            }
        }
    }
    function getResponseCustomHeaders(response) {
        var headerMap = {};
        if (!response) {
            return headerMap;
        }
        var allHeaders = response.headers || {};
        return Object.keys(allHeaders)
            .filter(function (headerKey) { return !!headerKey.match(CUSTOM_HEADER_PREFIX_RX_CI); })
            .reduce(function (headerAggregator, headerKey) {
            var slicedKey = headerKey.substr(CUSTOM_HEADER_PREFIX.length);
            var value = allHeaders[headerKey];
            headerAggregator[slicedKey] = value;
            return headerAggregator;
        }, headerMap);
    }
    var RequestSequenceTracker;
    (function (RequestSequenceTracker) {
        var rid = 0;
        var perEndpointId = {};
        function startTracking(url) {
            rid++;
            var pendingRequestInfo = perEndpointId[url];
            if (!pendingRequestInfo) {
                perEndpointId[url] = {
                    requestId: rid,
                    counter: 1,
                };
            }
            else {
                pendingRequestInfo.requestId = rid;
                pendingRequestInfo.counter++;
            }
            return rid;
        }
        RequestSequenceTracker.startTracking = startTracking;
        function stopTracking(url) {
            var pendingRequestInfo = perEndpointId[url];
            if (!pendingRequestInfo) {
                throw new Error("There's no requestInfo for url : " + url);
            }
            pendingRequestInfo.counter--;
            if (pendingRequestInfo.counter <= 0) {
                delete perEndpointId[url];
            }
        }
        RequestSequenceTracker.stopTracking = stopTracking;
        function getRequestInfo(requestId, url) {
            var pendingRequestInfo = perEndpointId[url];
            if (!pendingRequestInfo) {
                throw new Error("There's no requestInfo for url : " + url);
            }
            var lastEndpointId = pendingRequestInfo.requestId;
            return {
                isOutOfOrder: lastEndpointId > requestId,
                lastRequestId: lastEndpointId,
            };
        }
        RequestSequenceTracker.getRequestInfo = getRequestInfo;
    })(RequestSequenceTracker || (RequestSequenceTracker = {}));
    function initialize(debugEnabled, cookieName, onNewVersionAfterAppReady) {
        timeoutsDisabledWhenDebugging = debugEnabled;
        if (cookieName) {
            userCookieName = cookieName;
        }
        if (onNewVersionAfterAppReady) {
            onNewVersion = onNewVersionAfterAppReady;
        }
    }
    exports.initialize = initialize;
    function getRoles() {
        return tslib_1.__awaiter(this, arguments, void 0, function (getBasePath) {
            var _this = this;
            if (getBasePath === void 0) { getBasePath = ApplicationInfo.getBasePath; }
            return tslib_1.__generator(this, function (_a) {
                return [2, new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var url_1, cacheInvalidationSuffix, urlWithCacheSuffix, request, ex_1;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    url_1 = exports.ROLES_REQUEST_ENDPOINT;
                                    cacheInvalidationSuffix = new Date().getTime();
                                    urlWithCacheSuffix = "".concat(url_1, "?").concat(cacheInvalidationSuffix);
                                    return [4, createHttpRequest({
                                            method: "GET",
                                            url: urlWithCacheSuffix,
                                            basePath: getBasePath(),
                                        })];
                                case 1:
                                    request = _a.sent();
                                    request.onSuccess = function (response) {
                                        if (response.statusCode === 200) {
                                            try {
                                                resolve(JSON.parse(response.responseText).rolesInfo);
                                            }
                                            catch (ex) {
                                                reject(ex);
                                            }
                                        }
                                        else {
                                            reject(new Exceptions.Exceptions.CommunicationException(createGetRolesErrorMessage(url_1, { errorCode: response.statusCode })));
                                        }
                                    };
                                    request.onError = function (response) {
                                        reject(new Exceptions.Exceptions.CommunicationException(createGetRolesErrorMessage(url_1, { errorCode: response.statusCode })));
                                    };
                                    request.onAbort = function (response) {
                                        reject(new Exceptions.Exceptions.CommunicationException(createGetRolesErrorMessage(url_1, { detail: "Aborted", errorCode: response.statusCode })));
                                    };
                                    request.onTimeout = function (_) {
                                        reject(new Exceptions.Exceptions.CommunicationException(createGetRolesErrorMessage(url_1, { detail: "Timeout" })));
                                    };
                                    request.setTimeout(ROLES_REQUEST_TIMEOUT);
                                    setDeviceInfoHeaders(request);
                                    request.send();
                                    return [3, 3];
                                case 2:
                                    ex_1 = _a.sent();
                                    reject(ex_1);
                                    return [3, 3];
                                case 3: return [2];
                            }
                        });
                    }); })];
            });
        });
    }
    exports.getRoles = getRoles;
    function createGetRolesErrorMessage(url, _a) {
        var detail = _a.detail, errorCode = _a.errorCode;
        var msgDetail = !!detail ? " (".concat(detail, ")") : "";
        var msgErrorCode = !!errorCode ? " Error Code: ".concat(errorCode) : "";
        return "Error getting user roles from ".concat(url).concat(msgDetail, ".").concat(msgErrorCode);
    }
});
//# sourceMappingURL=Communication.js.map;
define('OutSystems/ClientRuntime/modules/Database/AutoNumber',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var AutoNumber;
    (function (AutoNumber) {
        AutoNumber[AutoNumber["No"] = 0] = "No";
        AutoNumber[AutoNumber["Yes"] = 1] = "Yes";
        AutoNumber[AutoNumber["YesIfEmpty"] = 2] = "YesIfEmpty";
    })(AutoNumber || (AutoNumber = {}));
    exports.default = AutoNumber;
});
//# sourceMappingURL=AutoNumber.js.map;
define('OutSystems/ClientRuntime/modules/Database/DBDataType',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DBDataType;
    (function (DBDataType) {
        DBDataType[DBDataType["TEXT"] = 0] = "TEXT";
        DBDataType[DBDataType["BINARY_DATA"] = 1] = "BINARY_DATA";
        DBDataType[DBDataType["BOOLEAN"] = 2] = "BOOLEAN";
        DBDataType[DBDataType["INTEGER"] = 3] = "INTEGER";
        DBDataType[DBDataType["LONGINTEGER"] = 4] = "LONGINTEGER";
        DBDataType[DBDataType["DECIMAL"] = 5] = "DECIMAL";
        DBDataType[DBDataType["DATE_TIME"] = 6] = "DATE_TIME";
        DBDataType[DBDataType["DATE"] = 7] = "DATE";
        DBDataType[DBDataType["TIME"] = 8] = "TIME";
        DBDataType[DBDataType["UNKNOWN"] = 9] = "UNKNOWN";
    })(DBDataType || (DBDataType = {}));
    exports.default = DBDataType;
});
//# sourceMappingURL=DBDataType.js.map;
define('OutSystems/ClientRuntime/Interfaces',["require", "exports", "./modules/Database/AutoNumber", "./modules/Database/DBDataType"], function (require, exports, AutoNumber_1, DBDataType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NativeHttp = exports.FeedbackMessage = exports.Model = exports.ClientDB = exports.Application = void 0;
    var Application;
    (function (Application) {
        var InitializationType;
        (function (InitializationType) {
            InitializationType[InitializationType["Full"] = 0] = "Full";
            InitializationType[InitializationType["Minimal"] = 1] = "Minimal";
        })(InitializationType = Application.InitializationType || (Application.InitializationType = {}));
    })(Application || (exports.Application = Application = {}));
    var ClientDB;
    (function (ClientDB) {
        ClientDB.AutoNumber = AutoNumber_1.default;
        ClientDB.DBDataType = DBDataType_1.default;
    })(ClientDB || (exports.ClientDB = ClientDB = {}));
    var Model;
    (function (Model) {
        var DataFetchStatus;
        (function (DataFetchStatus) {
            DataFetchStatus[DataFetchStatus["Fetching"] = 0] = "Fetching";
            DataFetchStatus[DataFetchStatus["Fetched"] = 1] = "Fetched";
            DataFetchStatus[DataFetchStatus["Error"] = 2] = "Error";
        })(DataFetchStatus = Model.DataFetchStatus || (Model.DataFetchStatus = {}));
    })(Model || (exports.Model = Model = {}));
    var FeedbackMessage;
    (function (FeedbackMessage) {
        var FeedbackMessageType;
        (function (FeedbackMessageType) {
            FeedbackMessageType[FeedbackMessageType["Info"] = 0] = "Info";
            FeedbackMessageType[FeedbackMessageType["Success"] = 1] = "Success";
            FeedbackMessageType[FeedbackMessageType["Warning"] = 2] = "Warning";
            FeedbackMessageType[FeedbackMessageType["Error"] = 3] = "Error";
        })(FeedbackMessageType = FeedbackMessage.FeedbackMessageType || (FeedbackMessage.FeedbackMessageType = {}));
    })(FeedbackMessage || (exports.FeedbackMessage = FeedbackMessage = {}));
    var NativeHttp;
    (function (NativeHttp) {
        var NativeHttpRequestReadyState;
        (function (NativeHttpRequestReadyState) {
            NativeHttpRequestReadyState[NativeHttpRequestReadyState["Created"] = 0] = "Created";
            NativeHttpRequestReadyState[NativeHttpRequestReadyState["Sent"] = 1] = "Sent";
            NativeHttpRequestReadyState[NativeHttpRequestReadyState["Receiving"] = 2] = "Receiving";
            NativeHttpRequestReadyState[NativeHttpRequestReadyState["Aborting"] = 3] = "Aborting";
            NativeHttpRequestReadyState[NativeHttpRequestReadyState["Finished"] = 4] = "Finished";
        })(NativeHttpRequestReadyState = NativeHttp.NativeHttpRequestReadyState || (NativeHttp.NativeHttpRequestReadyState = {}));
    })(NativeHttp || (exports.NativeHttp = NativeHttp = {}));
});
//# sourceMappingURL=Interfaces.js.map;
define('OutSystems/ClientRuntime/RegExpHelper',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.escape = exports.replace = exports.matches = exports.Match = void 0;
    var Match = (function () {
        function Match(match, regExpIndex) {
            this._groups = match;
            this._index = regExpIndex - this._groups[0].length;
        }
        Object.defineProperty(Match.prototype, "value", {
            get: function () {
                return this._groups[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Match.prototype, "index", {
            get: function () {
                return this._index;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Match.prototype, "length", {
            get: function () {
                return this._groups[0].length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Match.prototype, "groups", {
            get: function () {
                return this._groups;
            },
            enumerable: false,
            configurable: true
        });
        return Match;
    }());
    exports.Match = Match;
    function matches(text, regExpText, caseInsensitive) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        var result = [];
        var regExp = new RegExp(regExpText, "g" + (caseInsensitive ? "i" : ""));
        var matchAux = regExp.exec(text);
        while (matchAux) {
            result.push(new Match(matchAux, regExp.lastIndex));
            matchAux = regExp.exec(text);
        }
        return result;
    }
    exports.matches = matches;
    function replace(text, regExpText, caseInsensitive, matchEvaluator) {
        if (caseInsensitive === void 0) { caseInsensitive = false; }
        var matchesArr = matches(text, regExpText, caseInsensitive);
        var result = text;
        var adjustment = 0;
        for (var i = 0; i < matchesArr.length; i++) {
            var match = matchesArr[i];
            var replacement = matchEvaluator(match);
            result =
                result.substr(0, match.index + adjustment) +
                    replacement +
                    result.substr(adjustment + match.index + match.length);
            adjustment += replacement.length - match.length;
        }
        return result;
    }
    exports.replace = replace;
    function escape(s) {
        return !s ? s : s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    exports.escape = escape;
});
//# sourceMappingURL=RegExpHelper.js.map;
define('OutSystems/ClientRuntime/Database',["require", "exports", "tslib", "./Exceptions", "./Flow", "./Interfaces", "./Logger", "./NativeHelper", "./RegExpHelper"], function (require, exports, tslib_1, Exceptions_1, Flow, Interfaces_1, Logger, NativeHelper, RegExpHelper) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SqlDbIntrospector = exports.SqlDbProvider = exports.MockSqlDatabaseWithExecution = exports.MockSqlDatabase = exports.TxExecutor = void 0;
    var CanaryQueryError = "Failed to execute canary query (probably due to zombie transaction)";
    var CallbackFunction = (function () {
        function CallbackFunction(callback) {
            this.callback = callback;
        }
        return CallbackFunction;
    }());
    var SuccessCallback = (function (_super) {
        tslib_1.__extends(SuccessCallback, _super);
        function SuccessCallback(callback) {
            var _this = _super.call(this, callback) || this;
            _this.callback = callback;
            return _this;
        }
        return SuccessCallback;
    }(CallbackFunction));
    var ErrorCallback = (function (_super) {
        tslib_1.__extends(ErrorCallback, _super);
        function ErrorCallback(callback) {
            var _this = _super.call(this, callback) || this;
            _this.callback = callback;
            return _this;
        }
        return ErrorCallback;
    }(CallbackFunction));
    var TxExecutor = (function () {
        function TxExecutor(tx, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            this.tx = tx;
            this.allowTraces = allowTraces;
            this.chain = [];
            this.pendingResult = null;
            this.hasPendingResult = false;
            this.pendingError = null;
            this.hasPendingError = false;
            this.parent = null;
        }
        TxExecutor.prototype.cloneForNext = function () {
            var next = new TxExecutor(this.tx, this.allowTraces);
            next.parent = this;
            return next;
        };
        TxExecutor.prototype.andThen = function (continuation) {
            if (!this.hasPendingError) {
                this.chain.push(new SuccessCallback(continuation));
                this.triggerPendingResults();
            }
            return this;
        };
        TxExecutor.prototype.withoutTraces = function (continuation) {
            return this.andThen(function (runner, result) {
                runner.allowTraces = false;
                return continuation(runner, result);
            });
        };
        TxExecutor.prototype.andThenAll = function (continuations) {
            return this.andThen(function (runner, result) {
                var nextSteps = continuations(result);
                var continuation = runner.feed(undefined);
                if (nextSteps) {
                    for (var i = 0; i < nextSteps.length; i++) {
                        continuation = continuation.andThen(nextSteps[i]);
                    }
                }
                return continuation.andThen(function () { });
            });
        };
        TxExecutor.prototype.extractScalar = function (dbRecord) {
            var keys = Object.keys(dbRecord);
            if (keys.length === 1) {
                var key = keys[0];
                return dbRecord[key];
            }
            else {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Invalid use of 'extractScalar': the row should have a single column, but found '".concat(keys.join("', '"), "'"));
            }
        };
        TxExecutor.prototype.executeScalar = function (sql, args) {
            var _this = this;
            return this.executeQueryRaw(sql, args).andThen(function (runner, result) {
                if (result.rows.length === 0) {
                    return undefined;
                }
                else {
                    return _this.extractScalar(result.rows.item(0));
                }
            });
        };
        TxExecutor.prototype.executeQuery = function (sql, conversionFunction, args) {
            return this.executeQueryRaw(sql, args).andThen(function (runner, result) {
                var converted = new Array(result.rows.length);
                for (var i = 0; i < result.rows.length; i++) {
                    var item = result.rows.item(i);
                    converted[i] = conversionFunction(item);
                }
                return converted;
            });
        };
        TxExecutor.prototype.executeNonQuery = function (sql, args) {
            return this.executeQueryRaw(sql, args).andThen(function (runner, result) {
                return undefined;
            });
        };
        TxExecutor.prototype.executeQueryRaw = function (sql, args) {
            var _this = this;
            var queryId = TxExecutor.queryCount++;
            var argsToLog = args || [];
            this.traceQuery(queryId, sql, argsToLog);
            this.tx.executeSql(sql, args, function (tx, rs) {
                try {
                    _this.continueWithNext(rs);
                }
                catch (e) {
                    _this.abortExplicitly(tx, e);
                }
            }, function (tx, e) {
                _this.trace("SQL command #".concat(queryId, " failed with error ") + e.message);
                return _this.abort(e);
            });
            return this;
        };
        TxExecutor.prototype.feed = function (feed) {
            this.hasPendingResult = true;
            this.pendingResult = feed;
            return this;
        };
        TxExecutor.prototype.onError = function (handler) {
            this.chain.push(new ErrorCallback(handler));
            this.triggerPendingError();
            return this;
        };
        TxExecutor.prototype.nextCallback = function (filterCallback) {
            for (var i = 0; i < this.chain.length; i++) {
                if (filterCallback(this.chain[i])) {
                    var callback = this.chain[i].callback;
                    this.chain = this.chain.slice(i + 1, this.chain.length);
                    return callback;
                }
            }
            return null;
        };
        TxExecutor.prototype.nextErrorCallback = function () {
            return this.nextCallback(function (handler) { return handler instanceof ErrorCallback; });
        };
        TxExecutor.prototype.hasErrorCallback = function () {
            return this.chain.some(function (handler) { return handler instanceof ErrorCallback; });
        };
        TxExecutor.prototype.nextSuccessCallback = function () {
            return this.nextCallback(function (handler) { return handler instanceof SuccessCallback; });
        };
        TxExecutor.prototype.abort = function (e) {
            var onError = this.nextErrorCallback();
            if (onError) {
                this.pendingError = null;
                this.hasPendingError = false;
                try {
                    var shouldAbort_1 = false;
                    var abortCallback = function () {
                        shouldAbort_1 = true;
                    };
                    var result = onError(e, abortCallback);
                    if (shouldAbort_1) {
                        this.chain = [];
                    }
                    else {
                        this.continueWithNext(result);
                    }
                    return shouldAbort_1;
                }
                catch (otherError) {
                    if (this.hasErrorCallback()) {
                        return this.abort(otherError);
                    }
                    else if (this.parent) {
                        return this.parent.abort(otherError);
                    }
                    else {
                        throw otherError;
                    }
                }
            }
            else {
                this.pendingError = e;
                this.hasPendingError = true;
            }
            if (this.parent) {
                return this.parent.abort(e);
            }
            return true;
        };
        TxExecutor.prototype.abortExplicitly = function (tx, e) {
            if (this.abort(e)) {
                tx.executeSql("ABORT_TRANSACTION", null, function () { }, function () { return true; });
            }
        };
        TxExecutor.prototype.continueWithNext = function (result) {
            var _this = this;
            this.hasPendingResult = false;
            if (result instanceof TxExecutor) {
                result.andThen(function (e, r) {
                    _this.continueWithNext(r);
                });
                return;
            }
            else if (result instanceof Array) {
                if (result.length !== 0 && result[0] instanceof TxExecutor) {
                    var i_1 = 0;
                    var runner_1 = function () {
                        if (i_1 < result.length) {
                            result[i_1].andThen(runner_1);
                            i_1++;
                        }
                        else {
                            _this.continueWithNext(result);
                        }
                    };
                    runner_1();
                    return;
                }
            }
            if (this.chain.length > 0) {
                var nextItem = this.nextSuccessCallback();
                if (nextItem) {
                    this.continueWithNext(this.tryNextItem(nextItem, this.cloneForNext(), result));
                    return;
                }
            }
            this.hasPendingResult = true;
            this.pendingResult = result;
        };
        TxExecutor.prototype.tryNextItem = function (nextItem, clone, result) {
            try {
                return nextItem(clone, result);
            }
            catch (e) {
                this.abortExplicitly(this.tx, e);
            }
        };
        TxExecutor.prototype.triggerPendingResults = function () {
            if (!this.hasPendingResult) {
                return;
            }
            this.hasPendingResult = false;
            this.continueWithNext(this.pendingResult);
        };
        TxExecutor.prototype.triggerPendingError = function () {
            if (!this.hasPendingError) {
                return;
            }
            this.hasPendingError = false;
            this.abort(this.pendingError);
        };
        TxExecutor.prototype.trace = function (msg) {
            if (this.allowTraces) {
                Logger.trace(this, msg);
            }
        };
        TxExecutor.prototype.traceQuery = function (queryId, sql, queryArguments) {
            if (this.allowTraces) {
                Logger.trace(this, function () {
                    var queryArgumentsMessage = (queryArguments || []).map(function (argument) {
                        return String(argument).substr(0, 80);
                    });
                    return "Executing SQL command #".concat(queryId, ": ").concat(sql, " with arguments ").concat(queryArgumentsMessage);
                });
            }
        };
        TxExecutor.for = function (tx) {
            return new TxExecutor(tx);
        };
        TxExecutor.queryCount = 0;
        return TxExecutor;
    }());
    exports.TxExecutor = TxExecutor;
    var SqlDatabase = (function () {
        function SqlDatabase(dbName, db) {
            this.dbName = dbName;
            this.db = db;
            this.txCount = 0;
        }
        Object.defineProperty(SqlDatabase.prototype, "name", {
            get: function () {
                return this.dbName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(SqlDatabase.prototype, "isMock", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        SqlDatabase.prototype.executeTransaction = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteTransaction(body, false, allowTraces);
        };
        SqlDatabase.prototype.executeReadTransaction = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteTransaction(body, true, allowTraces);
        };
        SqlDatabase.prototype.innerExecuteTransaction = function (body, isReadOnly, allowTraces) {
            var _this = this;
            var transactionType = isReadOnly ? "READ" : "WRITE";
            var transactionMethod = isReadOnly ? this.db.readTransaction : this.db.transaction;
            var txId = ++this.txCount;
            return Flow.promise(function (resolve, reject) {
                var value;
                var error;
                _this.trace("Opening local storage ".concat(transactionType, " transaction #").concat(txId, " on database ").concat(_this.name), allowTraces);
                transactionMethod.call(_this.db, function (tx) {
                    _this.trace("Executing local storage ".concat(transactionType, " transaction #").concat(txId, " on database ").concat(_this.name), allowTraces);
                    var continuation = TxExecutor.for(tx).feed(undefined);
                    if (allowTraces) {
                        continuation = continuation.andThen(body);
                    }
                    else {
                        continuation = continuation.withoutTraces(body);
                    }
                    return continuation
                        .andThen(function (runner, result) { return (value = result); })
                        .onError(function (e, abort) {
                        error = e;
                        abort();
                    });
                }, function (e) {
                    error = error || e;
                    var processedError = error && error.message ? error : new Error(error);
                    _this.trace("Rolled back local storage ".concat(transactionType, " transaction #").concat(txId, " on database ").concat(_this.name, ": ").concat(processedError.message), allowTraces);
                    reject(new Exceptions_1.Exceptions.DataBaseException("", processedError.message.toString()));
                    return true;
                }, function () {
                    _this.trace("Committed local storage ".concat(transactionType, " transaction #").concat(txId, " on database ").concat(_this.name), allowTraces);
                    resolve(value);
                });
            });
        };
        SqlDatabase.prototype.testConnection = function () {
            var _this = this;
            var maxCanaryQueries = 5;
            var failCount = 0;
            this.trace("Starting to test on database connections. Performing #".concat(maxCanaryQueries, " test queries."));
            return Promise.all(Array.apply(null, { length: maxCanaryQueries }).map(function (value, index) {
                return new Promise(function (resolve) {
                    _this.executeTransaction(function (runner) {
                        return runner.executeQueryRaw("SELECT 1").onError(function (e, abort) {
                            logCanaryError(e);
                            failCount++;
                        });
                    })
                        .catch(function (error) {
                        logCanaryError(error);
                        failCount++;
                    })
                        .then(function () {
                        resolve();
                    });
                });
            })).then(function () {
                _this.trace("Finished tests on database connections. #".concat(maxCanaryQueries - failCount, " out of #").concat(maxCanaryQueries, " successfull queries."));
            });
        };
        SqlDatabase.prototype.trace = function (msg, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            if (allowTraces) {
                Logger.trace(this, msg);
            }
        };
        return SqlDatabase;
    }());
    var MockSqlDatabase = (function () {
        function MockSqlDatabase(dbName, db) {
            this.dbName = dbName;
            this.db = db;
        }
        Object.defineProperty(MockSqlDatabase.prototype, "name", {
            get: function () {
                return this.dbName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MockSqlDatabase.prototype, "isMock", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        MockSqlDatabase.prototype.executeTransaction = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            return Flow.resolve();
        };
        MockSqlDatabase.prototype.executeReadTransaction = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            return Flow.resolve();
        };
        MockSqlDatabase.prototype.testConnection = function () {
            return Promise.resolve();
        };
        return MockSqlDatabase;
    }());
    exports.MockSqlDatabase = MockSqlDatabase;
    var MockSqlDatabaseWithExecution = (function (_super) {
        tslib_1.__extends(MockSqlDatabaseWithExecution, _super);
        function MockSqlDatabaseWithExecution() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MockSqlDatabaseWithExecution.prototype.executeTransaction = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            body(null);
            return Flow.resolve();
        };
        return MockSqlDatabaseWithExecution;
    }(MockSqlDatabase));
    exports.MockSqlDatabaseWithExecution = MockSqlDatabaseWithExecution;
    function logCanaryError(e) {
        Logger.error("Database", CanaryQueryError);
        if (typeof SQLError !== "undefined" && e instanceof SQLError) {
            Logger.error("Database", "SQLError ".concat(e.code, ": ").concat(e.message));
        }
        else {
            Logger.error("Database", e);
        }
    }
    var COULD_NOT_OPEN_DATABASE_MSG = "Could not open database";
    var SqlDbProviderClass = (function () {
        function SqlDbProviderClass() {
            this.dbCache = {};
        }
        SqlDbProviderClass.prototype.trace = function (msg) {
            Logger.trace(this, msg);
        };
        SqlDbProviderClass.prototype.asSafeDbName = function (dbName) {
            return dbName || "";
        };
        SqlDbProviderClass.prototype.openDb = function (dbName) {
            var _this = this;
            dbName = this.asSafeDbName(dbName);
            return Flow.promise(function (resolve, reject) {
                if (!_this.dbCache[dbName]) {
                    NativeHelper.ensureNativeReady()
                        .then(function () {
                        if (typeof window === "undefined") {
                            return reject(new Exceptions_1.Exceptions.SystemException("Database is only available in the browser/web view"));
                        }
                        var w = window;
                        if (NativeHelper.isRunningOnNative()) {
                            if (w.sqlitePlugin) {
                                _this.trace("Opening database '".concat(dbName, "'"));
                                try {
                                    w.sqlitePlugin.openDatabase({ name: dbName, location: "default" }, function (db) {
                                        if (db) {
                                            _this.trace("Database '".concat(dbName, "' opened successfully"));
                                            _this.dbCache[dbName] = new SqlDatabase(dbName, db);
                                            resolve(_this.dbCache[dbName]);
                                        }
                                        else {
                                            _this.trace("Error opening database '".concat(dbName, "'"));
                                            reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(dbName, "'")));
                                        }
                                    }, function (e) {
                                        _this.trace("Error opening database '".concat(dbName, "' ") + e.message);
                                        reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(dbName, "': ").concat(e.message.toString())));
                                    });
                                }
                                catch (e) {
                                    reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(dbName, "': ").concat(e.message.toString())));
                                }
                            }
                            else {
                                reject(new Exceptions_1.Exceptions.OpenDatabaseException("No database driver available"));
                            }
                        }
                        else if (w.openDatabase) {
                            try {
                                _this.trace("Opening database '".concat(dbName, "'"));
                                var db = w.openDatabase(dbName, "1.0", dbName, 5 * 1024 * 1024);
                                if (db) {
                                    _this.trace("Database '".concat(dbName, "' opened successfully"));
                                    _this.dbCache[dbName] = new SqlDatabase(dbName, db);
                                    resolve(_this.dbCache[dbName]);
                                }
                                else {
                                    _this.trace("Error opening database '".concat(dbName, "'"));
                                    reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(dbName, "'")));
                                }
                            }
                            catch (e) {
                                reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(dbName, "': ").concat(e.message.toString())));
                            }
                        }
                        else {
                            var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
                            var isChrome = !!w.chrome;
                            var errorMessage = "Your app requires native access to a Local Storage database that is not available in your browser.\n\nPlease test your app in your mobile device" +
                                (isSafari || isChrome ? "" : ", or use Google Chrome or Safari web browsers") +
                                ".";
                            alert(errorMessage);
                            reject(new Exceptions_1.Exceptions.SystemException(errorMessage));
                        }
                    })
                        .catch(reject);
                }
                else {
                    resolve(_this.dbCache[dbName]);
                }
            });
        };
        SqlDbProviderClass.prototype.mockDb = function (dbName) {
            return Flow.resolve(new MockSqlDatabase(dbName, null));
        };
        return SqlDbProviderClass;
    }());
    exports.SqlDbProvider = new SqlDbProviderClass();
    var SchemaTypeMatchGroups;
    (function (SchemaTypeMatchGroups) {
        SchemaTypeMatchGroups[SchemaTypeMatchGroups["Full"] = 0] = "Full";
        SchemaTypeMatchGroups[SchemaTypeMatchGroups["Type"] = 1] = "Type";
        SchemaTypeMatchGroups[SchemaTypeMatchGroups["Length"] = 3] = "Length";
        SchemaTypeMatchGroups[SchemaTypeMatchGroups["Decimals"] = 5] = "Decimals";
    })(SchemaTypeMatchGroups || (SchemaTypeMatchGroups = {}));
    var schemaTypeRegex = "^([a-z]+)(\\(([0-9]+)(\\,([0-9]+))?\\))?$";
    var SqlDbIntrospectorClass = (function () {
        function SqlDbIntrospectorClass() {
        }
        SqlDbIntrospectorClass.prototype.tableExists = function (db, tableName) {
            return db.executeReadTransaction(function (runner) {
                return runner
                    .executeScalar("SELECT COUNT(*) FROM sqlite_master WHERE type = 'table' AND name = UPPER(?)", [
                    tableName,
                ])
                    .andThen(function (runner, count) { return count !== 0; });
            });
        };
        SqlDbIntrospectorClass.prototype.columnExists = function (db, tableName, columnName) {
            return db
                .executeReadTransaction(function (runner) {
                return runner.executeScalar("SELECT \"".concat(tableName, "\".\"").concat(columnName, "\" FROM \"").concat(tableName, "\" LIMIT 1"));
            })
                .then(function () { return true; })
                .catch(function () { return false; });
        };
        SqlDbIntrospectorClass.prototype.dbTypeFromSchemaType = function (schemaType) {
            schemaType = schemaType || "";
            switch (schemaType.toUpperCase()) {
                case "INTEGER":
                    return Interfaces_1.ClientDB.DBDataType.INTEGER;
                case "BIGINT":
                    return Interfaces_1.ClientDB.DBDataType.LONGINTEGER;
                case "REAL":
                    return Interfaces_1.ClientDB.DBDataType.DECIMAL;
                case "BOOLEAN":
                    return Interfaces_1.ClientDB.DBDataType.BOOLEAN;
                case "TEXT":
                    return Interfaces_1.ClientDB.DBDataType.TEXT;
                case "DATE":
                    return Interfaces_1.ClientDB.DBDataType.DATE;
                case "TIME":
                    return Interfaces_1.ClientDB.DBDataType.TIME;
                case "DATETIME":
                    return Interfaces_1.ClientDB.DBDataType.DATE_TIME;
                case "BLOB":
                    return Interfaces_1.ClientDB.DBDataType.BINARY_DATA;
                default:
                    return Interfaces_1.ClientDB.DBDataType.UNKNOWN;
            }
        };
        SqlDbIntrospectorClass.prototype.pragmaToTableInfo = function (tableName, tableSql, columns) {
            var _this = this;
            tableSql = tableSql || "";
            var hasAutoIncrement = tableSql.search(/INTEGER PRIMARY KEY AUTOINCREMENT/i) >= 0;
            var tableInfo = {
                tableName: tableName,
                idIsAutoNumber: hasAutoIncrement ? Interfaces_1.ClientDB.AutoNumber.YesIfEmpty : Interfaces_1.ClientDB.AutoNumber.No,
                attributes: columns.map(function (row) {
                    var typeMatch = RegExpHelper.matches(row.type, schemaTypeRegex, true).shift();
                    if (typeMatch) {
                        var dbType = _this.dbTypeFromSchemaType(typeMatch.groups[1]);
                        return {
                            name: row.name,
                            columnName: row.name ? row.name.toUpperCase() : null,
                            type: dbType,
                            length: typeMatch.groups[3]
                                ? parseInt(typeMatch.groups[3], 10)
                                : undefined,
                            decimals: typeMatch.groups[5]
                                ? parseInt(typeMatch.groups[5], 10)
                                : undefined,
                            isEntityReference: row.dflt_value === "NULL" && _this.isIdentifierUnderlyingType(dbType),
                            isPrimaryKey: row.pk === 1,
                        };
                    }
                }),
            };
            return tableInfo;
        };
        SqlDbIntrospectorClass.prototype.isIdentifierUnderlyingType = function (dbType) {
            switch (dbType) {
                case Interfaces_1.ClientDB.DBDataType.INTEGER:
                case Interfaces_1.ClientDB.DBDataType.LONGINTEGER:
                case Interfaces_1.ClientDB.DBDataType.TEXT:
                    return true;
                default:
                    return false;
            }
        };
        SqlDbIntrospectorClass.prototype.introspectTableInfo = function (runner, tableName) {
            var _this = this;
            if (!NativeHelper.isRunningOnNative()) {
                return runner.feed(null);
            }
            var tableSql;
            return runner
                .executeScalar("SELECT sql FROM sqlite_master WHERE type = 'table' AND name = '".concat(tableName, "'"))
                .andThen(function (runner, obtainedTableSql) { return (tableSql = obtainedTableSql); })
                .andThen(function (runner, _) {
                return runner.executeQuery("PRAGMA table_info('".concat(tableName, "')"), function (dbRecord) { return dbRecord; });
            })
                .andThen(function (runner, columns) {
                return _this.pragmaToTableInfo(tableName, tableSql, columns);
            });
        };
        return SqlDbIntrospectorClass;
    }());
    exports.SqlDbIntrospector = new SqlDbIntrospectorClass();
});
//# sourceMappingURL=Database.js.map;
define('OutSystems/ClientRuntime/Format',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationFormatInfo = exports.NumberFormatInfo = exports.DateTimeFormatInfo = void 0;
    var cachedFormats = {};
    function parseComponentFormat(format, parts) {
        var cachedFormat = cachedFormats[format];
        if (typeof cachedFormat !== "undefined") {
            return cachedFormat;
        }
        var separator = format.replace(new RegExp("[" + parts.join("") + "]", "gi"), "").substr(0, 1);
        var partData = [];
        var i;
        for (i = 0; i < parts.length; i++) {
            partData.push({
                index: format.toLowerCase().indexOf(parts[i]),
                character: parts[i],
                length: format.replace(new RegExp("[^" + parts[i] + "]", "gi"), "").length,
            });
        }
        partData.sort(function (x, y) { return (x.index < y.index ? -1 : 1); });
        var parsedComponent = {
            format: format,
            separator: separator,
            parts: {},
            regExp: null,
        };
        parsedComponent.regExp = "^";
        for (i = 0; i < partData.length; i++) {
            var length_1 = "";
            switch (partData[i].character.toLowerCase()) {
                case "h":
                case "m":
                case "d":
                    length_1 = "1,2";
                    break;
                case "s":
                    parsedComponent.regExp += "(?" + separator;
                    length_1 = "1,2";
                    break;
                default:
                    length_1 = partData[i].length;
            }
            if (i > 0) {
                parsedComponent.regExp += "\\" + separator;
            }
            parsedComponent.regExp += "([0-9]{" + length_1 + "}" + ")" + (partData[i].character === "s" ? ")?" : "");
            parsedComponent.parts[partData[i].character + "Index"] = i;
            parsedComponent.parts[partData[i].character + "Format"] = format.slice(partData[i].index, partData[i].index + partData[i].length);
        }
        parsedComponent.regExp += "$";
        cachedFormats[format] = parsedComponent;
        return parsedComponent;
    }
    function parseDateFormat(dateFormat) {
        return parseComponentFormat(dateFormat, ["y", "m", "d"]);
    }
    function parseTimeFormat(timeFormat) {
        return parseComponentFormat(timeFormat, ["h", "m", "s"]);
    }
    var DateTimeFormatInfo = (function () {
        function DateTimeFormatInfo(dateFormat, timeFormat, dateTimeSeparator, tzInfo) {
            if (dateTimeSeparator === void 0) { dateTimeSeparator = " "; }
            if (tzInfo === void 0) { tzInfo = ""; }
            this.dateFmt = parseDateFormat(dateFormat);
            this.timeFmt = parseTimeFormat(timeFormat);
            this.dateTimeSep = dateTimeSeparator;
            this.tzInformation = tzInfo;
        }
        DateTimeFormatInfo.getDayName = function (day) {
            return DateTimeFormatInfo.DayNames[day];
        };
        DateTimeFormatInfo.getShortDayName = function (day) {
            return DateTimeFormatInfo.DayNames[day].slice(0, 3);
        };
        DateTimeFormatInfo.getMonthName = function (monthNumber) {
            return DateTimeFormatInfo.MonthNames[monthNumber - 1];
        };
        DateTimeFormatInfo.getShortMonthName = function (monthNumber) {
            return DateTimeFormatInfo.MonthNames[monthNumber - 1].slice(0, 3);
        };
        DateTimeFormatInfo.get12HourNotation = function (hour) {
            return hour < 12 ? "AM" : "PM";
        };
        DateTimeFormatInfo.getTimezoneInformationFull = function (tzo) {
            var timezoneSignal = DateTimeFormatInfo.getTimezoneSignal(-tzo);
            tzo = Math.abs(tzo);
            return (timezoneSignal +
                DateTimeFormatInfo.padLeadingZeros(Math.floor(tzo / 60).toString(), 2) +
                ":" +
                DateTimeFormatInfo.padLeadingZeros(Math.floor(tzo % 60).toString(), 2));
        };
        DateTimeFormatInfo.getTimezoneInformationHoursFull = function (tzo) {
            var timezoneSignal = DateTimeFormatInfo.getTimezoneSignal(-tzo);
            tzo = Math.abs(tzo);
            return timezoneSignal + DateTimeFormatInfo.padLeadingZeros(Math.floor(tzo / 60).toString(), 2);
        };
        DateTimeFormatInfo.getTimezoneInformationHoursShort = function (tzo) {
            var timezoneSignal = DateTimeFormatInfo.getTimezoneSignal(-tzo);
            tzo = Math.abs(tzo);
            return timezoneSignal + Math.floor(tzo / 60);
        };
        DateTimeFormatInfo.getTimezoneSignal = function (tzOffset) {
            return tzOffset < 0 ? "-" : "+";
        };
        DateTimeFormatInfo.padLeadingZeros = function (text, length) {
            var result = text || "";
            while (result.length < length) {
                result = "0" + result;
            }
            return result;
        };
        DateTimeFormatInfo.removeTrailingZeros = function (text) {
            var result = text || "";
            return result.replace(/0+$/gm, "");
        };
        Object.defineProperty(DateTimeFormatInfo.prototype, "dateFormat", {
            get: function () {
                return this.dateFmt.format;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "timeFormat", {
            get: function () {
                return this.timeFmt.format;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "dateTimeFormat", {
            get: function () {
                return this.dateFmt.format + this.dateTimeSeparator + this.timeFmt.format;
            },
            enumerable: false,
            configurable: true
        });
        DateTimeFormatInfo.prototype.getRegExpForDate = function () {
            return new RegExp(this.dateFmt.regExp, "i");
        };
        Object.defineProperty(DateTimeFormatInfo.prototype, "yearIndexForDate", {
            get: function () {
                return this.dateFmt.parts.yIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "monthIndexForDate", {
            get: function () {
                return this.dateFmt.parts.mIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "dayIndexForDate", {
            get: function () {
                return this.dateFmt.parts.dIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "yearFormatForDate", {
            get: function () {
                return this.dateFmt.parts.yFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "monthFormatForDate", {
            get: function () {
                return this.dateFmt.parts.mFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "dayFormatForDate", {
            get: function () {
                return this.dateFmt.parts.dFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "dateSeparator", {
            get: function () {
                return this.dateFmt.separator;
            },
            enumerable: false,
            configurable: true
        });
        DateTimeFormatInfo.prototype.getRegExpForTime = function () {
            return new RegExp(this.timeFmt.regExp, "i");
        };
        Object.defineProperty(DateTimeFormatInfo.prototype, "hoursIndexForTime", {
            get: function () {
                return this.timeFmt.parts.hIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "minutesIndexForTime", {
            get: function () {
                return this.timeFmt.parts.mIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "secondsIndexForTime", {
            get: function () {
                return this.timeFmt.parts.sIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "timeSeparator", {
            get: function () {
                return this.timeFmt.separator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "dateTimeSeparator", {
            get: function () {
                return this.dateTimeSep;
            },
            enumerable: false,
            configurable: true
        });
        DateTimeFormatInfo.prototype.getRegExpForDateTime = function () {
            return new RegExp(this.dateFmt.regExp.substring(0, this.dateFmt.regExp.length - 1) +
                this.dateTimeSeparator +
                this.timeFmt.regExp.substring(1, this.timeFmt.regExp.length - 1) +
                this.tzInformation +
                "$", "i");
        };
        Object.defineProperty(DateTimeFormatInfo.prototype, "yearIndexForDateTime", {
            get: function () {
                return this.dateFmt.parts.yIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "monthIndexForDateTime", {
            get: function () {
                return this.dateFmt.parts.mIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "dayIndexForDateTime", {
            get: function () {
                return this.dateFmt.parts.dIndex;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "hoursIndexForDateTime", {
            get: function () {
                return this.timeFmt.parts.hIndex + 3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "hoursFormatForTime", {
            get: function () {
                return this.timeFmt.parts.hFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "minutesFormatForTime", {
            get: function () {
                return this.timeFmt.parts.mFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "secondsFormatForTime", {
            get: function () {
                return this.timeFmt.parts.sFormat;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "minutesIndexForDateTime", {
            get: function () {
                return this.timeFmt.parts.mIndex + 3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeFormatInfo.prototype, "secondsIndexForDateTime", {
            get: function () {
                return this.timeFmt.parts.sIndex + 3;
            },
            enumerable: false,
            configurable: true
        });
        DateTimeFormatInfo.DayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        DateTimeFormatInfo.MonthNames = [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
        ];
        return DateTimeFormatInfo;
    }());
    exports.DateTimeFormatInfo = DateTimeFormatInfo;
    var NumberFormatInfo = (function () {
        function NumberFormatInfo(decimalSeparator, groupSeparator) {
            this.decimalSep = decimalSeparator;
            this.groupSep = groupSeparator;
            this.integerFmtRegExp = null;
            this.decimalFmtRegExp = null;
            this.generateFormatRegExps(decimalSeparator, groupSeparator);
        }
        NumberFormatInfo.prototype.generateFormatRegExps = function (decimalSeparator, groupSeparator) {
            var decimalSeparatorRx = "\\" + decimalSeparator;
            var integerPartRx = "(([0-9]{1,3}(" + (!!groupSeparator ? "\\" + groupSeparator : "") + "[0-9]{3})*)|([0-9]+))";
            var decimalPartRx = "[0-9]+";
            this.integerFmtRegExp = "^[-]?" + integerPartRx + "$";
            this.decimalFmtRegExp =
                "^[-]?((" +
                    integerPartRx +
                    "(" +
                    decimalSeparatorRx +
                    "(" +
                    decimalPartRx +
                    ")?)?)|((" +
                    integerPartRx +
                    ")?" +
                    decimalSeparatorRx +
                    decimalPartRx +
                    "))$";
        };
        Object.defineProperty(NumberFormatInfo.prototype, "decimalSeparator", {
            get: function () {
                return this.decimalSep;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NumberFormatInfo.prototype, "groupSeparator", {
            get: function () {
                return this.groupSep;
            },
            enumerable: false,
            configurable: true
        });
        NumberFormatInfo.prototype.getRegExpForInteger = function () {
            return new RegExp(this.integerFmtRegExp, "i");
        };
        NumberFormatInfo.prototype.getRegExpForDecimal = function () {
            return new RegExp(this.decimalFmtRegExp, "i");
        };
        NumberFormatInfo.prototype.getRegExpForJSNumber = function () {
            return new RegExp("^-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?$", "i");
        };
        return NumberFormatInfo;
    }());
    exports.NumberFormatInfo = NumberFormatInfo;
    var ApplicationFormatInfo = (function () {
        function ApplicationFormatInfo(dateTimeFormatInfo, numberFormatInfo) {
            this.defaultDateTimeFormats = [
                new DateTimeFormatInfo("yyyy-MM-dd", "HH:mm:ss"),
                new DateTimeFormatInfo("yyyy-MM-dd", "HH:mm:ss"),
                new DateTimeFormatInfo("yyyy/MM/dd", "HH:mm:ss"),
                new DateTimeFormatInfo("yyyy.MM.dd", "HH:mm:ss"),
            ];
            this.defaultNumberFmt = numberFormatInfo;
            this.currentNumberFmt = numberFormatInfo;
            this.defaultDateTimeFormats[0] = dateTimeFormatInfo;
        }
        Object.defineProperty(ApplicationFormatInfo.prototype, "defaultDateTimeFormat", {
            get: function () {
                return this.defaultDateTimeFormats[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ApplicationFormatInfo.prototype, "dateTimeFormats", {
            get: function () {
                return this.defaultDateTimeFormats;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ApplicationFormatInfo.prototype, "dateTimeFormat", {
            set: function (format) {
                this.defaultDateTimeFormats[0] = format;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ApplicationFormatInfo.prototype, "defaultNumberFormat", {
            get: function () {
                return this.defaultNumberFmt;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ApplicationFormatInfo.prototype, "numberFormat", {
            get: function () {
                return this.currentNumberFmt;
            },
            set: function (format) {
                this.currentNumberFmt = format;
            },
            enumerable: false,
            configurable: true
        });
        return ApplicationFormatInfo;
    }());
    exports.ApplicationFormatInfo = ApplicationFormatInfo;
});
//# sourceMappingURL=Format.js.map;
define('OutSystems/ClientRuntime/DateTime',["require", "exports", "./Format", "./Settings"], function (require, exports, Format_1, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateTimeConstants = exports.DateTime = void 0;
    function coalesce(a, b) {
        return a === null || a === undefined ? b : a;
    }
    var DEFAULT_YEAR = 1900;
    var DEFAULT_MONTH = 0;
    var DEFAULT_DAY = 1;
    var DEFAULT_HOURS = 0;
    var DEFAULT_MINUTES = 0;
    var DEFAULT_SECONDS = 0;
    var DEFAULT_MILLISECONDS = 0;
    var DEFAULT_WEEKDAY = 1;
    var DateTimeLegacy = (function () {
        function DateTimeLegacy(year, month, day, hours, minutes, seconds, milliseconds) {
            this.isDefaultDate = false;
            if (arguments.length === 0) {
                this.date = this.nativeDefaultDate();
            }
            else if (arguments.length === 1) {
                if (year instanceof Date || Object.prototype.toString.call(year) === "[object Date]") {
                    var nativeDateValue = year.getTime();
                    if (!isNaN(nativeDateValue)) {
                        this.date = new Date(nativeDateValue);
                    }
                    else {
                        this.date = this.nativeDefaultDate();
                    }
                }
                else {
                    this.date = new Date(year);
                }
            }
            else if (coalesce(year, DEFAULT_YEAR) < 100) {
                this.date = new Date(100, 0, 1, 0, 0, 0, 0);
                this.date.setFullYear(coalesce(year, DEFAULT_YEAR));
                this.date.setMonth(coalesce(month, DEFAULT_MONTH + 1) - 1);
                this.date.setDate(coalesce(day, DEFAULT_DAY));
                this.date.setHours(coalesce(hours, DEFAULT_HOURS));
                this.date.setMinutes(coalesce(minutes, DEFAULT_MINUTES));
                this.date.setSeconds(coalesce(seconds, DEFAULT_SECONDS));
                this.date.setMilliseconds(coalesce(milliseconds, DEFAULT_MILLISECONDS));
            }
            else {
                this.date = new Date(coalesce(year, DEFAULT_YEAR), coalesce(month, DEFAULT_MONTH + 1) - 1, coalesce(day, DEFAULT_DAY), coalesce(hours, DEFAULT_HOURS), coalesce(minutes, DEFAULT_MINUTES), coalesce(seconds, DEFAULT_SECONDS), coalesce(milliseconds, DEFAULT_MILLISECONDS));
            }
            this.isDefaultDate =
                !(0, Settings_1.getEnvParams)().NullDatesTZAware &&
                    this.date.getFullYear() === DEFAULT_YEAR &&
                    this.date.getMonth() === DEFAULT_MONTH &&
                    this.date.getDate() === DEFAULT_DAY &&
                    this.date.getHours() === DEFAULT_HOURS &&
                    this.date.getMinutes() === DEFAULT_MINUTES &&
                    this.date.getSeconds() === DEFAULT_SECONDS &&
                    this.date.getMilliseconds() === DEFAULT_MILLISECONDS;
        }
        Object.defineProperty(DateTimeLegacy, "defaultValue", {
            get: function () {
                return DateTimeLegacy.defaultValueField;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "isInvalid", {
            get: function () {
                throw new Error("Not implemented: getIsInvalid");
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "getDate", {
            get: function () {
                return this.date;
            },
            enumerable: false,
            configurable: true
        });
        DateTimeLegacy.prototype.nativeDefaultDate = function () {
            return new Date(DEFAULT_YEAR, DEFAULT_MONTH, DEFAULT_DAY, DEFAULT_HOURS, DEFAULT_MINUTES, DEFAULT_SECONDS, DEFAULT_MILLISECONDS);
        };
        Object.defineProperty(DateTimeLegacy.prototype, "isDefault", {
            get: function () {
                return this.isDefaultDate;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "year", {
            get: function () {
                return this.isDefault ? DEFAULT_YEAR : this.date.getFullYear();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "month", {
            get: function () {
                return this.isDefault ? DEFAULT_MONTH + 1 : this.date.getMonth() + 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "day", {
            get: function () {
                return this.isDefault ? DEFAULT_DAY : this.date.getDate();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "hours", {
            get: function () {
                return this.isDefault ? DEFAULT_HOURS : this.date.getHours();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "minutes", {
            get: function () {
                return this.isDefault ? DEFAULT_MINUTES : this.date.getMinutes();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "seconds", {
            get: function () {
                return this.isDefault ? DEFAULT_SECONDS : this.date.getSeconds();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "milliseconds", {
            get: function () {
                return this.isDefault ? DEFAULT_MILLISECONDS : this.date.getMilliseconds();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeLegacy.prototype, "weekDay", {
            get: function () {
                return this.isDefault ? DEFAULT_WEEKDAY : this.date.getDay();
            },
            enumerable: false,
            configurable: true
        });
        DateTimeLegacy.prototype.addYears = function (years) {
            var dt = new DateTimeLegacy(this.year + years, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);
            if (this.month === 2 && this.day === 29 && dt.month === 3) {
                return new DateTimeLegacy(dt.year, 2, 28, dt.hours, dt.minutes, dt.seconds, dt.milliseconds);
            }
            return dt;
        };
        DateTimeLegacy.prototype.daysInMonth = function (month, year) {
            return new Date(year, month, 0).getDate();
        };
        DateTimeLegacy.prototype.addMonths = function (months) {
            var dt = new DateTimeLegacy(this.year, this.month + months, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);
            if (dt.day === this.day) {
                return dt;
            }
            return new DateTimeLegacy(dt.year, dt.month - 1, this.daysInMonth(dt.month - 1, dt.year), dt.hours, dt.minutes, dt.seconds, dt.milliseconds);
        };
        DateTimeLegacy.prototype.addDays = function (days) {
            return new DateTimeLegacy(this.year, this.month, this.day + days, this.hours, this.minutes, this.seconds, this.milliseconds);
        };
        DateTimeLegacy.prototype.addHours = function (hours) {
            return new DateTimeLegacy(this.year, this.month, this.day, this.hours + hours, this.minutes, this.seconds, this.milliseconds);
        };
        DateTimeLegacy.prototype.addMinutes = function (minutes) {
            return new DateTimeLegacy(this.year, this.month, this.day, this.hours, this.minutes + minutes, this.seconds, this.milliseconds);
        };
        DateTimeLegacy.prototype.addSeconds = function (seconds) {
            return new DateTimeLegacy(this.year, this.month, this.day, this.hours, this.minutes, this.seconds + seconds, this.milliseconds);
        };
        DateTimeLegacy.prototype.addMilliseconds = function (milliseconds) {
            return new DateTimeLegacy(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds + milliseconds);
        };
        DateTimeLegacy.prototype.equals = function (other) {
            return !!other && this.getTime() === other.getTime();
        };
        DateTimeLegacy.prototype.eq = function (other) {
            return this.equals(other);
        };
        DateTimeLegacy.prototype.greaterThan = function (other) {
            return this.date > other.getDate;
        };
        DateTimeLegacy.prototype.gt = function (other) {
            return this.greaterThan(other);
        };
        DateTimeLegacy.prototype.greaterThanOrEqualTo = function (other) {
            return this.date >= other.getDate;
        };
        DateTimeLegacy.prototype.gte = function (other) {
            return this.greaterThanOrEqualTo(other);
        };
        DateTimeLegacy.prototype.lessThan = function (other) {
            return this.date < other.getDate;
        };
        DateTimeLegacy.prototype.lt = function (other) {
            return this.lessThan(other);
        };
        DateTimeLegacy.prototype.lessThanOrEqualTo = function (other) {
            return this.date <= other.getDate;
        };
        DateTimeLegacy.prototype.lte = function (other) {
            return this.lessThanOrEqualTo(other);
        };
        DateTimeLegacy.prototype.toNative = function () {
            return this.isDefault ? this.nativeDefaultDate() : new Date(this.date.getTime());
        };
        DateTimeLegacy.prototype.getTime = function () {
            return this.isDefault ? this.nativeDefaultDate().getTime() : this.date.getTime();
        };
        DateTimeLegacy.prototype.valueOf = function () {
            return this.isDefault ? this.nativeDefaultDate().valueOf() : this.date.valueOf();
        };
        DateTimeLegacy.fromISODate = function (value) {
            var valid = DateTimeConstants.RFC3339_DATEPART.test(value);
            if (valid) {
                return DateTimeLegacy.internalFromUTCWithoutConversion(value + "T00:00:00Z");
            }
            return DateTimeLegacy.defaultValue;
        };
        DateTimeLegacy.prototype.toISODate = function () {
            return this.toString(DateTimeConstants.RFC3339_DATEPART_FORMAT);
        };
        DateTimeLegacy.fromISOTime = function (value) {
            var valid = DateTimeConstants.RFC3339_TIMEPART.test(value);
            if (valid) {
                return DateTimeLegacy.internalFromUTCWithoutConversion("1900-01-01T" + value + "Z");
            }
            return DateTimeLegacy.defaultValue;
        };
        DateTimeLegacy.prototype.toISOTime = function () {
            return this.toString(DateTimeConstants.RFC3339_TIMEPART_FORMAT);
        };
        DateTimeLegacy.fromISODateTime = function (value) {
            value = value || "";
            if (value === "" || (value.indexOf("1900-01-01") >= 0 && value.indexOf("00:00:00") >= 0)) {
                return DateTimeLegacy.defaultValue;
            }
            var rxTimezone = /([+\-]\d{2}((:\d{2})|(\d{2})?)|Z)$/;
            if (value.indexOf("T") > 0 && !rxTimezone.test(value)) {
                return DateTimeLegacy.internalFromUTCWithoutConversion(value.trim() + "Z");
            }
            value = value.replace(/([+-]\d{2})$/, function fun(x) {
                return x + "00";
            });
            var parsedDate = Date.parse(value);
            if (!isNaN(parsedDate)) {
                return new DateTimeLegacy(parsedDate);
            }
            return DateTimeLegacy.defaultValue;
        };
        DateTimeLegacy.internalFromUTCWithoutConversion = function (value) {
            var parsedDate = Date.parse(value);
            if (!isNaN(parsedDate)) {
                var dateInUTC = new Date(parsedDate);
                return new DateTimeLegacy(dateInUTC.getUTCFullYear(), dateInUTC.getUTCMonth() + 1, dateInUTC.getUTCDate(), dateInUTC.getUTCHours(), dateInUTC.getUTCMinutes(), dateInUTC.getUTCSeconds(), dateInUTC.getUTCMilliseconds());
            }
            return DateTimeLegacy.defaultValue;
        };
        DateTimeLegacy.prototype.toDBDateTime = function () {
            throw new Error("Not implemented: toDBDateTime");
        };
        DateTimeLegacy.fromDBDateTime = function (value) {
            throw new Error("Not implemented: fromDBDateTime");
        };
        DateTimeLegacy.prototype.getMillisecondsString = function () {
            return (this.milliseconds / 1000).toFixed(3).substring(2, 5);
        };
        DateTimeLegacy.prototype.toString = function (format) {
            var _this = this;
            if (arguments.length === 0) {
                if (this.equals(DateTimeLegacy.defaultValue)) {
                    return "1900-01-01T00:00:00";
                }
                else {
                    return this.date.toISOString();
                }
            }
            return format.replace(/(\\.)|dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|ff?f?|FF?F?|\.FF?F?|tt?|zz?z?/g, function (f) {
                if (f.indexOf("\\") === 0) {
                    return f.substring(1);
                }
                switch (f) {
                    case "hh":
                    case "h":
                        var normalizedHours = _this.hours < 13 ? _this.hours : _this.hours - 12;
                        return Format_1.DateTimeFormatInfo.padLeadingZeros((_this.hours === 0 ? 12 : normalizedHours).toString(), f.length);
                    case "HH":
                    case "H":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.hours.toString(), f.length);
                    case "mm":
                    case "m":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.minutes.toString(), f.length);
                    case "ss":
                    case "s":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.seconds.toString(), f.length);
                    case "fff":
                        return _this.getMillisecondsString();
                    case "ff":
                        return _this.getMillisecondsString().substring(0, 2);
                    case "f":
                        return _this.getMillisecondsString().substring(0, 1);
                    case ".FFF":
                    case ".FF":
                    case ".F":
                        return _this.milliseconds === 0
                            ? ""
                            : "." + Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString());
                    case "FFF":
                        return Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString());
                    case "FF":
                        return Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString()).substring(0, 2);
                    case "F":
                        return Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString()).substring(0, 1);
                    case "yyyy":
                    case "yyy":
                        var year = _this.year.toString();
                        if (year.charAt(0) === "0") {
                            return _this.year.toString().substring(1);
                        }
                        return year;
                    case "yy":
                        return _this.year.toString().substring(2, 4);
                    case "y":
                        return Number(_this.year.toString().substring(2, 4)).toString();
                    case "dddd":
                        return Format_1.DateTimeFormatInfo.getDayName(_this.weekDay);
                    case "ddd":
                        return Format_1.DateTimeFormatInfo.getShortDayName(_this.weekDay);
                    case "dd":
                    case "d":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.day.toString(), f.length);
                    case "MMMM":
                        return Format_1.DateTimeFormatInfo.getMonthName(_this.month);
                    case "MMM":
                        return Format_1.DateTimeFormatInfo.getShortMonthName(_this.month);
                    case "MM":
                    case "M":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.month.toString(), f.length);
                    case "t":
                        return Format_1.DateTimeFormatInfo.get12HourNotation(_this.hours).substring(0, 1);
                    case "tt":
                        return Format_1.DateTimeFormatInfo.get12HourNotation(_this.hours);
                    case "zzz":
                        return Format_1.DateTimeFormatInfo.getTimezoneInformationFull(_this.date.getTimezoneOffset());
                    case "zz":
                        return Format_1.DateTimeFormatInfo.getTimezoneInformationHoursFull(_this.date.getTimezoneOffset());
                    case "z":
                        return Format_1.DateTimeFormatInfo.getTimezoneInformationHoursShort(_this.date.getTimezoneOffset());
                    default:
                        return f;
                }
            });
        };
        DateTimeLegacy.defaultValueField = new DateTimeLegacy();
        return DateTimeLegacy;
    }());
    var DateTimeNew = (function () {
        function DateTimeNew(year, month, day, hours, minutes, seconds, milliseconds) {
            this.isTimezoneIndependent = false;
            this.invalid = true;
            this.date = null;
            var timestamp;
            if (arguments.length === 0) {
                this.invalid = false;
                return;
            }
            if (arguments.length === 1) {
                if (year instanceof Date || Object.prototype.toString.call(year) === "[object Date]") {
                    timestamp = year.getTime();
                }
                else {
                    timestamp = year;
                }
            }
            else if (arguments.length > 1) {
                var y = coalesce(year, DEFAULT_YEAR);
                if (y >= 100 && y <= 9999) {
                    var mo = coalesce(month, DEFAULT_MONTH + 1) - 1;
                    var d = coalesce(day, DEFAULT_DAY);
                    var h = coalesce(hours, DEFAULT_HOURS);
                    var m = coalesce(minutes, DEFAULT_MINUTES);
                    var s = coalesce(seconds, DEFAULT_SECONDS);
                    var ms = coalesce(milliseconds, DEFAULT_MILLISECONDS);
                    var isNullDate = y === DEFAULT_YEAR && mo === DEFAULT_MONTH && d === DEFAULT_DAY;
                    if (arguments.length === 3 || (arguments.length > 3 && isNullDate)) {
                        this.isTimezoneIndependent = true;
                        timestamp = Date.UTC(y, mo, d, h, m, s, ms);
                    }
                    else {
                        timestamp = new Date(y, mo, d, h, m, s, ms).getTime();
                    }
                }
            }
            if (!isNaN(timestamp)) {
                var minDate = this.nativeDefaultDate(this.isTimezoneIndependent).getTime();
                var maxDate = this.isTimezoneIndependent
                    ? Date.UTC(3000, 11, 31, 23, 59, 59, 0)
                    : new Date(3000, 11, 31, 23, 59, 59, 0).getTime();
                if (timestamp >= minDate && timestamp <= maxDate) {
                    this.date = timestamp !== minDate ? new Date(timestamp) : null;
                    this.invalid = false;
                }
            }
        }
        Object.defineProperty(DateTimeNew, "defaultValue", {
            get: function () {
                return DateTimeNew.defaultValueField;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "isInvalid", {
            get: function () {
                return this.invalid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "getDate", {
            get: function () {
                return this.toNative();
            },
            enumerable: false,
            configurable: true
        });
        DateTimeNew.prototype.nativeDefaultDate = function (inUtc) {
            if (inUtc === void 0) { inUtc = false; }
            if (inUtc) {
                return new Date(Date.UTC(DEFAULT_YEAR, DEFAULT_MONTH, DEFAULT_DAY, DEFAULT_HOURS, DEFAULT_MINUTES, DEFAULT_SECONDS, DEFAULT_MILLISECONDS));
            }
            return new Date(DEFAULT_YEAR, DEFAULT_MONTH, DEFAULT_DAY, DEFAULT_HOURS, DEFAULT_MINUTES, DEFAULT_SECONDS, DEFAULT_MILLISECONDS);
        };
        Object.defineProperty(DateTimeNew.prototype, "isDefault", {
            get: function () {
                return this.date === null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "year", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_YEAR;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCFullYear();
                }
                return this.date.getFullYear();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "month", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_MONTH + 1;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCMonth() + 1;
                }
                return this.date.getMonth() + 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "day", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_DAY;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCDate();
                }
                return this.date.getDate();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "hours", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_HOURS;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCHours();
                }
                return this.date.getHours();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "minutes", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_MINUTES;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCMinutes();
                }
                return this.date.getMinutes();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "seconds", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_SECONDS;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCSeconds();
                }
                return this.date.getSeconds();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "milliseconds", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_MILLISECONDS;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCMilliseconds();
                }
                return this.date.getMilliseconds();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DateTimeNew.prototype, "weekDay", {
            get: function () {
                if (this.isDefault) {
                    return DEFAULT_WEEKDAY;
                }
                if (this.isTimezoneIndependent) {
                    return this.date.getUTCDay();
                }
                return this.date.getDay();
            },
            enumerable: false,
            configurable: true
        });
        DateTimeNew.prototype.addYears = function (years) {
            var dt = new DateTimeNew(this.year + years, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);
            if (this.month === 2 && this.day === 29 && dt.month === 3) {
                return new DateTimeNew(dt.year, 2, 28, dt.hours, dt.minutes, dt.seconds, dt.milliseconds);
            }
            return dt;
        };
        DateTimeNew.prototype.daysInMonth = function (month, year) {
            return new Date(year, month, 0).getDate();
        };
        DateTimeNew.prototype.addMonths = function (months) {
            var dt = new DateTimeNew(this.year, this.month + months, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);
            if (dt.day === this.day) {
                return dt;
            }
            return new DateTimeNew(dt.year, dt.month - 1, this.daysInMonth(dt.month - 1, dt.year), dt.hours, dt.minutes, dt.seconds, dt.milliseconds);
        };
        DateTimeNew.prototype.addDays = function (days) {
            return new DateTimeNew(this.year, this.month, this.day + days, this.hours, this.minutes, this.seconds, this.milliseconds);
        };
        DateTimeNew.prototype.addHours = function (hours) {
            return new DateTimeNew(this.year, this.month, this.day, this.hours + hours, this.minutes, this.seconds, this.milliseconds);
        };
        DateTimeNew.prototype.addMinutes = function (minutes) {
            return new DateTimeNew(this.year, this.month, this.day, this.hours, this.minutes + minutes, this.seconds, this.milliseconds);
        };
        DateTimeNew.prototype.addSeconds = function (seconds) {
            return new DateTimeNew(this.year, this.month, this.day, this.hours, this.minutes, this.seconds + seconds, this.milliseconds);
        };
        DateTimeNew.prototype.addMilliseconds = function (milliseconds) {
            return new DateTimeNew(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds + milliseconds);
        };
        DateTimeNew.prototype.equals = function (other) {
            return !!other && this.getTime() === other.getTime();
        };
        DateTimeNew.prototype.eq = function (other) {
            return this.equals(other);
        };
        DateTimeNew.prototype.greaterThan = function (other) {
            return this.getDate > other.getDate;
        };
        DateTimeNew.prototype.gt = function (other) {
            return this.greaterThan(other);
        };
        DateTimeNew.prototype.greaterThanOrEqualTo = function (other) {
            return this.getDate >= other.getDate;
        };
        DateTimeNew.prototype.gte = function (other) {
            return this.greaterThanOrEqualTo(other);
        };
        DateTimeNew.prototype.lessThan = function (other) {
            return this.getDate < other.getDate;
        };
        DateTimeNew.prototype.lt = function (other) {
            return this.lessThan(other);
        };
        DateTimeNew.prototype.lessThanOrEqualTo = function (other) {
            return this.getDate <= other.getDate;
        };
        DateTimeNew.prototype.lte = function (other) {
            return this.lessThanOrEqualTo(other);
        };
        DateTimeNew.prototype.toNative = function () {
            if (this.isDefault) {
                return this.nativeDefaultDate();
            }
            if (this.isTimezoneIndependent) {
                return new Date(this.year, this.month - 1, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);
            }
            return new Date(this.date.getTime());
        };
        DateTimeNew.prototype.getTime = function () {
            return this.toNative().getTime();
        };
        DateTimeNew.prototype.valueOf = function () {
            return this.toNative().valueOf();
        };
        DateTimeNew.fromISODate = function (value) {
            var valid = DateTimeConstants.RFC3339_DATEPART.test(value);
            if (valid) {
                return DateTimeNew.internalFromUTCWithoutConversion(value + "T00:00:00Z", true);
            }
            return DateTimeConstants.DEFAULT_DATE;
        };
        DateTimeNew.prototype.toISODate = function () {
            return this.toString(DateTimeConstants.RFC3339_DATEPART_FORMAT);
        };
        DateTimeNew.fromISOTime = function (value) {
            var valid = DateTimeConstants.RFC3339_TIMEPART.test(value);
            if (valid) {
                return DateTimeNew.internalFromUTCWithoutConversion("1900-01-01T" + value + "Z");
            }
            return DateTimeConstants.DEFAULT_TIME;
        };
        DateTimeNew.prototype.toISOTime = function () {
            return this.toString(DateTimeConstants.RFC3339_TIMEPART_FORMAT);
        };
        DateTimeNew.fromISODateTime = function (value) {
            value = value || "";
            if (value === "" || (value.indexOf("1900-01-01") >= 0 && value.indexOf("00:00:00") >= 0)) {
                return DateTimeConstants.DEFAULT_DATETIME;
            }
            var rxTimezone = /([+\-]\d{2}((:\d{2})|(\d{2})?)|Z)$/;
            if (value.indexOf("T") > 0 && !rxTimezone.test(value)) {
                return DateTimeNew.internalFromUTCWithoutConversion(value.trim() + "Z");
            }
            value = value.replace(/([+-]\d{2})$/, function fun(x) {
                return x + "00";
            });
            var parsedDate = Date.parse(value);
            return new DateTimeNew(parsedDate);
        };
        DateTimeNew.internalFromUTCWithoutConversion = function (value, isDate) {
            if (isDate === void 0) { isDate = false; }
            var parsedDate = Date.parse(value);
            var dateInUTC = new Date(parsedDate);
            if (isDate) {
                return new DateTimeNew(dateInUTC.getUTCFullYear(), dateInUTC.getUTCMonth() + 1, dateInUTC.getUTCDate());
            }
            else {
                return new DateTimeNew(dateInUTC.getUTCFullYear(), dateInUTC.getUTCMonth() + 1, dateInUTC.getUTCDate(), dateInUTC.getUTCHours(), dateInUTC.getUTCMinutes(), dateInUTC.getUTCSeconds(), dateInUTC.getUTCMilliseconds());
            }
        };
        DateTimeNew.prototype.toDBDateTime = function () {
            if (this.isDefault) {
                return "1900-01-01 00:00:00";
            }
            var nativeDateTime = this.toNative();
            return (maskValue(nativeDateTime.getUTCFullYear(), "0000") +
                "-" +
                maskValue(nativeDateTime.getUTCMonth() + 1, "00") +
                "-" +
                maskValue(nativeDateTime.getUTCDate(), "00") +
                " " +
                maskValue(nativeDateTime.getUTCHours(), "00") +
                ":" +
                maskValue(nativeDateTime.getUTCMinutes(), "00") +
                ":" +
                maskValue(nativeDateTime.getUTCSeconds(), "00"));
        };
        DateTimeNew.fromDBDateTime = function (value) {
            return DateTimeNew.fromISODateTime(value.replace(" ", "T").trim() + "Z");
        };
        DateTimeNew.prototype.getMillisecondsString = function () {
            return (this.milliseconds / 1000).toFixed(3).substring(2, 5);
        };
        DateTimeNew.prototype.getTimezoneOffset = function () {
            if (this.isDefault) {
                return this.nativeDefaultDate().getTimezoneOffset();
            }
            return this.date.getTimezoneOffset();
        };
        DateTimeNew.prototype.toString = function (format) {
            var _this = this;
            if (arguments.length === 0) {
                if (this.isDefault) {
                    return "1900-01-01T00:00:00";
                }
                else {
                    return this.date.toISOString();
                }
            }
            return format.replace(/(\\.)|dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|ff?f?|FF?F?|\.FF?F?|tt?|zz?z?/g, function (f) {
                if (f.indexOf("\\") === 0) {
                    return f.substring(1);
                }
                switch (f) {
                    case "hh":
                    case "h":
                        var normalizedHours = _this.hours < 13 ? _this.hours : _this.hours - 12;
                        return Format_1.DateTimeFormatInfo.padLeadingZeros((_this.hours === 0 ? 12 : normalizedHours).toString(), f.length);
                    case "HH":
                    case "H":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.hours.toString(), f.length);
                    case "mm":
                    case "m":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.minutes.toString(), f.length);
                    case "ss":
                    case "s":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.seconds.toString(), f.length);
                    case "fff":
                        return _this.getMillisecondsString();
                    case "ff":
                        return _this.getMillisecondsString().substring(0, 2);
                    case "f":
                        return _this.getMillisecondsString().substring(0, 1);
                    case ".FFF":
                    case ".FF":
                    case ".F":
                        return _this.milliseconds === 0
                            ? ""
                            : "." + Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString());
                    case "FFF":
                        return Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString());
                    case "FF":
                        return Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString()).substring(0, 2);
                    case "F":
                        return Format_1.DateTimeFormatInfo.removeTrailingZeros(_this.getMillisecondsString()).substring(0, 1);
                    case "yyyy":
                    case "yyy":
                        var year = _this.year.toString();
                        if (year.charAt(0) === "0") {
                            return _this.year.toString().substring(1);
                        }
                        return year;
                    case "yy":
                        return _this.year.toString().substring(2, 4);
                    case "y":
                        return Number(_this.year.toString().substring(2, 4)).toString();
                    case "dddd":
                        return Format_1.DateTimeFormatInfo.getDayName(_this.weekDay);
                    case "ddd":
                        return Format_1.DateTimeFormatInfo.getShortDayName(_this.weekDay);
                    case "dd":
                    case "d":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.day.toString(), f.length);
                    case "MMMM":
                        return Format_1.DateTimeFormatInfo.getMonthName(_this.month);
                    case "MMM":
                        return Format_1.DateTimeFormatInfo.getShortMonthName(_this.month);
                    case "MM":
                    case "M":
                        return Format_1.DateTimeFormatInfo.padLeadingZeros(_this.month.toString(), f.length);
                    case "t":
                        return Format_1.DateTimeFormatInfo.get12HourNotation(_this.hours).substring(0, 1);
                    case "tt":
                        return Format_1.DateTimeFormatInfo.get12HourNotation(_this.hours);
                    case "zzz":
                        return Format_1.DateTimeFormatInfo.getTimezoneInformationFull(_this.getTimezoneOffset());
                    case "zz":
                        return Format_1.DateTimeFormatInfo.getTimezoneInformationHoursFull(_this.getTimezoneOffset());
                    case "z":
                        return Format_1.DateTimeFormatInfo.getTimezoneInformationHoursShort(_this.getTimezoneOffset());
                    default:
                        return f;
                }
            });
        };
        DateTimeNew.defaultValueField = new DateTimeNew();
        return DateTimeNew;
    }());
    function maskValue(value, mask) {
        var length = mask.length;
        var strValue = value.toString();
        return mask.substr(0, Math.max(0, length - strValue.length)) + strValue;
    }
    var dateTimeRevamp = (0, Settings_1.getEnvParams)().DateTimeRevamp;
    exports.DateTime = dateTimeRevamp ? DateTimeNew : DateTimeLegacy;
    var DateTimeConstants;
    (function (DateTimeConstants) {
        DateTimeConstants.RFC3339_TIMEPART = /^([01][0-9]|2[0-3]):([0-5][0-9])(:[0-5][0-9](\.\d+)?)?$/;
        DateTimeConstants.RFC3339_DATEPART = /^\d{4,}-(0\d|1[012])-([0-2]\d|3[01])$/;
        DateTimeConstants.RFC3339_TIMEPART_FORMAT = "HH:mm:ss";
        DateTimeConstants.RFC3339_DATEPART_FORMAT = "yyyy-MM-dd";
        DateTimeConstants.MIN_DATE_VALUE = dateTimeRevamp
            ? new exports.DateTime(DEFAULT_YEAR, DEFAULT_MONTH + 1, DEFAULT_DAY)
            : new exports.DateTime(1753, 1, 1);
        DateTimeConstants.MAX_DATE_VALUE = dateTimeRevamp ? new exports.DateTime(3000, 12, 31) : new exports.DateTime(9999, 12, 31);
        DateTimeConstants.MIN_DATETIME_VALUE = dateTimeRevamp
            ? exports.DateTime.defaultValue
            : new exports.DateTime(1753, 1, 1, 0, 0, 0);
        DateTimeConstants.MAX_DATETIME_VALUE = dateTimeRevamp
            ? new exports.DateTime(3000, 12, 31, 23, 59, 59, 0)
            : new exports.DateTime(9999, 12, 31, 23, 59, 59);
        DateTimeConstants.ISO_DATE_FORMAT_REGEXP = /^\d{4,}-(0\d|1[012])-([0-2]\d|3[01])([T ]\d{2}:\d{2}(:\d{2}(\.\d+)?(([+\-]\d{2}((:\d{2})|(\d{2})?))|Z)?)?)?$/i;
        DateTimeConstants.DEFAULT_DATETIME = exports.DateTime.defaultValue;
        DateTimeConstants.DEFAULT_DATE = dateTimeRevamp
            ? new exports.DateTime(DEFAULT_YEAR, DEFAULT_MONTH + 1, DEFAULT_DAY)
            : exports.DateTime.defaultValue;
        DateTimeConstants.DEFAULT_TIME = dateTimeRevamp
            ? new exports.DateTime(DEFAULT_YEAR, DEFAULT_MONTH + 1, DEFAULT_DAY, DEFAULT_HOURS, DEFAULT_MINUTES, DEFAULT_SECONDS)
            : exports.DateTime.defaultValue;
    })(DateTimeConstants || (exports.DateTimeConstants = DateTimeConstants = {}));
});
//# sourceMappingURL=DateTime.js.map;
!function(n){"use strict";var a,k,e,s,o=9e15,p=1e9,g="0123456789abcdef",t="2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058",r="3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789",u={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-o,maxE:o,crypto:!1},N=!0,c="[DecimalError] ",m=c+"Invalid argument: ",C=c+"Precision limit exceeded",I=c+"crypto unavailable",i="[object Decimal]",A=Math.floor,w=Math.pow,H=/^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,B=/^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,V=/^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,$=/^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,S=1e7,Z=7,j=t.length-1,d=r.length-1,f={toStringTag:i};function b(n){var e,i,t,r=n.length-1,s="",o=n[0];if(0<r){for(s+=o,e=1;e<r;e++)t=n[e]+"",(i=Z-t.length)&&(s+=h(i)),s+=t;o=n[e],(i=Z-(t=o+"").length)&&(s+=h(i))}else if(0===o)return"0";for(;o%10==0;)o/=10;return s+o}function v(n,e,i){if(n!==~~n||n<e||i<n)throw Error(m+n)}function E(n,e,i,t){for(var r,s,o=n[0];10<=o;o/=10)--e;return--e<0?(e+=Z,r=0):(r=Math.ceil((e+1)/Z),e%=Z),o=w(10,Z-e),s=n[r]%o|0,null==t?e<3?(0==e?s=s/100|0:1==e&&(s=s/10|0),i<4&&99999==s||3<i&&49999==s||5e4==s||0==s):(i<4&&s+1==o||3<i&&s+1==o/2)&&(n[r+1]/o/100|0)==w(10,e-2)-1||(s==o/2||0==s)&&0==(n[r+1]/o/100|0):e<4?(0==e?s=s/1e3|0:1==e?s=s/100|0:2==e&&(s=s/10|0),(t||i<4)&&9999==s||!t&&3<i&&4999==s):((t||i<4)&&s+1==o||!t&&3<i&&s+1==o/2)&&(n[r+1]/o/1e3|0)==w(10,e-3)-1}function x(n,e,i){for(var t,r,s=[0],o=0,u=n.length;o<u;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=g.indexOf(n.charAt(o++)),t=0;t<s.length;t++)i-1<s[t]&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}f.absoluteValue=f.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),_(n)},f.ceil=function(){return _(new this.constructor(this),this.e+1,2)},f.clampedTo=f.clamp=function(n,e){var i=this.constructor;if(n=new i(n),e=new i(e),!n.s||!e.s)return new i(NaN);if(n.gt(e))throw Error(m+e);return this.cmp(n)<0?n:0<this.cmp(e)?e:new i(this)},f.comparedTo=f.cmp=function(n){var e,i,t=this,r=t.d,s=(n=new t.constructor(n)).d,o=t.s,u=n.s;if(!r||!s)return o&&u?o!==u?o:r===s?0:!r^o<0?1:-1:NaN;if(!r[0]||!s[0])return r[0]?o:s[0]?-u:0;if(o!==u)return o;if(t.e!==n.e)return t.e>n.e^o<0?1:-1;for(e=0,i=(u=r.length)<(t=s.length)?u:t;e<i;++e)if(r[e]!==s[e])return r[e]>s[e]^o<0?1:-1;return u===t?0:t<u^o<0?1:-1},f.cosine=f.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+Z,t.rounding=1,i=function(n,e){var i,t;if(!e.isZero()){t=e.d.length,t=t<32?(1/U(4,i=Math.ceil(t/3))).toString():(i=16,"2.3283064365386962890625e-10"),n.precision+=i,e=L(n,1,e.times(t),new n(1));for(var r=i;r--;){var s=e.times(e);e=s.times(s).minus(s).times(8).plus(1)}n.precision-=i}return e}(t,X(t,i)),t.precision=n,t.rounding=e,_(2==s||3==s?i.neg():i,n,e,!0)):new t(1):new t(NaN)},f.cubeRoot=f.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,h=a.constructor;if(!a.isFinite()||a.isZero())return new h(a);for(N=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new h(s.toString()):(i=b(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?"0":"00"),s=w(i,1/3),n=A((n+1)/3)-(n%3==(n<0?-1:2)),(t=new h(i=s==1/0?"5e"+n:(i=s.toExponential()).slice(0,i.indexOf("e")+1)+n)).s=a.s),o=(n=h.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=y(f.plus(a).times(u),f.plus(c),o+2,1),b(u.d).slice(0,o)===(i=b(t.d)).slice(0,o)){if("9999"!=(i=i.slice(o-3,o+1))&&(r||"4999"!=i)){+i&&(+i.slice(1)||"5"!=i.charAt(0))||(_(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(_(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return N=!0,_(t,n,h.rounding,e)},f.decimalPlaces=f.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-A(this.e/Z))*Z,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},f.dividedBy=f.div=function(n){return y(this,new this.constructor(n))},f.dividedToIntegerBy=f.divToInt=function(n){var e=this.constructor;return _(y(this,new e(n),0,1,1),e.precision,e.rounding)},f.equals=f.eq=function(n){return 0===this.cmp(n)},f.floor=function(){return _(new this.constructor(this),this.e+1,3)},f.greaterThan=f.gt=function(n){return 0<this.cmp(n)},f.greaterThanOrEqualTo=f.gte=function(n){n=this.cmp(n);return 1==n||0===n},f.hyperbolicCosine=f.cosh=function(){var n,e,i,t=(u=this).constructor,r=new t(1);if(!u.isFinite())return new t(u.s?1/0:NaN);if(u.isZero())return r;e=t.precision,i=t.rounding,t.precision=e+Math.max(u.e,u.sd())+4,t.rounding=1;for(var s,o=(o=u.d.length)<32?(1/U(4,n=Math.ceil(o/3))).toString():(n=16,"2.3283064365386962890625e-10"),u=L(t,1,u.times(o),new t(1),!0),c=n,f=new t(8);c--;)s=u.times(u),u=r.minus(s.times(f.minus(s.times(f))));return _(u,t.precision=e,t.rounding=i,!0)},f.hyperbolicSine=f.sinh=function(){var n,e,i,t=(o=this).constructor;if(!o.isFinite()||o.isZero())return new t(o);if(n=t.precision,e=t.rounding,t.precision=n+Math.max(o.e,o.sd())+4,t.rounding=1,(i=o.d.length)<3)o=L(t,2,o,o,!0);else for(var r,s=1.4*Math.sqrt(i),o=L(t,2,o=o.times(1/U(5,s=16<s?16:0|s)),o,!0),u=new t(5),c=new t(16),f=new t(20);s--;)r=o.times(o),o=o.times(u.plus(r.times(c.times(r).plus(f))));return _(o,t.precision=n,t.rounding=e,!0)},f.hyperbolicTangent=f.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,y(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},f.inverseCosine=f.acos=function(){var n=this,e=n.constructor,i=n.abs().cmp(1),t=e.precision,r=e.rounding;return-1!==i?0===i?n.isNeg()?D(e,t,r):new e(0):new e(NaN):n.isZero()?D(e,t+4,r).times(.5):(e.precision=t+6,e.rounding=1,n=n.asin(),i=D(e,t+4,r).times(.5),e.precision=t,e.rounding=r,i.minus(n))},f.inverseHyperbolicCosine=f.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,N=!1,i=i.times(i).minus(1).sqrt().plus(i),N=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},f.inverseHyperbolicSine=f.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,N=!1,i=i.times(i).plus(1).sqrt().plus(i),N=!0,t.precision=n,t.rounding=e,i.ln())},f.inverseHyperbolicTangent=f.atanh=function(){var n,e,i,t=this,r=t.constructor;return t.isFinite()?0<=t.e?new r(t.abs().eq(1)?t.s/0:t.isZero()?t:NaN):(n=r.precision,e=r.rounding,i=t.sd(),Math.max(i,n)<2*-t.e-1?_(new r(t),n,e,!0):(r.precision=i=i-t.e,t=y(t.plus(1),new r(1).minus(t),i+n,1),r.precision=n+4,r.rounding=1,t=t.ln(),r.precision=n,r.rounding=e,t.times(.5))):new r(NaN)},f.inverseSine=f.asin=function(){var n,e,i,t=this,r=t.constructor;return t.isZero()?new r(t):(n=t.abs().cmp(1),e=r.precision,i=r.rounding,-1!==n?0===n?((n=D(r,e+4,i).times(.5)).s=t.s,n):new r(NaN):(r.precision=e+6,r.rounding=1,t=t.div(new r(1).minus(t.times(t)).sqrt().plus(1)).atan(),r.precision=e,r.rounding=i,t.times(2)))},f.inverseTangent=f.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,h=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&h+4<=d)return(o=D(a,h+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(h+4<=d)return(o=D(a,h+4,l).times(.5)).s=f.s,o}for(a.precision=u=h+10,a.rounding=1,n=i=Math.min(28,u/Z+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(N=!1,e=Math.ceil(u/Z),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),N=!0,_(o,a.precision=h,a.rounding=l,!0)},f.isFinite=function(){return!!this.d},f.isInteger=f.isInt=function(){return!!this.d&&A(this.e/Z)>this.d.length-2},f.isNaN=function(){return!this.s},f.isNegative=f.isNeg=function(){return this.s<0},f.isPositive=f.isPos=function(){return 0<this.s},f.isZero=function(){return!!this.d&&0===this.d[0]},f.lessThan=f.lt=function(n){return this.cmp(n)<0},f.lessThanOrEqualTo=f.lte=function(n){return this.cmp(n)<1},f.logarithm=f.log=function(n){var e,i,t,r,s,o,u,c,f=this,a=f.constructor,h=a.precision,l=a.rounding;if(null==n)n=new a(10),e=!0;else{if(i=(n=new a(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new a(NaN);e=n.eq(10)}if(i=f.d,f.s<0||!i||!i[0]||f.eq(1))return new a(i&&!i[0]?-1/0:1!=f.s?NaN:i?0:1/0);if(e)if(1<i.length)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(N=!1,o=F(f,u=h+5),t=e?O(a,u+10):F(n,u),E((c=y(o,t,u,1)).d,r=h,l))do{if(o=F(f,u+=10),t=e?O(a,u+10):F(n,u),c=y(o,t,u,1),!s){+b(c.d).slice(r+1,r+15)+1==1e14&&(c=_(c,h+1,0));break}}while(E(c.d,r+=10,l));return N=!0,_(c,h,l)},f.minus=f.sub=function(n){var e,i,t,r,s,o,u,c,f,a,h,l,d=this,p=d.constructor;if(n=new p(n),!d.d||!n.d)return d.s&&n.s?d.d?n.s=-n.s:n=new p(n.d||d.s!==n.s?d:NaN):n=new p(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.plus(n);if(f=d.d,l=n.d,u=p.precision,c=p.rounding,f[0]&&l[0]){if(i=A(n.e/Z),a=A(d.e/Z),f=f.slice(),s=a-i){for(o=((h=s<0)?(e=f,s=-s,l):(e=l,i=a,f)).length,(t=Math.max(Math.ceil(u/Z),o)+2)<s&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((h=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){h=f[t]<l[t];break}s=0}for(h&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;0<t;--t)f[o++]=0;for(t=l.length;s<t;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=S-1;--f[r],f[t]+=S}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;if(!f[0])return new p(3===c?-0:0);n.d=f,n.e=q(f,i)}else if(l[0])n.s=-n.s;else{if(!f[0])return new p(3===c?-0:0);n=new p(d)}return N?_(n,u,c):n},f.modulo=f.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?_(new t(i),t.precision,t.rounding):(N=!1,9==t.modulo?(e=y(i,n.abs(),0,3,1)).s*=n.s:e=y(i,n,0,t.modulo,1),e=e.times(n),N=!0,i.minus(e))},f.naturalExponential=f.exp=function(){return l(this)},f.naturalLogarithm=f.ln=function(){return F(this)},f.negated=f.neg=function(){var n=new this.constructor(this);return n.s=-n.s,_(n)},f.plus=f.add=function(n){var e,i,t,r,s,o,u,c,f,a,h=this,l=h.constructor;if(n=new l(n),!h.d||!n.d)return h.s&&n.s?h.d||(n=new l(n.d||h.s===n.s?h:NaN)):n=new l(NaN),n;if(h.s!=n.s)return n.s=-n.s,h.minus(n);if(f=h.d,a=n.d,u=l.precision,c=l.rounding,f[0]&&a[0]){if(s=A(h.e/Z),t=A(n.e/Z),f=f.slice(),r=s-t){for((o=(o=(r<0?(i=f,r=-r,a):(i=a,t=s,f)).length)<(s=Math.ceil(u/Z))?s+1:o+1)<r&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/S|0,f[r]%=S;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();n.d=f,n.e=q(f,t)}else a[0]||(n=new l(h));return N?_(n,u,c):n},f.precision=f.sd=function(n){var e;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(m+n);return this.d?(e=W(this.d),n&&this.e+1>e&&(e=this.e+1)):e=NaN,e},f.round=function(){var n=this.constructor;return _(new n(this),this.e+1,n.rounding)},f.sine=f.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+Z,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return e.isZero()?e:L(n,2,e,e);i=16<(i=1.4*Math.sqrt(t))?16:0|i,e=e.times(1/U(5,i)),e=L(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,X(t,i)),t.precision=n,t.rounding=e,_(2<s?i.neg():i,n,e,!0)):new t(NaN)},f.squareRoot=f.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(N=!1,t=0==(f=Math.sqrt(+o))||f==1/0?(((e=b(u)).length+c)%2==0&&(e+="0"),f=Math.sqrt(e),c=A((c+1)/2)-(c<0||c%2),new a(e=f==1/0?"5e"+c:(e=f.toExponential()).slice(0,e.indexOf("e")+1)+c)):new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(y(o,s,i+2,1)).times(.5),b(s.d).slice(0,i)===(e=b(t.d)).slice(0,i)){if("9999"!=(e=e.slice(i-3,i+1))&&(r||"4999"!=e)){+e&&(+e.slice(1)||"5"!=e.charAt(0))||(_(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(_(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return N=!0,_(t,c,a.rounding,n)},f.tangent=f.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=y(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,_(2==s||4==s?i.neg():i,n,e,!0)):new t(NaN)},f.times=f.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this.constructor,h=this.d,l=(n=new a(n)).d;if(n.s*=this.s,!(h&&h[0]&&l&&l[0]))return new a(!n.s||h&&!h[0]&&!l||l&&!l[0]&&!h?NaN:h&&l?0*n.s:n.s/0);for(i=A(this.e/Z)+A(n.e/Z),(c=h.length)<(f=l.length)&&(s=h,h=l,l=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;0<=--t;){for(e=0,r=c+t;t<r;)u=s[r]+l[t]*h[r-t-1]+e,s[r--]=u%S|0,e=u/S|0;s[r]=(s[r]+e)%S|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=q(s,i),N?_(n,a.precision,a.rounding):n},f.toBinary=function(n,e){return Y(this,2,n,e)},f.toDecimalPlaces=f.toDP=function(n,e){var i=this.constructor,t=new i(this);return void 0===n?t:(v(n,0,p),void 0===e?e=i.rounding:v(e,0,8),_(t,n+t.e+1,e))},f.toExponential=function(n,e){var i=this,t=i.constructor,t=void 0===n?M(i,!0):(v(n,0,p),void 0===e?e=t.rounding:v(e,0,8),M(i=_(new t(i),n+1,e),!0,n+1));return i.isNeg()&&!i.isZero()?"-"+t:t},f.toFixed=function(n,e){var i=this,t=i.constructor,e=void 0===n?M(i):(v(n,0,p),void 0===e?e=t.rounding:v(e,0,8),M(t=_(new t(i),n+i.e+1,e),!1,n+t.e+1));return i.isNeg()&&!i.isZero()?"-"+e:e},f.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,h=this,l=h.d,d=h.constructor;if(!l)return new d(h);if(c=i=new d(1),t=u=new d(0),s=(e=new d(t)).e=W(l)-h.e-1,e.d[0]=w(10,(f=s%Z)<0?Z+f:f),null==n)n=0<s?e:c;else{if(!(o=new d(n)).isInt()||o.lt(c))throw Error(m+o);n=o.gt(e)?0<s?e:c:o}for(N=!1,o=new d(b(l)),f=d.precision,d.precision=s=l.length*Z*2;a=y(o,e,0,1,1),1!=(r=i.plus(a.times(t))).cmp(n);)i=t,t=r,r=c,c=u.plus(a.times(r)),u=r,r=e,e=o.minus(a.times(r)),o=r;return r=y(n.minus(i),t,0,1,1),u=u.plus(r.times(c)),i=i.plus(r.times(t)),u.s=c.s=h.s,l=y(c,t,s,1).minus(h).abs().cmp(y(u,i,s,1).minus(h).abs())<1?[c,t]:[u,i],d.precision=f,N=!0,l},f.toHexadecimal=f.toHex=function(n,e){return Y(this,16,n,e)},f.toNearest=function(n,e){var i=(t=this).constructor,t=new i(t);if(null==n){if(!t.d)return t;n=new i(1),e=i.rounding}else{if(n=new i(n),void 0===e?e=i.rounding:v(e,0,8),!t.d)return n.s?t:n;if(!n.d)return n.s&&(n.s=t.s),n}return n.d[0]?(N=!1,t=y(t,n,0,e,1).times(n),N=!0,_(t)):(n.s=t.s,t=n),t},f.toNumber=function(){return+this},f.toOctal=function(n,e){return Y(this,8,n,e)},f.toPower=f.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return _(u,t,s);if((e=A(n.e/Z))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=J(c,u,i,t),n.s<0?new c(1).div(r):_(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+"").e:A(f*(Math.log("0."+b(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(0<e?o/0:0):(N=!1,c.rounding=u.s=1,i=Math.min(12,(e+"").length),(r=(r=l(n.times(F(u,t+i)),t)).d&&E((r=_(r,t+5,1)).d,t,s)&&+b((r=_(l(n.times(F(u,(e=t+10)+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14?_(r,t+1,0):r).s=o,N=!0,_(r,t,c.rounding=s))},f.toPrecision=function(n,e){var i=this,t=i.constructor,e=void 0===n?M(i,i.e<=t.toExpNeg||i.e>=t.toExpPos):(v(n,1,p),void 0===e?e=t.rounding:v(e,0,8),M(i=_(new t(i),n,e),n<=i.e||i.e<=t.toExpNeg,n));return i.isNeg()&&!i.isZero()?"-"+e:e},f.toSignificantDigits=f.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(v(n,1,p),void 0===e?e=i.rounding:v(e,0,8)),_(new i(this),n,e)},f.toString=function(){var n=this,e=n.constructor,e=M(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?"-"+e:e},f.truncated=f.trunc=function(){return _(new this.constructor(this),this.e+1,1)},f.valueOf=f.toJSON=function(){var n=this,e=n.constructor,e=M(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?"-"+e:e};var y=function(n,e,i,t,r,s){var o,u,c,f,a,h,l,d,p,g,m,w,v,N,b,E,x,y,M,q=n.constructor,O=n.s==e.s?1:-1,D=n.d,F=e.d;if(!(D&&D[0]&&F&&F[0]))return new q(n.s&&e.s&&(D?!F||D[0]!=F[0]:F)?D&&0==D[0]||!F?0*O:O/0:NaN);for(u=s?(a=1,n.e-e.e):(s=S,A(n.e/(a=Z))-A(e.e/a)),y=F.length,E=D.length,p=(O=new q(O)).d=[],c=0;F[c]==(D[c]||0);c++);if(F[c]>(D[c]||0)&&u--,null==i?(v=i=q.precision,t=q.rounding):v=r?i+(n.e-e.e)+1:i,v<0)p.push(1),h=!0;else{if(v=v/a+2|0,c=0,1==y){for(F=F[f=0],v++;(c<E||f)&&v--;c++)N=f*s+(D[c]||0),p[c]=N/F|0,f=N%F|0;h=f||c<E}else{for(1<(f=s/(F[0]+1)|0)&&(F=P(F,f,s),D=P(D,f,s),y=F.length,E=D.length),b=y,m=(g=D.slice(0,y)).length;m<y;)g[m++]=0;for((M=F.slice()).unshift(0),x=F[0],F[1]>=s/2&&++x;f=0,(o=R(F,g,y,m))<0?(w=g[0],1<(f=(w=y!=m?w*s+(g[1]||0):w)/x|0)?1==(o=R(l=P(F,f=s<=f?s-1:f,s),g,d=l.length,m=g.length))&&(f--,T(l,y<d?M:F,d,s)):(0==f&&(o=f=1),l=F.slice()),(d=l.length)<m&&l.unshift(0),T(g,l,m,s),-1==o&&(o=R(F,g,y,m=g.length))<1&&(f++,T(g,y<m?M:F,m,s)),m=g.length):0===o&&(f++,g=[0]),p[c++]=f,o&&g[0]?g[m++]=D[b]||0:(g=[D[b]],m=1),(b++<E||void 0!==g[0])&&v--;);h=void 0!==g[0]}p[0]||p.shift()}if(1==a)O.e=u,k=h;else{for(c=1,f=p[0];10<=f;f/=10)c++;O.e=c+u*a-1,_(O,r?i+O.e+1:i,t,h)}return O};function P(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function R(n,e,i,t){var r,s;if(i!=t)s=t<i?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function T(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&1<n.length;)n.shift()}function _(n,e,i,t){var r,s,o,u,c,f,a,h,l=n.constructor;n:if(null!=e){if(!(a=n.d))return n;for(r=1,u=a[0];10<=u;u/=10)r++;if((s=e-r)<0)s+=Z,o=e,c=(f=a[h=0])/w(10,r-o-1)%10|0;else if(h=Math.ceil((s+1)/Z),(u=a.length)<=h){if(!t)break n;for(;u++<=h;)a.push(0);f=c=0,o=(s%=Z)-Z+(r=1)}else{for(f=u=a[h],r=1;10<=u;u/=10)r++;c=(o=(s%=Z)-Z+r)<0?0:f/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==a[h+1]||(o<0?f:f%w(10,r-o-1)),c=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):5<c||5==c&&(4==i||t||6==i&&(0<s?0<o?f/w(10,r-o):0:a[h-1])%10&1||i==(n.s<0?8:7)),e<1||!a[0])return a.length=0,c?(e-=n.e+1,a[0]=w(10,(Z-e%Z)%Z),n.e=-e||0):a[0]=n.e=0,n;if(0==s?(a.length=h,u=1,h--):(a.length=h+1,u=w(10,Z-s),a[h]=0<o?(f/w(10,r-o)%w(10,o)|0)*u:0),c)for(;;){if(0==h){for(s=1,o=a[0];10<=o;o/=10)s++;for(o=a[0]+=u,u=1;10<=o;o/=10)u++;s!=u&&(n.e++,a[0]==S)&&(a[0]=1);break}if(a[h]+=u,a[h]!=S)break;a[h--]=0,u=1}for(s=a.length;0===a[--s];)a.pop()}return N&&(n.e>l.maxE?(n.d=null,n.e=NaN):n.e<l.minE&&(n.e=0,n.d=[0])),n}function M(n,e,i){var t,r,s,o;return n.isFinite()?(r=n.e,o=(s=b(n.d)).length,e?(i&&0<(t=i-o)?s=s.charAt(0)+"."+s.slice(1)+h(t):1<o&&(s=s.charAt(0)+"."+s.slice(1)),s=s+(n.e<0?"e":"e+")+n.e):r<0?(s="0."+h(-r-1)+s,i&&0<(t=i-o)&&(s+=h(t))):o<=r?(s+=h(r+1-o),i&&0<(t=i-r-1)&&(s=s+"."+h(t))):((t=r+1)<o&&(s=s.slice(0,t)+"."+s.slice(t)),i&&0<(t=i-o)&&(r+1===o&&(s+="."),s+=h(t))),s):K(n)}function q(n,e){var i=n[0];for(e*=Z;10<=i;i/=10)e++;return e}function O(n,e,i){if(j<e)throw N=!0,i&&(n.precision=i),Error(C);return _(new n(t),e,1,!0)}function D(n,e,i){if(d<e)throw Error(C);return _(new n(r),e,i,!0)}function W(n){var e=n.length-1,i=e*Z+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];10<=e;e/=10)i++}return i}function h(n){for(var e="";n--;)e+="0";return e}function J(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/Z+4);for(N=!1;;){if(i%2&&nn((s=s.times(e)).d,o)&&(r=!0),0===(i=A(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}nn((e=e.times(e)).d,o)}return N=!0,s}function z(n){return 1&n.d[n.d.length-1]}function G(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function l(n,e){var i,t,r,s,o,u,c,f=0,a=0,h=0,l=n.constructor,d=l.rounding,p=l.precision;if(!n.d||!n.d[0]||17<n.e)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(c=null==e?(N=!1,p):e,u=new l(.03125);-2<n.e;)n=n.times(u),h+=5;for(c+=t=Math.log(w(2,h))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=_(s.times(n),c,1),i=i.times(++a),b((u=o.plus(y(s,i,c,1))).d).slice(0,c)===b(o.d).slice(0,c)){for(r=h;r--;)o=_(o.times(o),c,1);if(null!=e)return l.precision=p,o;if(!(f<3&&E(o.d,c-t,d,f)))return _(o,l.precision=p,d,N=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function F(n,e){var i,t,r,s,o,u,c,f,a,h,l,d=1,p=n,g=p.d,m=p.constructor,w=m.rounding,v=m.precision;if(p.s<0||!g||!g[0]||!p.e&&1==g[0]&&1==g.length)return new m(g&&!g[0]?-1/0:1!=p.s?NaN:g?0:p);if(a=null==e?(N=!1,v):e,m.precision=a+=10,t=(i=b(g)).charAt(0),!(Math.abs(s=p.e)<15e14))return f=O(m,a+2,v).times(s+""),p=F(new m(t+"."+i.slice(1)),a-10).plus(f),m.precision=v,null==e?_(p,v,w,N=!0):p;for(;t<7&&1!=t||1==t&&3<i.charAt(1);)t=(i=b((p=p.times(n)).d)).charAt(0),d++;for(s=p.e,1<t?(p=new m("0."+i),s++):p=new m(t+"."+i.slice(1)),c=o=p=y((h=p).minus(1),p.plus(1),a,1),l=_(p.times(p),a,1),r=3;;){if(o=_(o.times(l),a,1),b((f=c.plus(y(o,new m(r),a,1))).d).slice(0,a)===b(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(O(m,a+2,v).times(s+""))),c=y(c,new m(d),a,1),null!=e)return m.precision=v,c;if(!E(c.d,a-10,w,u))return _(c,m.precision=v,w,N=!0);m.precision=a+=10,f=o=p=y(h.minus(1),h.plus(1),a,1),l=_(p.times(p),a,1),r=u=1}c=f,r+=2}}function K(n){return String(n.s*n.s/0)}function Q(n,e){var i,t,r;for(0<(t=(e=-1<(i=e.indexOf("."))?e.replace(".",""):e).search(/e/i))?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%Z,i<0&&(t+=Z),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=Z;t<r;)n.d.push(+e.slice(t,t+=Z));e=e.slice(t),t=Z-e.length}else t-=r;for(;t--;)e+="0";n.d.push(+e),N&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function L(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/Z);for(N=!1,c=i.times(i),u=new n(t);;){if(o=y(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=y(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return N=!0,o.d.length=a+1,o}function U(n,e){for(var i=n;--e;)i*=n;return i}function X(n,e){var i,t=e.s<0,n=D(n,n.precision,1),r=n.times(.5);if((e=e.abs()).lte(r))return s=t?4:1,e;if((i=e.divToInt(n)).isZero())s=t?3:2;else{if((e=e.minus(i.times(n))).lte(r))return s=z(i)?t?2:3:t?4:1,e;s=z(i)?t?1:4:t?3:2}return e.minus(n).abs()}function Y(n,e,i,t){var r,s,o,u,c,f,a,h,l=n.constructor,d=void 0!==i;if(d?(v(i,1,p),void 0===t?t=l.rounding:v(t,0,8)):(i=l.precision,t=l.rounding),n.isFinite()){for(d?(r=2,16==e?i=4*i-3:8==e&&(i=3*i-2)):r=e,0<=(o=(f=M(n)).indexOf("."))&&(f=f.replace(".",""),(h=new l(1)).e=f.length-o,h.d=x(M(h),10,r),h.e=h.d.length),s=u=(a=x(f,10,r)).length;0==a[--u];)a.pop();if(a[0]){if(o<0?s--:((n=new l(n)).d=a,n.e=s,a=(n=y(n,h,i,t,0,r)).d,s=n.e,c=k),o=a[i],l=r/2,c=c||void 0!==a[i+1],c=t<4?(void 0!==o||c)&&(0===t||t===(n.s<0?3:2)):l<o||o===l&&(4===t||c||6===t&&1&a[i-1]||t===(n.s<0?8:7)),a.length=i,c)for(;++a[--i]>r-1;)a[i]=0,i||(++s,a.unshift(1));for(u=a.length;!a[u-1];--u);for(o=0,f="";o<u;o++)f+=g.charAt(a[o]);if(d){if(1<u)if(16==e||8==e){for(o=16==e?4:3,--u;u%o;u++)f+="0";for(u=(a=x(f,r,e)).length;!a[u-1];--u);for(o=1,f="1.";o<u;o++)f+=g.charAt(a[o])}else f=f.charAt(0)+"."+f.slice(1);f=f+(s<0?"p":"p+")+s}else if(s<0){for(;++s;)f="0"+f;f="0."+f}else if(++s>u)for(s-=u;s--;)f+="0";else s<u&&(f=f.slice(0,s)+"."+f.slice(s))}else f=d?"0p+0":"0";f=(16==e?"0x":2==e?"0b":8==e?"0o":"")+f}else f=K(n);return n.s<0?"-"+f:f}function nn(n,e){return n.length>e&&(n.length=e,1)}function en(n){return new this(n).abs()}function tn(n){return new this(n).acos()}function rn(n){return new this(n).acosh()}function sn(n,e){return new this(n).plus(e)}function on(n){return new this(n).asin()}function un(n){return new this(n).asinh()}function cn(n){return new this(n).atan()}function fn(n){return new this(n).atanh()}function an(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?D(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=D(this,s,1).times(.5)).s=n.s:i=e.s<0?(this.precision=s,this.rounding=1,i=this.atan(y(n,e,s,1)),e=D(this,s,1),this.precision=t,this.rounding=r,n.s<0?i.minus(e):i.plus(e)):this.atan(y(n,e,s,1)):(i=D(this,s,1).times(0<e.s?.25:.75)).s=n.s:i=new this(NaN),i}function hn(n){return new this(n).cbrt()}function ln(n){return _(n=new this(n),n.e+1,2)}function dn(n,e,i){return new this(n).clamp(e,i)}function pn(n){if(!n||"object"!=typeof n)throw Error(c+"Object expected");for(var e,i,t=!0===n.defaults,r=["precision",1,p,"rounding",0,8,"toExpNeg",-o,0,"toExpPos",0,o,"maxE",0,o,"minE",-o,0,"modulo",0,9],s=0;s<r.length;s+=3)if(e=r[s],t&&(this[e]=u[e]),void 0!==(i=n[e])){if(!(A(i)===i&&r[s+1]<=i&&i<=r[s+2]))throw Error(m+e+": "+i);this[e]=i}if(e="crypto",t&&(this[e]=u[e]),void 0!==(i=n[e])){if(!0!==i&&!1!==i&&0!==i&&1!==i)throw Error(m+e+": "+i);if(i){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(I);this[e]=!0}else this[e]=!1}return this}function gn(n){return new this(n).cos()}function mn(n){return new this(n).cosh()}function wn(n,e){return new this(n).div(e)}function vn(n){return new this(n).exp()}function Nn(n){return _(n=new this(n),n.e+1,3)}function bn(){var n,e,i=new this(0);for(N=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return N=!0,new this(1/0);i=e}return N=!0,i.sqrt()}function En(n){return n instanceof a||n&&n.toStringTag===i||!1}function xn(n){return new this(n).ln()}function yn(n,e){return new this(n).log(e)}function Mn(n){return new this(n).log(2)}function qn(n){return new this(n).log(10)}function On(){return G(this,arguments,"lt")}function Dn(){return G(this,arguments,"gt")}function Fn(n,e){return new this(n).mod(e)}function An(n,e){return new this(n).mul(e)}function Sn(n,e){return new this(n).pow(e)}function Zn(n){var e,i,t,r,s=0,o=new this(1),u=[];if(void 0===n?n=this.precision:v(n,1,p),t=Math.ceil(n/Z),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)429e7<=(r=e[s])?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:u[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(I);for(e=crypto.randomBytes(t*=4);s<t;)214e7<=(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))?crypto.randomBytes(4).copy(e,s):(u.push(r%1e7),s+=4);s=t/4}else for(;s<t;)u[s++]=1e7*Math.random()|0;for(t=u[--s],n%=Z,t&&n&&(r=w(10,Z-n),u[s]=(t/r|0)*r);0===u[s];s--)u.pop();if(s<0)u=[i=0];else{for(i=-1;0===u[0];i-=Z)u.shift();for(t=1,r=u[0];10<=r;r/=10)t++;t<Z&&(i-=Z-t)}return o.e=i,o.d=u,o}function Pn(n){return _(n=new this(n),n.e+1,this.rounding)}function Rn(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Tn(n){return new this(n).sin()}function _n(n){return new this(n).sinh()}function Ln(n){return new this(n).sqrt()}function Un(n,e){return new this(n).sub(e)}function kn(){var n=0,e=arguments,i=new this(e[n]);for(N=!1;i.s&&++n<e.length;)i=i.plus(e[n]);return N=!0,_(i,this.precision,this.rounding)}function Cn(n){return new this(n).tan()}function In(n){return new this(n).tanh()}function Hn(n){return _(n=new this(n),n.e+1,1)}((a=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,!En(n)){if("number"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;10<=i;i/=10)e++;return void(N?s.maxE<e?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):Q(r,n.toString())}if("string"!=t)throw Error(m+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),($.test(n)?Q:function(n,e){var i,t,r,s,o,u,c,f;if(-1<e.indexOf("_")){if(e=e.replace(/(\d)_(?=\d)/g,"$1"),$.test(e))return Q(n,e)}else if("Infinity"===e||"NaN"===e)return+e||(n.s=NaN),n.e=NaN,n.d=null,n;if(B.test(e))i=16,e=e.toLowerCase();else if(H.test(e))i=2;else{if(!V.test(e))throw Error(m+e);i=8}for(s=(e=0<(s=e.search(/p/i))?(c=+e.slice(s+1),e.substring(2,s)):e.slice(2)).indexOf("."),t=n.constructor,(o=0<=s)&&(s=(u=(e=e.replace(".","")).length)-s,r=J(t,new t(i),s,2*s)),s=e=(f=x(e,i,S)).length-1;0===f[s];--s)f.pop();return s<0?new t(0*n.s):(n.e=q(f,e),n.d=f,N=!1,o&&(n=y(n,r,4*u)),c&&(n=n.times(Math.abs(c)<54?w(2,c):a.pow(2,c))),N=!0,n)})(r,n)}r.s=n.s,N?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d&&n.d.slice())}if(s.prototype=f,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=pn,s.clone=n,s.isDecimal=En,s.abs=en,s.acos=tn,s.acosh=rn,s.add=sn,s.asin=on,s.asinh=un,s.atan=cn,s.atanh=fn,s.atan2=an,s.cbrt=hn,s.ceil=ln,s.clamp=dn,s.cos=gn,s.cosh=mn,s.div=wn,s.exp=vn,s.floor=Nn,s.hypot=bn,s.ln=xn,s.log=yn,s.log10=qn,s.log2=Mn,s.max=On,s.min=Dn,s.mod=Fn,s.mul=An,s.pow=Sn,s.random=Zn,s.round=Pn,s.sign=Rn,s.sin=Tn,s.sinh=_n,s.sqrt=Ln,s.sub=Un,s.sum=kn,s.tan=Cn,s.tanh=In,s.trunc=Hn,(e=void 0===e?{}:e)&&!0!==e.defaults)for(r=["precision","rounding","toExpNeg","toExpPos","maxE","minE","modulo","crypto"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(u)).prototype.constructor=a).default=a.Decimal=a,t=new a(t),r=new a(r),"function"==typeof define&&define.amd?define('decimal',[],function(){return a}):"undefined"!=typeof module&&module.exports?("function"==typeof Symbol&&"symbol"==typeof Symbol.iterator&&(f[Symbol.for("nodejs.util.inspect.custom")]=f.toString,f[Symbol.toStringTag]="Decimal"),module.exports=a):(n=n||("undefined"!=typeof self&&self&&self.self==self?self:window),e=n.Decimal,a.noConflict=function(){return n.Decimal=e,a},n.Decimal=a)}(this);
!function(o){"use strict";function e(o){return o.prototype.toFormat=function(o,r,e){if(!this.e&&0!==this.e)return this.toString();var t,i,a,n,p,f,u,c,s,S,d,l,m,g,z,G=this.format||{},y=this.constructor.format||{};if(o!=p?"object"==typeof o?(e=o,o=p):r!=p?"object"==typeof r?(e=r,r=p):"object"!=typeof e&&(e={}):e={}:e={},c=(t=this.toFixed(o,r).split("."))[0],s=t[1],f=(u=this.s<0?c.slice(1):c).length,(S=e.decimalSeparator)==p&&(S=G.decimalSeparator)==p&&(S=y.decimalSeparator)==p&&(S="."),(d=e.groupSeparator)==p&&(d=G.groupSeparator)==p&&(d=y.groupSeparator),d&&((l=e.groupSize)==p&&(l=G.groupSize)==p&&(l=y.groupSize)==p&&(l=0),(m=e.secondaryGroupSize)==p&&(m=G.secondaryGroupSize)==p&&(m=y.secondaryGroupSize)==p&&(m=0),m?(i=+m,f-=a=+l):(i=+l,a=+m),0<i&&0<f)){for(n=f%i||i,c=u.substr(0,n);n<f;n+=i)c+=d+u.substr(n,i);0<a&&(c+=d+u.slice(n)),this.s<0&&(c="-"+c)}return s?((g=e.fractionGroupSeparator)==p&&(g=G.fractionGroupSeparator)==p&&(g=y.fractionGroupSeparator),g&&((z=e.fractionGroupSize)==p&&(z=G.fractionGroupSize)==p&&(z=y.fractionGroupSize)==p&&(z=0),(z=+z)&&(s=s.replace(new RegExp("\\d{"+z+"}\\B","g"),"$&"+g))),c+S+s):c},o.format={decimalSeparator:".",groupSeparator:",",groupSize:3,secondaryGroupSize:0,fractionGroupSeparator:"",fractionGroupSize:0},o}"function"==typeof define&&define.amd?define('toformat',['require','exports','module'],function(o,r){r.default=e}):"undefined"!=typeof module&&module.exports?module.exports=e:(o||(o="undefined"!=typeof self&&self&&self.self==self?self:window),noConflict=o.toFormat,e.noConflict=function(){return o.toFormat=noConflict,e},o.toFormat=e)}(this);
define('OutSystems/ClientRuntime/Decimal',["require", "exports", "decimal", "toformat"], function (require, exports, decimal_1, toformat_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    (0, toformat_1.default)(decimal_1.Decimal);
    var Rounding;
    (function (Rounding) {
        Rounding[Rounding["roundUp"] = 0] = "roundUp";
        Rounding[Rounding["roundDown"] = 1] = "roundDown";
        Rounding[Rounding["roundCeil"] = 2] = "roundCeil";
        Rounding[Rounding["roundFloor"] = 3] = "roundFloor";
        Rounding[Rounding["roundHalfUp"] = 4] = "roundHalfUp";
        Rounding[Rounding["roundHalfDown"] = 5] = "roundHalfDown";
        Rounding[Rounding["roundHalfEven"] = 6] = "roundHalfEven";
        Rounding[Rounding["roundHalfCeil"] = 7] = "roundHalfCeil";
        Rounding[Rounding["roundHalfFloor"] = 8] = "roundHalfFloor";
    })(Rounding || (Rounding = {}));
    var decimalJs = decimal_1.Decimal.config({
        precision: 30,
        toExpNeg: -1024,
        toExpPos: 1024,
        rounding: decimal_1.Decimal.Decimal.ROUND_HALF_EVEN,
    });
    var Decimal = (function () {
        function Decimal(value) {
            this.add = this.plus;
            this.sub = this.minus;
            this.eq = this.equals;
            this.lt = this.lessThan;
            this.lte = this.lessThanOrEqualTo;
            this.gt = this.greaterThan;
            this.gte = this.greaterThanOrEqualTo;
            var unwrappedValue = Decimal.unwrapInputValue(value);
            this.internalValue = new decimalJs(unwrappedValue);
        }
        Decimal.unwrapInputValue = function (value) {
            if (typeof value === "string" || typeof value === "number") {
                return value;
            }
            if ("internalValue" in value) {
                return value.internalValue;
            }
            return value;
        };
        Decimal.max = function (valueLeft, valueRigth) {
            var _a = [
                Decimal.unwrapInputValue(valueLeft),
                Decimal.unwrapInputValue(valueRigth),
            ], unwrappedValueLeft = _a[0], unwrappedValueRigth = _a[1];
            var result = decimalJs.max(unwrappedValueLeft, unwrappedValueRigth);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.min = function (valueLeft, valueRigth) {
            var _a = [
                Decimal.unwrapInputValue(valueLeft),
                Decimal.unwrapInputValue(valueRigth),
            ], unwrappedValueLeft = _a[0], unwrappedValueRigth = _a[1];
            var result = decimalJs.min(unwrappedValueLeft, unwrappedValueRigth);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.abs = function () {
            var result = this.internalValue.abs();
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.neg = function () {
            var result = this.internalValue.neg();
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.sqrt = function () {
            var result = this.internalValue.sqrt();
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.trunc = function () {
            var result = this.internalValue.trunc();
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.round = function () {
            var result = this.internalValue.round();
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.isNaN = function () {
            var result = this.internalValue.isNaN();
            return result;
        };
        Decimal.prototype.isInteger = function () {
            var result = this.internalValue.isInteger();
            return result;
        };
        Decimal.prototype.decimalPlaces = function () {
            var result = this.internalValue.decimalPlaces();
            return result;
        };
        Decimal.prototype.plus = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.plus(unwrappedValue);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.minus = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.minus(unwrappedValue);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.times = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.times(unwrappedValue);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.div = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.div(unwrappedValue);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.pow = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.pow(unwrappedValue);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.mod = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.mod(unwrappedValue);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.prototype.equals = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.equals(unwrappedValue);
            return result;
        };
        Decimal.prototype.lessThan = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.lessThan(unwrappedValue);
            return result;
        };
        Decimal.prototype.lessThanOrEqualTo = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.lessThanOrEqualTo(unwrappedValue);
            return result;
        };
        Decimal.prototype.greaterThan = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.greaterThan(unwrappedValue);
            return result;
        };
        Decimal.prototype.greaterThanOrEqualTo = function (value) {
            var unwrappedValue = Decimal.unwrapInputValue(value);
            var result = this.internalValue.greaterThanOrEqualTo(unwrappedValue);
            return result;
        };
        Decimal.prototype.toString = function () {
            var result = this.internalValue.toString();
            return result;
        };
        Decimal.prototype.toNumber = function () {
            var result = this.internalValue.toNumber();
            return result;
        };
        Decimal.prototype.valueOf = function () {
            var result = this.internalValue.valueOf();
            return result;
        };
        Decimal.prototype.toFixed = function (decimalPlaces) {
            var result = this.internalValue.toFixed(decimalPlaces);
            return result;
        };
        Decimal.prototype.toFormat = function () {
            var _a;
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            var result = (_a = this.internalValue).toFormat.apply(_a, params);
            return result;
        };
        Decimal.prototype.toDecimalPlaces = function (decimalPlaces) {
            var result = this.internalValue.toDecimalPlaces(decimalPlaces);
            var newInstance = new Decimal(result);
            return newInstance;
        };
        Decimal.rounding = decimalJs.rounding;
        Decimal.defaultValue = new Decimal(0);
        return Decimal;
    }());
    exports.default = Decimal;
});
//# sourceMappingURL=Decimal.js.map;
define('OutSystems/ClientRuntime/LightImmutable',["require", "exports", "tslib", "./Settings"], function (require, exports, tslib_1, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ImmutableList = exports.defineRecordClass = void 0;
    function copyArray(arr) {
        var len = arr.length;
        var clone = new Array(len);
        while (len-- > 0) {
            clone[len] = arr[len];
        }
        return clone;
    }
    var recordGenNumber = 0;
    function defineRecordClass(defaults) {
        var enforceUnsafeEval = (0, Settings_1.getEnvParams)().EnforceUnsafeEval;
        if (enforceUnsafeEval) {
            return defineRecordClassWithEval(defaults);
        }
        else {
            return defineRecordClassWithoutEval(defaults);
        }
    }
    exports.defineRecordClass = defineRecordClass;
    function defineRecordClassWithoutEval(defaults) {
        var recordDefaults = tslib_1.__assign({}, defaults);
        var keys = Object.keys(recordDefaults);
        return (function () {
            function R(o) {
                this._ = o !== null && o !== void 0 ? o : recordDefaults;
            }
            R.prototype.get = function (prop) {
                if (keys.indexOf(prop) >= 0) {
                    return this._[prop];
                }
            };
            R.prototype.set = function (prop, value) {
                var newValues = tslib_1.__assign({}, this._);
                if (keys.indexOf(prop) >= 0) {
                    newValues[prop] = value;
                }
                return new R(newValues);
            };
            R.prototype.toJS = function () {
                return tslib_1.__assign({}, this._);
            };
            return R;
        }());
    }
    function defineRecordClassWithEval(defaults) {
        var keys = Object.keys(defaults);
        var ctor = "function ImmutableRecord".concat(recordGenNumber, "(o) { this._ = o || defaults }\n") +
            "function R".concat(recordGenNumber, "(o) {\n");
        keys.forEach(function (key) { return (ctor += "this.".concat(key, " = o.").concat(key, ";\n")); });
        ctor += "}\n";
        var getBody = "switch(key){\n";
        keys.forEach(function (key) {
            getBody += "case \"".concat(key, "\": return this._.").concat(key, ";\n");
        });
        getBody += "}";
        var setBody = "var clone = new R".concat(recordGenNumber, "(this._);\n");
        setBody += "switch (key) {\n";
        keys.forEach(function (key) {
            setBody += "case \"".concat(key, "\": clone.").concat(key, "=value;break;");
        });
        setBody += "}\n";
        setBody += "return new ImmutableRecord".concat(recordGenNumber, "(clone);\n");
        var toJSBody = "return {\n";
        toJSBody += keys.map(function (key) { return "".concat(key, ": this._.").concat(key); }).join(",\n");
        toJSBody += "\n};";
        var complete = ctor +
            "ImmutableRecord".concat(recordGenNumber, ".prototype.get = function(key){").concat(getBody, "};\n") +
            "ImmutableRecord".concat(recordGenNumber, ".prototype.set = function(key,value){").concat(setBody, "};\n") +
            "ImmutableRecord".concat(recordGenNumber, ".prototype.toJS = function(){").concat(toJSBody, "};\n") +
            "return ImmutableRecord".concat(recordGenNumber, ";");
        recordGenNumber++;
        return new Function("defaults", complete)(defaults);
    }
    var MAX_SEGMENT_SIZE = 128;
    var ImmutableList = (function () {
        function ImmutableList(values, lengths) {
            if (typeof lengths !== "undefined") {
                this._values = values;
                this._lengths = lengths;
            }
            else if (typeof values !== "undefined") {
                var self_1 = ImmutableList.fromJS(values);
                this._values = self_1._values;
                this._lengths = self_1._lengths;
            }
            else {
                this._values = [];
                this._lengths = [];
            }
        }
        ImmutableList.prototype.clear = function () {
            return new ImmutableList();
        };
        ImmutableList.prototype.clone = function () {
            return this;
        };
        ImmutableList.prototype.count = function () {
            var total = 0, len = this._lengths.length;
            while (len-- > 0) {
                total += this._lengths[len];
            }
            return total;
        };
        ImmutableList.prototype.isEmpty = function () {
            return this._lengths.length === 0;
        };
        ImmutableList.prototype.get = function (index) {
            var i = 0, p = index;
            var len = this._lengths.length;
            while (i < len && index >= 0) {
                if (p < this._lengths[i]) {
                    return this._values[i][p];
                }
                p -= this._lengths[i];
                i++;
            }
        };
        ImmutableList.prototype.set = function (index, value) {
            var segment = 0, p = index;
            var values = copyArray(this._values);
            var lengths = this._lengths;
            var len = lengths.length;
            while (segment < len && index >= 0) {
                if (p < this._lengths[segment]) {
                    values[segment] = copyArray(values[segment]);
                    values[segment][p] = value;
                    return new ImmutableList(values, lengths);
                }
                p -= lengths[segment];
                segment++;
            }
        };
        ImmutableList.prototype.push = function (value) {
            var pos = this._values.length - 1;
            var values;
            var lengths;
            if (pos < 0) {
                pos = 0;
                values = [[]];
                lengths = [0];
            }
            else {
                values = copyArray(this._values);
                lengths = copyArray(this._lengths);
            }
            var lastSegment = values[pos];
            if (lastSegment.length < MAX_SEGMENT_SIZE) {
                var lastSegmentLen = lastSegment.length;
                var lastSegmentClone = new Array(lastSegmentLen + 1);
                var i = lastSegmentLen;
                while (i-- > 0) {
                    lastSegmentClone[i] = lastSegment[i];
                }
                lastSegmentClone[lastSegmentLen] = value;
                values[pos] = lastSegmentClone;
                lengths[pos]++;
            }
            else {
                var newLastSegment = [value];
                values.push(newLastSegment);
                lengths.push(1);
            }
            return new ImmutableList(values, lengths);
        };
        ImmutableList.prototype.insert = function (index, value) {
            var segment = 0, p = index;
            var values = copyArray(this._values);
            var lengths = copyArray(this._lengths);
            var len = lengths.length;
            while (segment < len && p >= 0) {
                if (p < lengths[segment]) {
                    if (lengths[segment] === MAX_SEGMENT_SIZE) {
                        var b1size = (MAX_SEGMENT_SIZE / 2) | 0;
                        var b2size = MAX_SEGMENT_SIZE - b1size;
                        lengths.splice(segment, 1, b1size, b2size);
                        var b1values = new Array(b1size);
                        var b2values = new Array(b2size);
                        for (var b1p = 0; b1p < b1size; b1p++) {
                            b1values[b1p] = values[segment][b1p];
                        }
                        for (var b2p = 0, vp = b1size; b2p < b2size;) {
                            b2values[b2p++] = values[segment][vp++];
                        }
                        values.splice(segment, 1, b1values, b2values);
                        len++;
                        continue;
                    }
                    var i = 0;
                    var segmentLen = lengths[segment];
                    var newValues = new Array(segmentLen + 1);
                    var oldValues = values[segment];
                    for (; i < p; i++) {
                        newValues[i] = oldValues[i];
                    }
                    newValues[p] = value;
                    var j = i + 1;
                    while (i < segmentLen) {
                        newValues[j++] = oldValues[i++];
                    }
                    lengths[segment]++;
                    values[segment] = newValues;
                    return new ImmutableList(values, lengths);
                }
                p -= lengths[segment];
                segment++;
            }
            lengths.push(1);
            values.push([value]);
            return new ImmutableList(values, lengths);
        };
        ImmutableList.prototype.remove = function (index) {
            var segment = 0;
            var p = index;
            var lengths = copyArray(this._lengths);
            var values = copyArray(this._values);
            var len = lengths.length;
            while (segment < len && p >= 0) {
                if (p < lengths[segment]) {
                    var segmentLen = --lengths[segment];
                    var segmentValues = new Array(segmentLen);
                    var i = 0, j = 0;
                    while (i < segmentLen) {
                        if (i === p) {
                            j++;
                        }
                        segmentValues[i++] = values[segment][j++];
                    }
                    values[segment] = segmentValues;
                    if (lengths[segment] === 0) {
                        lengths.splice(segment, 1);
                        values.splice(segment, 1);
                    }
                    return new ImmutableList(values, lengths);
                }
                p -= lengths[segment];
                segment++;
            }
        };
        ImmutableList.prototype.reduce = function (callback, init) {
            for (var i = 0; i < this._values.length; i++) {
                var segment = this._values[i];
                for (var j = 0; j < segment.length; j++) {
                    init = callback(init, segment[j]);
                }
            }
            return init;
        };
        ImmutableList.prototype.map = function (callback) {
            var result = new Array(this.count());
            var p = 0;
            for (var i = 0; i < this._values.length; i++) {
                var segment = this._values[i];
                for (var j = 0; j < segment.length; j++) {
                    result[p] = callback(segment[j], p);
                    p++;
                }
            }
            return result;
        };
        ImmutableList.prototype.pushAll = function (values) {
            if (values.length === 0) {
                return this;
            }
            var newList = new ImmutableList(values);
            var newValues = this._values.concat(newList._values);
            var newLengths = this._lengths.concat(newList._lengths);
            return new ImmutableList(newValues, newLengths);
        };
        ImmutableList.prototype.forEach = function (callbackfn) {
            for (var i = 0; i < this._values.length; i++) {
                var segment = this._values[i];
                for (var j = 0; j < segment.length; j++) {
                    callbackfn(segment[j]);
                }
            }
            return undefined;
        };
        ImmutableList.prototype.addFromOther = function (other) {
            if (other.count() === 0) {
                return this;
            }
            if (this._values.length === 0) {
                return other;
            }
            var lengths = new Array(this._lengths.length + other._lengths.length);
            var values = new Array(this._values.length + other._values.length);
            var thisSegment = 0;
            var otherSegment = 0;
            while (thisSegment < this._values.length) {
                values[thisSegment] = this._values[thisSegment];
                lengths[thisSegment] = this._lengths[thisSegment];
                thisSegment++;
            }
            while (otherSegment < other._values.length) {
                values[thisSegment] = other._values[otherSegment];
                lengths[thisSegment] = other._lengths[otherSegment];
                thisSegment++;
                otherSegment++;
            }
            return new ImmutableList(values, lengths);
        };
        ImmutableList.fromJS = function (arr) {
            var segments = Math.ceil(arr.length / MAX_SEGMENT_SIZE) | 0;
            var values = new Array(segments);
            var lengths = new Array(segments);
            var done = 0, missing = 0;
            for (var i = 0; i < segments; i++) {
                missing = arr.length - done;
                var thismax = missing > MAX_SEGMENT_SIZE ? MAX_SEGMENT_SIZE : missing;
                lengths[i] = thismax;
                values[i] = new Array(thismax);
                for (var j = 0; j < thismax; j++) {
                    values[i][j] = arr[done + j];
                }
                done += thismax;
            }
            return new ImmutableList(values, lengths);
        };
        return ImmutableList;
    }());
    exports.ImmutableList = ImmutableList;
});
//# sourceMappingURL=LightImmutable.js.map;
!function(t,i){"object"==typeof exports&&"object"==typeof module?module.exports=i():"function"==typeof define&&define.amd?define('long',[],i):"object"==typeof exports?exports.Long=i():t.Long=i()}("undefined"!=typeof self?self:this,function(){return function(t){function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}var n={};return i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:e})},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p="",i(i.s=0)}([function(t,i){function n(t,i,n){this.low=0|t,this.high=0|i,this.unsigned=!!n}function e(t){return!0===(t&&t.__isLong__)}function r(t,i){var n,e,r;return i?(t>>>=0,(r=0<=t&&t<256)&&(e=l[t])?e:(n=h(t,(0|t)<0?-1:0,!0),r&&(l[t]=n),n)):(t|=0,(r=-128<=t&&t<128)&&(e=f[t])?e:(n=h(t,t<0?-1:0,!1),r&&(f[t]=n),n))}function s(t,i){if(isNaN(t))return i?p:m;if(i){if(t<0)return p;if(t>=c)return q}else{if(t<=-v)return _;if(t+1>=v)return E}return t<0?s(-t,i).neg():h(t%d|0,t/d|0,i)}function h(t,i,e){return new n(t,i,e)}function u(t,i,n){if(0===t.length)throw Error("empty string");if("NaN"===t||"Infinity"===t||"+Infinity"===t||"-Infinity"===t)return m;if("number"==typeof i?(n=i,i=!1):i=!!i,(n=n||10)<2||36<n)throw RangeError("radix");var e;if((e=t.indexOf("-"))>0)throw Error("interior hyphen");if(0===e)return u(t.substring(1),i,n).neg();for(var r=s(a(n,8)),h=m,o=0;o<t.length;o+=8){var g=Math.min(8,t.length-o),f=parseInt(t.substring(o,o+g),n);if(g<8){var l=s(a(n,g));h=h.mul(l).add(s(f))}else h=h.mul(r),h=h.add(s(f))}return h.unsigned=i,h}function o(t,i){return"number"==typeof t?s(t,i):"string"==typeof t?u(t,i):h(t.low,t.high,"boolean"==typeof i?i:t.unsigned)}t.exports=n;var g=null;try{g=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=e;var f={},l={};n.fromInt=r,n.fromNumber=s,n.fromBits=h;var a=Math.pow;n.fromString=u,n.fromValue=o;var d=4294967296,c=d*d,v=c/2,w=r(1<<24),m=r(0);n.ZERO=m;var p=r(0,!0);n.UZERO=p;var y=r(1);n.ONE=y;var b=r(1,!0);n.UONE=b;var N=r(-1);n.NEG_ONE=N;var E=h(-1,2147483647,!1);n.MAX_VALUE=E;var q=h(-1,-1,!0);n.MAX_UNSIGNED_VALUE=q;var _=h(0,-2147483648,!1);n.MIN_VALUE=_;var B=n.prototype;B.toInt=function(){return this.unsigned?this.low>>>0:this.low},B.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},B.toString=function(t){if((t=t||10)<2||36<t)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(_)){var i=s(t),n=this.div(i),e=n.mul(i).sub(this);return n.toString(t)+e.toInt().toString(t)}return"-"+this.neg().toString(t)}for(var r=s(a(t,6),this.unsigned),h=this,u="";;){var o=h.div(r),g=h.sub(o.mul(r)).toInt()>>>0,f=g.toString(t);if(h=o,h.isZero())return f+u;for(;f.length<6;)f="0"+f;u=""+f+u}},B.getHighBits=function(){return this.high},B.getHighBitsUnsigned=function(){return this.high>>>0},B.getLowBits=function(){return this.low},B.getLowBitsUnsigned=function(){return this.low>>>0},B.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,i=31;i>0&&0==(t&1<<i);i--);return 0!=this.high?i+33:i+1},B.isZero=function(){return 0===this.high&&0===this.low},B.eqz=B.isZero,B.isNegative=function(){return!this.unsigned&&this.high<0},B.isPositive=function(){return this.unsigned||this.high>=0},B.isOdd=function(){return 1==(1&this.low)},B.isEven=function(){return 0==(1&this.low)},B.equals=function(t){return e(t)||(t=o(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&(this.high===t.high&&this.low===t.low)},B.eq=B.equals,B.notEquals=function(t){return!this.eq(t)},B.neq=B.notEquals,B.ne=B.notEquals,B.lessThan=function(t){return this.comp(t)<0},B.lt=B.lessThan,B.lessThanOrEqual=function(t){return this.comp(t)<=0},B.lte=B.lessThanOrEqual,B.le=B.lessThanOrEqual,B.greaterThan=function(t){return this.comp(t)>0},B.gt=B.greaterThan,B.greaterThanOrEqual=function(t){return this.comp(t)>=0},B.gte=B.greaterThanOrEqual,B.ge=B.greaterThanOrEqual,B.compare=function(t){if(e(t)||(t=o(t)),this.eq(t))return 0;var i=this.isNegative(),n=t.isNegative();return i&&!n?-1:!i&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},B.comp=B.compare,B.negate=function(){return!this.unsigned&&this.eq(_)?_:this.not().add(y)},B.neg=B.negate,B.add=function(t){e(t)||(t=o(t));var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,s=65535&this.low,u=t.high>>>16,g=65535&t.high,f=t.low>>>16,l=65535&t.low,a=0,d=0,c=0,v=0;return v+=s+l,c+=v>>>16,v&=65535,c+=r+f,d+=c>>>16,c&=65535,d+=n+g,a+=d>>>16,d&=65535,a+=i+u,a&=65535,h(c<<16|v,a<<16|d,this.unsigned)},B.subtract=function(t){return e(t)||(t=o(t)),this.add(t.neg())},B.sub=B.subtract,B.multiply=function(t){if(this.isZero())return m;if(e(t)||(t=o(t)),g){return h(g.mul(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(t.isZero())return m;if(this.eq(_))return t.isOdd()?_:m;if(t.eq(_))return this.isOdd()?_:m;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(w)&&t.lt(w))return s(this.toNumber()*t.toNumber(),this.unsigned);var i=this.high>>>16,n=65535&this.high,r=this.low>>>16,u=65535&this.low,f=t.high>>>16,l=65535&t.high,a=t.low>>>16,d=65535&t.low,c=0,v=0,p=0,y=0;return y+=u*d,p+=y>>>16,y&=65535,p+=r*d,v+=p>>>16,p&=65535,p+=u*a,v+=p>>>16,p&=65535,v+=n*d,c+=v>>>16,v&=65535,v+=r*a,c+=v>>>16,v&=65535,v+=u*l,c+=v>>>16,v&=65535,c+=i*d+n*a+r*l+u*f,c&=65535,h(p<<16|y,c<<16|v,this.unsigned)},B.mul=B.multiply,B.divide=function(t){if(e(t)||(t=o(t)),t.isZero())throw Error("division by zero");if(g){if(!this.unsigned&&-2147483648===this.high&&-1===t.low&&-1===t.high)return this;return h((this.unsigned?g.div_u:g.div_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?p:m;var i,n,r;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return p;if(t.gt(this.shru(1)))return b;r=p}else{if(this.eq(_)){if(t.eq(y)||t.eq(N))return _;if(t.eq(_))return y;return i=this.shr(1).div(t).shl(1),i.eq(m)?t.isNegative()?y:N:(n=this.sub(t.mul(i)),r=i.add(n.div(t)))}if(t.eq(_))return this.unsigned?p:m;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();r=m}for(n=this;n.gte(t);){i=Math.max(1,Math.floor(n.toNumber()/t.toNumber()));for(var u=Math.ceil(Math.log(i)/Math.LN2),f=u<=48?1:a(2,u-48),l=s(i),d=l.mul(t);d.isNegative()||d.gt(n);)i-=f,l=s(i,this.unsigned),d=l.mul(t);l.isZero()&&(l=y),r=r.add(l),n=n.sub(d)}return r},B.div=B.divide,B.modulo=function(t){if(e(t)||(t=o(t)),g){return h((this.unsigned?g.rem_u:g.rem_s)(this.low,this.high,t.low,t.high),g.get_high(),this.unsigned)}return this.sub(this.div(t).mul(t))},B.mod=B.modulo,B.rem=B.modulo,B.not=function(){return h(~this.low,~this.high,this.unsigned)},B.and=function(t){return e(t)||(t=o(t)),h(this.low&t.low,this.high&t.high,this.unsigned)},B.or=function(t){return e(t)||(t=o(t)),h(this.low|t.low,this.high|t.high,this.unsigned)},B.xor=function(t){return e(t)||(t=o(t)),h(this.low^t.low,this.high^t.high,this.unsigned)},B.shiftLeft=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):h(0,this.low<<t-32,this.unsigned)},B.shl=B.shiftLeft,B.shiftRight=function(t){return e(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?h(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):h(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},B.shr=B.shiftRight,B.shiftRightUnsigned=function(t){if(e(t)&&(t=t.toInt()),0===(t&=63))return this;var i=this.high;if(t<32){return h(this.low>>>t|i<<32-t,i>>>t,this.unsigned)}return 32===t?h(i,0,this.unsigned):h(i>>>t-32,0,this.unsigned)},B.shru=B.shiftRightUnsigned,B.shr_u=B.shiftRightUnsigned,B.toSigned=function(){return this.unsigned?h(this.low,this.high,!1):this},B.toUnsigned=function(){return this.unsigned?this:h(this.low,this.high,!0)},B.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},B.toBytesLE=function(){var t=this.high,i=this.low;return[255&i,i>>>8&255,i>>>16&255,i>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},B.toBytesBE=function(){var t=this.high,i=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,i>>>24,i>>>16&255,i>>>8&255,255&i]},n.fromBytes=function(t,i,e){return e?n.fromBytesLE(t,i):n.fromBytesBE(t,i)},n.fromBytesLE=function(t,i){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,i)},n.fromBytesBE=function(t,i){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],i)}}])});
//# sourceMappingURL=long.js.map;
define('OutSystems/ClientRuntime/LongInteger',["require", "exports", "long"], function (require, exports, LongJS) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LongJSCommonJs = require("long");
    var LongInteger = (function () {
        function LongInteger(low, high, unsigned) {
            this.neg = this.negate;
            this.eq = this.equals;
            this.lt = this.lessThan;
            this.lte = this.lessThanOrEqual;
            this.gt = this.greaterThan;
            this.gte = this.greaterThanOrEqual;
            this.internalValue = new LongJSCommonJs(low, high, unsigned);
        }
        LongInteger.fromNumber = function (value) {
            var newInstance = new LongInteger(0);
            newInstance.internalValue = LongJS.fromNumber(value);
            return newInstance;
        };
        LongInteger.fromString = function (value) {
            var newInstance = new LongInteger(0);
            newInstance.internalValue = LongJS.fromString(value);
            return newInstance;
        };
        LongInteger.fromValue = function (value) {
            var valueConverted = typeof value === "object" ? value.internalValue : value;
            var newInstance = new LongInteger(0);
            newInstance.internalValue = LongJS.fromValue(valueConverted);
            return newInstance;
        };
        LongInteger.fromObject = function (value) {
            var longjs = LongJS.fromValue(value);
            var newInstance = LongInteger.fromString(longjs.toString());
            return newInstance;
        };
        LongInteger.unwrapInputValue = function (value) {
            if (typeof value === "string" || typeof value === "number") {
                return value;
            }
            if ("internalValue" in value) {
                return value.internalValue;
            }
            return value;
        };
        LongInteger.prototype.negate = function () {
            var result = this.internalValue.negate();
            var newInstance = LongInteger.fromObject(result);
            return newInstance;
        };
        LongInteger.prototype.add = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.add(unwrappedValue);
            var newInstance = LongInteger.fromObject(result);
            return newInstance;
        };
        LongInteger.prototype.sub = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.sub(unwrappedValue);
            var newInstance = LongInteger.fromObject(result);
            return newInstance;
        };
        LongInteger.prototype.mul = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.mul(unwrappedValue);
            var newInstance = LongInteger.fromObject(result);
            return newInstance;
        };
        LongInteger.prototype.div = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.div(unwrappedValue);
            var newInstance = LongInteger.fromObject(result);
            return newInstance;
        };
        LongInteger.prototype.and = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.and(unwrappedValue);
            var newInstance = LongInteger.fromObject(result);
            return newInstance;
        };
        LongInteger.prototype.equals = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.equals(unwrappedValue);
            return result;
        };
        LongInteger.prototype.lessThan = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.lessThan(unwrappedValue);
            return result;
        };
        LongInteger.prototype.lessThanOrEqual = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.lessThanOrEqual(unwrappedValue);
            return result;
        };
        LongInteger.prototype.greaterThan = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.greaterThan(unwrappedValue);
            return result;
        };
        LongInteger.prototype.greaterThanOrEqual = function (value) {
            var unwrappedValue = LongInteger.unwrapInputValue(value);
            var result = this.internalValue.greaterThanOrEqual(unwrappedValue);
            return result;
        };
        LongInteger.prototype.toNumber = function () {
            var result = this.internalValue.toNumber();
            return result;
        };
        LongInteger.prototype.toString = function () {
            var result = this.internalValue.toString();
            return result;
        };
        LongInteger.prototype.valueOf = function () {
            var result = this.internalValue.valueOf();
            return result;
        };
        LongInteger.defaultValue = LongInteger.fromObject(LongJS.ZERO);
        LongInteger.MIN_VALUE = LongInteger.fromObject(LongJS.MIN_VALUE);
        LongInteger.MAX_VALUE = LongInteger.fromObject(LongJS.MAX_VALUE);
        return LongInteger;
    }());
    exports.default = LongInteger;
});
//# sourceMappingURL=LongInteger.js.map;
define('OutSystems/ClientRuntime/DataTypes',["require", "exports", "tslib", "./DateTime", "./Decimal", "./Exceptions", "./Flow", "./Format", "./LightImmutable", "./LongInteger", "./Settings"], function (require, exports, tslib_1, DateTime_1, Decimal_1, Exceptions_1, Flow, Format_1, LightImmutable_1, LongInteger_1, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TypeValidations = exports.ComplexTypeKeyedTypeFactory = exports.BasicTypeKeyedTypeFactory = exports.TypeKeyedTypeFactory = exports.RecordTypeFactory = exports.ErrorHandlerOutputType = exports.JSONSerializeOutputType = exports.RecordWithStaticConstructor = exports.VariableHolder = exports.BasicVariableHolder = exports.TextList = exports.BinaryDataList = exports.BooleanList = exports.PhoneNumberList = exports.EmailList = exports.CurrencyList = exports.DecimalList = exports.TimeList = exports.DateTimeList = exports.DateList = exports.LongIntegerList = exports.IntegerList = exports.GenericRecordList = exports.BasicTypeList = exports.List = exports.GenericRecord = exports.Record = exports.ImmutableBase = exports.ImmutableListWithTracking = exports.defaultForType = exports.areBinaryNulls = exports.equals = exports.compare = exports.ListCache = exports.Cache = exports.Constants = exports.DateTime = exports.BinaryData = exports.LongInteger = exports.Decimal = exports.mapDataTypeToName = exports.DataTypes = void 0;
    Object.defineProperty(exports, "DateTime", { enumerable: true, get: function () { return DateTime_1.DateTime; } });
    exports.Decimal = Decimal_1.default;
    exports.LongInteger = LongInteger_1.default;
    var CACHE_SUFFIX = "__cache";
    var DataTypes;
    (function (DataTypes) {
        DataTypes[DataTypes["Integer"] = 0] = "Integer";
        DataTypes[DataTypes["LongInteger"] = 1] = "LongInteger";
        DataTypes[DataTypes["Decimal"] = 2] = "Decimal";
        DataTypes[DataTypes["Currency"] = 3] = "Currency";
        DataTypes[DataTypes["Text"] = 4] = "Text";
        DataTypes[DataTypes["PhoneNumber"] = 5] = "PhoneNumber";
        DataTypes[DataTypes["Email"] = 6] = "Email";
        DataTypes[DataTypes["Boolean"] = 7] = "Boolean";
        DataTypes[DataTypes["Date"] = 8] = "Date";
        DataTypes[DataTypes["DateTime"] = 9] = "DateTime";
        DataTypes[DataTypes["Time"] = 10] = "Time";
        DataTypes[DataTypes["Record"] = 11] = "Record";
        DataTypes[DataTypes["RecordList"] = 12] = "RecordList";
        DataTypes[DataTypes["BinaryData"] = 13] = "BinaryData";
        DataTypes[DataTypes["Object"] = 14] = "Object";
    })(DataTypes || (exports.DataTypes = DataTypes = {}));
    var mapDataTypeToName = function (type) {
        switch (type) {
            case DataTypes.Integer:
                return "Integer";
            case DataTypes.LongInteger:
                return "Long Integer";
            case DataTypes.Decimal:
                return "Decimal";
            case DataTypes.Currency:
                return "Currency";
            case DataTypes.Text:
                return "Text";
            case DataTypes.PhoneNumber:
                return "Phone Number";
            case DataTypes.Email:
                return "Email";
            case DataTypes.Boolean:
                return "Boolean";
            case DataTypes.Date:
                return "Date";
            case DataTypes.DateTime:
                return "Date Time";
            case DataTypes.Time:
                return "Time";
            case DataTypes.Record:
                return "Record";
            case DataTypes.RecordList:
                return "List";
            case DataTypes.BinaryData:
                return "Binary Data";
            case DataTypes.Object:
                return "Object";
            default:
                return "Unknown: ".concat(type);
        }
    };
    exports.mapDataTypeToName = mapDataTypeToName;
    var BinaryData = (function () {
        function BinaryData(content, _url, getOfflineContent) {
            var _this = this;
            this._url = _url;
            this.getOfflineContent = getOfflineContent;
            this._cachedBlob = null;
            if (typeof Blob !== "undefined" && content instanceof Blob) {
                this._cachedBlob = content;
                this.getOfflineContent = function () {
                    return _this._content ? Promise.resolve(_this._content) : BinaryData.blobToBase64(_this._cachedBlob);
                };
            }
            else {
                this._content = content || null;
            }
        }
        Object.defineProperty(BinaryData.prototype, "url", {
            get: function () {
                return this._url;
            },
            set: function (url) {
                this._url = url;
                this.clearCachedBlob();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BinaryData.prototype, "cachedBlob", {
            get: function () {
                return this._cachedBlob;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BinaryData.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                this._content = content;
                this.clearCachedBlob();
            },
            enumerable: false,
            configurable: true
        });
        BinaryData.prototype.loadContent = function () {
            var _this = this;
            if (!this.getOfflineContent) {
                return Flow.executeSequence(function () { return _this; });
            }
            return this.getOfflineContent().then(function (content) {
                _this.content = content;
                return Promise.resolve(_this);
            });
        };
        BinaryData.prototype.hasContent = function () {
            return !!(this._url || this._content);
        };
        BinaryData.prototype.fastEquals = function (other) {
            return (other &&
                this.constructor === other.constructor &&
                this._url === other._url &&
                this._content === other._content &&
                ((!!this.getOfflineContent && !!other.getOfflineContent) ||
                    (!this.getOfflineContent && !other.getOfflineContent)));
        };
        BinaryData.prototype.base64toHex = function (base64String) {
            var decodedString = atob(base64String);
            var hexEncodedString = "";
            for (var i = 0; i < decodedString.length; i++) {
                var hex = decodedString.charCodeAt(i).toString(16);
                hexEncodedString += hex.length === 2 ? hex : "0" + hex;
            }
            return hexEncodedString;
        };
        BinaryData.prototype.getContentType = function () {
            if (this._content) {
                var hexEncodedFileHeader = this.base64toHex(this._content.substr(0, 16));
                if (hexEncodedFileHeader.substr(0, 8) === "00000100") {
                    return "image/x-icon";
                }
                if (hexEncodedFileHeader.substr(0, 8) === "ffd8ffdb" ||
                    hexEncodedFileHeader.substr(0, 8) === "ffd8ffe0" ||
                    hexEncodedFileHeader.substr(0, 8) === "ffd8ffe1") {
                    return "image/jpeg";
                }
                if (hexEncodedFileHeader.substr(0, 8) === "49492a00" || hexEncodedFileHeader.substr(0, 8) === "4d4d002a") {
                    return "image/tiff";
                }
                if (hexEncodedFileHeader.substr(0, 4) === "424d") {
                    return "image/bmp";
                }
                if (hexEncodedFileHeader.substr(0, 6) === "474946") {
                    return "image/gif";
                }
                if (hexEncodedFileHeader.substr(0, 8) === "89504e47") {
                    return "image/png";
                }
                return "application/octet-stream";
            }
            else {
                return null;
            }
        };
        BinaryData.prototype.toDataURI = function () {
            if (this._content) {
                return "data:".concat(this.getContentType(), ";base64,").concat(this._content);
            }
            else {
                return null;
            }
        };
        BinaryData.prototype.toBlob = function () {
            if (!this._cachedBlob && this._content) {
                this._cachedBlob = BinaryData.base64toBlob(this._content, this.getContentType());
            }
            return this._cachedBlob;
        };
        BinaryData.prototype.toArrayBuffer = function () {
            if (!this._content) {
                return null;
            }
            return BinaryData.base64ToArrayBuffer(this._content);
        };
        Object.defineProperty(BinaryData.prototype, "length", {
            get: function () {
                var blob = this.toBlob();
                return blob ? blob.size : 0;
            },
            enumerable: false,
            configurable: true
        });
        BinaryData.blobToBase64 = function (blob) {
            return new Promise(function (resolve, reject) {
                var reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onload = function () {
                    var result = reader.result;
                    resolve(result.substring(result.indexOf(",") + 1));
                };
                reader.onerror = function () {
                    reject(reader.error);
                };
            });
        };
        BinaryData.base64toBlob = function (base64Data, contentType, sliceSize) {
            if (contentType === void 0) { contentType = ""; }
            if (sliceSize === void 0) { sliceSize = 512; }
            var byteCharacters = atob((base64Data || "").replace(/\s/g, ""));
            var byteArrays = [];
            for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                var slice = byteCharacters.slice(offset, offset + sliceSize);
                var byteNumbers = new Array(slice.length);
                for (var i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }
                var byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }
            return new Blob(byteArrays, { type: contentType });
        };
        BinaryData.base64ToArrayBuffer = function (base64Data) {
            return Uint8Array.from(atob(base64Data), function (c) { return c.charCodeAt(0); }).buffer;
        };
        BinaryData.prototype.clearCachedBlob = function () {
            this._cachedBlob = null;
        };
        BinaryData.defaultValue = new BinaryData();
        return BinaryData;
    }());
    exports.BinaryData = BinaryData;
    var Constants;
    (function (Constants) {
        Constants.MIN_INTEGER_VALUE = -2147483648;
        Constants.MAX_INTEGER_VALUE = 2147483647;
        Constants.MIN_LONGINTEGER_VALUE = LongInteger_1.default.MIN_VALUE;
        Constants.MAX_LONGINTEGER_VALUE = LongInteger_1.default.MAX_VALUE;
        Constants.MIN_DECIMAL_VALUE = new Decimal_1.default("2").pow(96).neg();
        Constants.MAX_DECIMAL_VALUE = new Decimal_1.default("2").pow(96).minus(1);
        Constants.RFC3339_TIMEPART = DateTime_1.DateTimeConstants.RFC3339_TIMEPART, Constants.RFC3339_DATEPART = DateTime_1.DateTimeConstants.RFC3339_DATEPART, Constants.MIN_DATE_VALUE = DateTime_1.DateTimeConstants.MIN_DATE_VALUE, Constants.MAX_DATE_VALUE = DateTime_1.DateTimeConstants.MAX_DATE_VALUE, Constants.MIN_DATETIME_VALUE = DateTime_1.DateTimeConstants.MIN_DATETIME_VALUE, Constants.MAX_DATETIME_VALUE = DateTime_1.DateTimeConstants.MAX_DATETIME_VALUE, Constants.ISO_DATE_FORMAT_REGEXP = DateTime_1.DateTimeConstants.ISO_DATE_FORMAT_REGEXP, Constants.DEFAULT_DATE = DateTime_1.DateTimeConstants.DEFAULT_DATE, Constants.DEFAULT_DATETIME = DateTime_1.DateTimeConstants.DEFAULT_DATETIME, Constants.DEFAULT_TIME = DateTime_1.DateTimeConstants.DEFAULT_TIME;
        Constants.DEFAULT_INTEGER = 0;
        Constants.DEFAULT_LONGINTEGER = LongInteger_1.default.defaultValue;
        Constants.DEFAULT_DECIMAL = Decimal_1.default.defaultValue;
        Constants.DEFAULT_CURRENCY = Decimal_1.default.defaultValue;
        Constants.DEFAULT_TEXT = "";
        Constants.DEFAULT_PHONENUMBER = "";
        Constants.DEFAULT_EMAIL = "";
        Constants.DEFAULT_BOOLEAN = false;
        Constants.DEFAULT_BINARYDATA = BinaryData.defaultValue;
        Constants.DEFAULT_OBJECT = null;
        Constants.FORMAT = new Format_1.ApplicationFormatInfo(new Format_1.DateTimeFormatInfo("yyyy-MM-dd", "HH:mm:ss"), new Format_1.NumberFormatInfo(".", ""));
    })(Constants || (exports.Constants = Constants = {}));
    var Cache = (function () {
        function Cache() {
            this.map = {};
        }
        Cache.prototype.getItem = function (key) {
            return this.map[key];
        };
        Cache.prototype.setItem = function (key, item) {
            this.map[key] = item;
        };
        Cache.prototype.invalidate = function (key) {
            if (key === undefined) {
                this.map = {};
            }
            else {
                this.setItem(key, undefined);
            }
        };
        Cache.prototype.clone = function () {
            var other = new Cache();
            for (var key in this.map) {
                other.setItem(key, this.map[key]);
            }
            return other;
        };
        return Cache;
    }());
    exports.Cache = Cache;
    var ListCache = (function () {
        function ListCache() {
            this.list = [];
        }
        ListCache.prototype.getItem = function (index) {
            if (index >= this.length) {
                return undefined;
            }
            return this.list[index];
        };
        ListCache.prototype.append = function (item) {
            this.list.push(item);
        };
        ListCache.prototype.appendMultiple = function (numberOfItems) {
            this.list = this.list.concat(new Array(numberOfItems));
        };
        ListCache.prototype.setItem = function (index, item) {
            this.list[index] = item;
        };
        ListCache.prototype.insert = function (index, item) {
            this.list.splice(index, 0, item);
        };
        ListCache.prototype.invalidate = function (index) {
            if (index === undefined) {
                this.list = [];
            }
            else {
                this.list.splice(index, 1);
            }
        };
        Object.defineProperty(ListCache.prototype, "length", {
            get: function () {
                return this.list.length;
            },
            enumerable: false,
            configurable: true
        });
        return ListCache;
    }());
    exports.ListCache = ListCache;
    function compare(v1, v2) {
        if (typeof v1 === "string") {
            var v1s = v1;
            var v2s = v2;
            return v1s.localeCompare(v2s);
        }
        if (typeof v1 === "number") {
            return v1 - v2;
        }
        if (typeof v1 === "boolean") {
            if (!v1 && v2) {
                return -1;
            }
            else if (v1 && !v2) {
                return 1;
            }
            else {
                return 0;
            }
        }
        if (v1.lessThan(v2)) {
            return -1;
        }
        else if (v1.greaterThan(v2)) {
            return 1;
        }
        else {
            return 0;
        }
    }
    exports.compare = compare;
    function equals(objA, objB) {
        if (!objA || !objB || !(objB.equals instanceof Function)) {
            return objB === objA;
        }
        return objB.equals(objA);
    }
    exports.equals = equals;
    function areBinaryNulls(left, right) {
        return !left.hasContent() && !right.hasContent();
    }
    exports.areBinaryNulls = areBinaryNulls;
    function defaultForType(t) {
        switch (t) {
            case DataTypes.Integer:
                return Constants.DEFAULT_INTEGER;
            case DataTypes.LongInteger:
                return Constants.DEFAULT_LONGINTEGER;
            case DataTypes.Decimal:
                return Constants.DEFAULT_DECIMAL;
            case DataTypes.Currency:
                return Constants.DEFAULT_CURRENCY;
            case DataTypes.Text:
                return Constants.DEFAULT_TEXT;
            case DataTypes.PhoneNumber:
                return Constants.DEFAULT_PHONENUMBER;
            case DataTypes.Email:
                return Constants.DEFAULT_EMAIL;
            case DataTypes.Date:
                return Constants.DEFAULT_DATE;
            case DataTypes.DateTime:
                return Constants.DEFAULT_DATETIME;
            case DataTypes.Time:
                return Constants.DEFAULT_TIME;
            case DataTypes.Boolean:
                return Constants.DEFAULT_BOOLEAN;
            case DataTypes.BinaryData:
                return Constants.DEFAULT_BINARYDATA;
            case DataTypes.Object:
                return Constants.DEFAULT_OBJECT;
            default:
                throw new TypeError("Records and Record lists are not basic types");
        }
    }
    exports.defaultForType = defaultForType;
    var ImmutableListWithTracking = (function () {
        function ImmutableListWithTracking(emptyListItem, data, itemIds, itemIdSeed, modelId) {
            this.emptyListItem = emptyListItem;
            this.data = data || new LightImmutable_1.ImmutableList();
            this.itemIds = itemIds || new LightImmutable_1.ImmutableList();
            this._itemIdSeed = itemIdSeed || 0;
            this._modelId = modelId || ImmutableListWithTracking.nextModelId++;
            if (data && !itemIds) {
                for (var i = 0, len = this.data.count(); i < len; i++) {
                    this.itemIds = this.itemIds.push(this._itemIdSeed);
                    this._itemIdSeed = (this._itemIdSeed + 1) | 0;
                }
            }
        }
        Object.defineProperty(ImmutableListWithTracking.prototype, "modelId", {
            get: function () {
                return this._modelId;
            },
            enumerable: false,
            configurable: true
        });
        ImmutableListWithTracking.prototype.push = function (value) {
            return new ImmutableListWithTracking(this.emptyListItem, this.data.push(value), this.itemIds.push(this._itemIdSeed), (this._itemIdSeed + 1) | 0, this._modelId);
        };
        ImmutableListWithTracking.prototype.addFromOther = function (values) {
            var _this = this;
            return new ImmutableListWithTracking(this.emptyListItem, this.data.addFromOther(values.data), this.itemIds.pushAll(values.data.map(function () { return _this._itemIdSeed++; })), this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.pushAll = function (values) {
            var _this = this;
            return new ImmutableListWithTracking(this.emptyListItem, this.data.pushAll(values), this.itemIds.pushAll(values.map(function () { return _this._itemIdSeed++; })), this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.remove = function (index) {
            return new ImmutableListWithTracking(this.emptyListItem, this.data.remove(index), this.itemIds.remove(index), this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.insert = function (index, value) {
            return new ImmutableListWithTracking(this.emptyListItem, this.data.insert(index, value), this.itemIds.insert(index, this._itemIdSeed), (this._itemIdSeed + 1) | 0, this._modelId);
        };
        ImmutableListWithTracking.prototype.sort = function (get, by, ascending) {
            var _this = this;
            var combinedList = this.data.map(function (item, index) {
                return {
                    item: get(index),
                    itemId: _this.itemIds.get(index),
                    by: by(get(index)),
                };
            });
            var factor = ascending ? 1 : -1;
            combinedList.sort(function (v1, v2) { return factor * compare(v1.by, v2.by); });
            var newData = LightImmutable_1.ImmutableList.fromJS(combinedList.map(function (v) { return v.item; }));
            var newIds = LightImmutable_1.ImmutableList.fromJS(combinedList.map(function (v) { return v.itemId; }));
            return new ImmutableListWithTracking(this.emptyListItem, newData, newIds, this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.getEmptyListItem = function () {
            return this.emptyListItem;
        };
        ImmutableListWithTracking.prototype.setEmptyListItem = function (value) {
            return new ImmutableListWithTracking(value, this.data, this.itemIds, this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.get = function (index) {
            return this.data.get(index);
        };
        ImmutableListWithTracking.prototype.getId = function (index) {
            return (0, Settings_1.getEnvParams)().ListItemIdWithoutModelId
                ? this.itemIds.get(index) + ""
                : "".concat(this.modelId, "_").concat(this.itemIds.get(index));
        };
        ImmutableListWithTracking.prototype.count = function () {
            return this.data.count();
        };
        ImmutableListWithTracking.prototype.isEmpty = function () {
            return this.data.isEmpty();
        };
        ImmutableListWithTracking.prototype.set = function (index, value) {
            return new ImmutableListWithTracking(this.emptyListItem, this.data.set(index, value), this.itemIds, this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.clear = function () {
            return new ImmutableListWithTracking(this.emptyListItem, this.data.clear(), this.itemIds.clear(), this._itemIdSeed, this._modelId);
        };
        ImmutableListWithTracking.prototype.forEach = function (cb) {
            return this.data.forEach(cb);
        };
        ImmutableListWithTracking.prototype.reduce = function (reducer, init) {
            return this.data.reduce(reducer, init);
        };
        ImmutableListWithTracking.fromJS = function (items, emptyListItem) {
            return new ImmutableListWithTracking(emptyListItem, LightImmutable_1.ImmutableList.fromJS(items));
        };
        ImmutableListWithTracking.fromJSON = function (items, emptyListItem) {
            return new ImmutableListWithTracking(emptyListItem, LightImmutable_1.ImmutableList.fromJS(items));
        };
        ImmutableListWithTracking.prototype.clone = function () {
            return new ImmutableListWithTracking(this.emptyListItem, this.data.clone(), this.itemIds.clone(), this._itemIdSeed);
        };
        ImmutableListWithTracking.nextModelId = 1;
        return ImmutableListWithTracking;
    }());
    exports.ImmutableListWithTracking = ImmutableListWithTracking;
    var ImmutableBase = (function () {
        function ImmutableBase() {
            this.writePropagateHandler = this.defaultWritePropagate;
            this.propagationParent = this;
        }
        ImmutableBase.getData = function (other) {
            if (other === undefined || other.constructor === ImmutableListWithTracking) {
                return undefined;
            }
            return other.data;
        };
        ImmutableBase.setPropagationHandler = function (other, parent, key, writePropagationHandler) {
            other.writePropagateHandler = writePropagationHandler;
            ImmutableBase.setPropagationParent(other, parent);
            ImmutableBase.setPropagationKey(other, key);
        };
        ImmutableBase.setPropagationParent = function (other, parent) {
            other.propagationParent = parent;
        };
        ImmutableBase.setPropagationKey = function (other, key) {
            other.propagationKey = key;
        };
        ImmutableBase.prototype.writePropagate = function (newValue, cache) {
            if (this.data.constructor !== newValue.constructor) {
                throw new Error("Unexpected new data type");
            }
            this.data = newValue;
            this.writePropagateHandler.apply(this.propagationParent, [this.propagationKey, newValue, cache]);
        };
        ImmutableBase.prototype.defaultWritePropagate = function (key, newValue, cache) {
            this.onDefaultWritePropagate(cache);
        };
        ImmutableBase.prototype.onDefaultWritePropagate = function (cache) { };
        return ImmutableBase;
    }());
    exports.ImmutableBase = ImmutableBase;
    var Record = (function (_super) {
        tslib_1.__extends(Record, _super);
        function Record(defaults, cache) {
            var _this = _super.call(this) || this;
            _this.cache = cache || new Cache();
            if (defaults) {
                _this.data = defaults;
            }
            else {
                _this.data = _this.constructor.createDefaultData();
            }
            return _this;
        }
        Record.createDefaultData = function () {
            var classDef = this;
            var recordClass = classDef.RecordClass;
            if (recordClass) {
                return new recordClass();
            }
            return undefined;
        };
        Record.prototype.getBasicProperty = function (propertyName) {
            return this.data.get(propertyName);
        };
        Record.prototype.setBasicProperty = function (propertyName, value, expectedType, valueType) {
            if (this.data.get(propertyName) !== value) {
                Record.checkType(expectedType, value, valueType);
                this.writePropagate(this.data.set(propertyName, value), this.cache);
                this.onPropertyValueChanged(propertyName);
            }
        };
        Record.prototype.onPropertyValueChanged = function (propertyName) {
        };
        Record.prototype.getComplexProperty = function (propertyName, ctor) {
            var result = this.cache.getItem(propertyName);
            if (result) {
                Record.setPropagationParent(result, this);
                return result;
            }
            var propertyData = this.data.get(propertyName);
            var propertyCache = this.cache.getItem(propertyName + CACHE_SUFFIX);
            result = new ctor(propertyData, propertyCache ? propertyCache : null);
            this.cache.setItem(propertyName, result);
            if (propertyCache) {
                this.cache.invalidate(propertyName + CACHE_SUFFIX);
            }
            Record.setPropagationHandler(result, this, propertyName, this.internalSetComplexProperty);
            return result;
        };
        Record.prototype.setComplexProperty = function (propertyName, value, expectedType, valueType) {
            this.setProperties([
                { name: propertyName, value: value, expectedType: expectedType, valueType: valueType, isBasicType: false },
            ]);
        };
        Record.prototype.internalSetComplexProperty = function (propertyName, value, cache) {
            this.internalSetProperties([{ name: propertyName, value: value, isBasicType: false }], cache);
        };
        Record.prototype.setProperties = function (properties) {
            var changedProperties = [];
            for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
                var property = properties_1[_i];
                var objData = Record.getData(property.value) || property.value;
                if (this.data.get(property.name) !== objData) {
                    if (property.expectedType !== undefined) {
                        Record.checkType(property.expectedType, property.value, property.valueType);
                    }
                    changedProperties.push({ name: property.name, value: objData, isBasicType: property.isBasicType });
                }
            }
            if (changedProperties.length > 0) {
                this.internalSetProperties(changedProperties);
            }
        };
        Record.prototype.internalSetProperties = function (properties, cache) {
            var newData = this.data;
            var clonedCache = this.cloneCache();
            for (var _i = 0, properties_2 = properties; _i < properties_2.length; _i++) {
                var property = properties_2[_i];
                newData = newData.set(property.name, property.value);
                if (!property.isBasicType) {
                    clonedCache.invalidate(property.name);
                    clonedCache.invalidate(property.name + CACHE_SUFFIX);
                    if (cache) {
                        clonedCache.setItem(property.name + CACHE_SUFFIX, cache);
                    }
                }
            }
            this.writePropagate(newData, clonedCache);
            for (var _a = 0, properties_3 = properties; _a < properties_3.length; _a++) {
                var property = properties_3[_a];
                this.onPropertyValueChanged(property.name);
            }
        };
        Record.prototype.cloneCache = function () {
            return this.cache.clone();
        };
        Record.prototype.onDefaultWritePropagate = function (cache) {
            this.cache = cache;
        };
        Record.checkType = function (expectedType, value, valueType) {
            switch (expectedType) {
                case DataTypes.Integer:
                    Record.ensureValidInteger(value);
                    break;
                case DataTypes.LongInteger:
                    Record.ensureValidLongInteger(value);
                    break;
                case DataTypes.Decimal:
                case DataTypes.Currency:
                    Record.ensureValidDecimal(value);
                    break;
                case DataTypes.Text:
                case DataTypes.PhoneNumber:
                    Record.ensureValidText(value);
                    break;
                case DataTypes.Email:
                    Record.ensureValidEmail(value);
                    break;
                case DataTypes.Boolean:
                    Record.ensureValidBoolean(value);
                    break;
                case DataTypes.Date:
                    Record.ensureValidDate(value);
                    break;
                case DataTypes.Time:
                    Record.ensureValidTime(value);
                    break;
                case DataTypes.DateTime:
                    Record.ensureValidDateTime(value);
                    break;
                case DataTypes.Record:
                case DataTypes.RecordList:
                    Record.ensureValidComplexType(value, valueType);
                    break;
                case DataTypes.BinaryData:
                    Record.ensureValidBinaryData(value);
                    break;
                case DataTypes.Object:
                    break;
                default:
                    throw new TypeError("Unexpected data type: " + expectedType);
            }
        };
        Record.ensureValidBinaryData = function (value) {
            if (typeof value === "string" || value instanceof BinaryData) {
                return;
            }
            throw new TypeError("Expecting a Binary Data, found: " + value);
        };
        Record.ensureValidInteger = function (value) {
            if (typeof value === "number" && !isNaN(value) && value % 1 === 0) {
                if (value < Constants.MIN_INTEGER_VALUE) {
                    throw new TypeError("Integers must be greater than " + Constants.MIN_INTEGER_VALUE + ", found: " + value);
                }
                else if (value > Constants.MAX_INTEGER_VALUE) {
                    throw new TypeError("Integers must be lower than " + Constants.MAX_INTEGER_VALUE + ", found: " + value);
                }
            }
            else {
                throw new TypeError("Expecting an Integer, found: " + value);
            }
        };
        Record.ensureValidLongInteger = function (value) {
            if (value && value.constructor === LongInteger_1.default) {
                if (value.lessThan(Constants.MIN_LONGINTEGER_VALUE)) {
                    throw new TypeError("Long Integers must be greater than " +
                        Constants.MIN_LONGINTEGER_VALUE.toString() +
                        ", found: " +
                        value.toString());
                }
                else if (value.greaterThan(Constants.MAX_LONGINTEGER_VALUE)) {
                    throw new TypeError("Long Integers must be lower than " +
                        Constants.MAX_LONGINTEGER_VALUE.toString() +
                        ", found: " +
                        value.toString());
                }
            }
            else {
                throw new TypeError("Expecting a LongInteger, found: " + value);
            }
        };
        Record.ensureValidDecimal = function (value) {
            if (value && value.constructor === Decimal_1.default) {
                if (value.lessThan(Constants.MIN_DECIMAL_VALUE)) {
                    throw new TypeError("Decimals must be greater than " +
                        Constants.MIN_DECIMAL_VALUE.toString() +
                        ", found: " +
                        value.toString());
                }
                else if (value.greaterThan(Constants.MAX_DECIMAL_VALUE)) {
                    throw new TypeError("Decimals must be lower than " +
                        Constants.MAX_DECIMAL_VALUE.toString() +
                        ", found: " +
                        value.toString());
                }
            }
            else {
                throw new TypeError("Expecting a Decimal, found: ".concat(value));
            }
        };
        Record.ensureValidText = function (value) {
            if (typeof value === "string") {
                return;
            }
            throw new TypeError("Expecting a Text, found: ".concat(value));
        };
        Record.ensureValidEmail = function (value) {
            if (typeof value === "string") {
                return;
            }
            throw new TypeError("Expecting an Email, found: ".concat(value));
        };
        Record.ensureValidBoolean = function (value) {
            if (typeof value === "boolean") {
                return;
            }
            throw new TypeError("Expecting a Boolean, found: ".concat(value));
        };
        Record.ensureValidDate = function (value) {
            if (!!value && value.constructor === DateTime_1.DateTime) {
                return;
            }
            throw new TypeError("Expecting a Date, found: ".concat(value));
        };
        Record.ensureValidTime = function (value) {
            if (!!value && value.constructor === DateTime_1.DateTime) {
                return;
            }
            throw new TypeError("Expecting a Time, found: ".concat(value));
        };
        Record.ensureValidDateTime = function (value) {
            if (!!value && value.constructor === DateTime_1.DateTime) {
                return;
            }
            throw new TypeError("Expecting a DateTime, found: ".concat(value));
        };
        Record.ensureValidComplexType = function (value, valueType) {
            if (!!value) {
                if (value.constructor === valueType) {
                    return;
                }
                if (value.isCompatibleWith !== undefined) {
                    if (value.isCompatibleWith(valueType)) {
                        return;
                    }
                    throw new TypeError("Expecting a ".concat(valueType.name, " type, found:  ").concat(value.constructor.name));
                }
            }
            throw new TypeError("Expecting a Record or RecordList, found: ".concat(value));
        };
        Record.prototype.replaceWith = function (other) {
            var data = Record.getData(other);
            this.writePropagate(data, new Cache());
        };
        Record.prototype.fastEquals = function (other) {
            return this === other;
        };
        Record.prototype.equals = function (other) {
            if (!other || this.constructor !== other.constructor) {
                return false;
            }
            return true;
        };
        Record.defineRecordClass = function (defaultValues) {
            return (0, LightImmutable_1.defineRecordClass)(defaultValues);
        };
        Record.prototype.clone = function () {
            var ctor = this.constructor;
            return new ctor(this.data, this.cloneCache());
        };
        return Record;
    }(ImmutableBase));
    exports.Record = Record;
    var StaticAttrDefinition = (function () {
        function StaticAttrDefinition(name, attrName, nameForJson, mandatory, ignoreForServer, dataType, defaultValueGetter, optimizeList, complexType) {
            this.name = name;
            this.attrName = attrName;
            this.nameForJson = nameForJson;
            this.mandatory = mandatory;
            this.ignoreForServer = ignoreForServer;
            this.dataType = dataType;
            this.optimizeList = optimizeList;
            this.complexType = complexType;
            this.defaultValue = defaultValueGetter();
        }
        return StaticAttrDefinition;
    }());
    var DynamicAttrDefinition = (function () {
        function DynamicAttrDefinition(name, attrName, nameForJson, mandatory, ignoreForServer, dataType, defaultValueGetter, optimizeList, complexType) {
            this.name = name;
            this.attrName = attrName;
            this.nameForJson = nameForJson;
            this.mandatory = mandatory;
            this.ignoreForServer = ignoreForServer;
            this.dataType = dataType;
            this.defaultValueGetter = defaultValueGetter;
            this.optimizeList = optimizeList;
            this.complexType = complexType;
        }
        Object.defineProperty(DynamicAttrDefinition.prototype, "defaultValue", {
            get: function () {
                return this.defaultValueGetter();
            },
            enumerable: false,
            configurable: true
        });
        return DynamicAttrDefinition;
    }());
    function dataTypeImplementsEquals(dataType) {
        return (dataType === DataTypes.Record ||
            dataType === DataTypes.RecordList ||
            dataType === DataTypes.LongInteger ||
            dataType === DataTypes.Decimal ||
            dataType === DataTypes.Currency ||
            dataType === DataTypes.DateTime ||
            dataType === DataTypes.Time ||
            dataType === DataTypes.Date);
    }
    var GenericRecord = (function (_super) {
        tslib_1.__extends(GenericRecord, _super);
        function GenericRecord(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        Object.defineProperty(GenericRecord, "isGenericRecordType", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        GenericRecord.prototype.getAttributes = function () {
            return this.constructor.Attributes || [];
        };
        GenericRecord.getAttributes = function () {
            return this.Attributes || [];
        };
        GenericRecord.isAnonymousRecord = function () {
            return this._isAnonymousRecord;
        };
        GenericRecord.attr = function (name, attrName, nameForJson, mandatory, ignoreForServer, dataType, defaultValue, optimizeListOrComplexType, complexType) {
            if (optimizeListOrComplexType === void 0) { optimizeListOrComplexType = true; }
            var optimizeList;
            if (typeof optimizeListOrComplexType !== "boolean") {
                complexType = optimizeListOrComplexType;
                optimizeList = true;
            }
            else {
                optimizeList = optimizeListOrComplexType;
            }
            if (dataType === DataTypes.DateTime || dataType === DataTypes.Date || dataType === DataTypes.Time) {
                return new DynamicAttrDefinition(name, attrName, nameForJson, mandatory, ignoreForServer, dataType, defaultValue, optimizeList, complexType);
            }
            else {
                return new StaticAttrDefinition(name, attrName, nameForJson, mandatory, ignoreForServer, dataType, defaultValue, optimizeList, complexType);
            }
        };
        GenericRecord.attributesToDeclare = function () {
            return [];
        };
        GenericRecord.init = function () {
            var classDef = this;
            var attributes = classDef.attributesToDeclare();
            classDef.Attributes = attributes;
            attributes.forEach(function (attr) {
                if (!(attr.attrName in classDef.prototype)) {
                    if (attr.dataType === DataTypes.Record || attr.dataType === DataTypes.RecordList) {
                        classDef.defineComplexProperty(attr.attrName, attr.dataType, attr.complexType);
                    }
                    else {
                        classDef.defineBasicProperty(attr.attrName, attr.dataType);
                    }
                }
            });
            classDef.RecordClass = Record.defineRecordClass(attributes.reduce(function (recordAttributes, attr) {
                recordAttributes[attr.attrName] = null;
                return recordAttributes;
            }, {}));
            classDef.prototype.equals = (0, Settings_1.getEnvParams)().EnforceUnsafeEval ? equalsWithEval() : equalsWithoutEval();
            function equalsWithEval() {
                var equalsCode = "return function equals(other) {\n";
                equalsCode += "    return _super.prototype.equals.call(this, other)";
                attributes.forEach(function (attr) {
                    if (dataTypeImplementsEquals(attr.dataType)) {
                        equalsCode += " &&\n        this.".concat(attr.attrName, ".equals(other.").concat(attr.attrName, ")");
                    }
                    else {
                        equalsCode += " &&\n        (this.".concat(attr.attrName, " === other.").concat(attr.attrName, ")");
                    }
                });
                equalsCode += ";\n";
                equalsCode += "};";
                return new Function("_super", equalsCode)(GenericRecord);
            }
            function equalsWithoutEval() {
                return function (other) {
                    var _this = this;
                    return (GenericRecord.prototype.equals.call(this, other) &&
                        attributes.every(function (attr) {
                            return dataTypeImplementsEquals(attr.dataType)
                                ? _this[attr.attrName].equals(other[attr.attrName])
                                : _this[attr.attrName] === other[attr.attrName];
                        }));
                };
            }
        };
        GenericRecord.createDefaultData = function () {
            var classDef = this;
            var recordClass = classDef.RecordClass;
            if (recordClass) {
                var defaultData = {};
                for (var _i = 0, _a = classDef.Attributes; _i < _a.length; _i++) {
                    var attr = _a[_i];
                    if (attr.dataType === DataTypes.Record || attr.dataType === DataTypes.RecordList) {
                        defaultData[attr.attrName] = Record.getData(attr.defaultValue);
                    }
                    else {
                        defaultData[attr.attrName] = attr.defaultValue;
                    }
                }
                return new recordClass(defaultData);
            }
            return undefined;
        };
        GenericRecord.defineBasicProperty = function (attrName, dataType) {
            Object.defineProperty(this.prototype, attrName, {
                enumerable: true,
                configurable: true,
                get: function () {
                    return this.getBasicProperty(attrName);
                },
                set: function (value) {
                    this.setBasicProperty(attrName, value, dataType);
                },
            });
        };
        GenericRecord.defineComplexProperty = function (attrName, dataType, runtimeType) {
            Object.defineProperty(this.prototype, attrName, {
                enumerable: true,
                configurable: true,
                get: function () {
                    return this.getComplexProperty(attrName, runtimeType);
                },
                set: function (value) {
                    this.setComplexProperty(attrName, value, dataType, runtimeType);
                },
            });
        };
        GenericRecord.isCompatibleWith = function (otherRecordType) {
            if (this === otherRecordType) {
                return true;
            }
            return (this.isAnonymousRecord() &&
                otherRecordType.isAnonymousRecord() &&
                this.UniqueId === otherRecordType.UniqueId);
        };
        GenericRecord.prototype.isCompatibleWith = function (otherType) {
            return (otherType.prototype instanceof GenericRecord &&
                this.constructor.isCompatibleWith(otherType));
        };
        GenericRecord.prototype.getNonSerializableAttributes = function () {
            return this.getAttributes()
                .filter(function (a) { return a.dataType === DataTypes.Object; })
                .map(function (a) { return a.attrName; });
        };
        GenericRecord.UniqueId = "";
        GenericRecord._isAnonymousRecord = false;
        return GenericRecord;
    }(Record));
    exports.GenericRecord = GenericRecord;
    var List = (function (_super) {
        tslib_1.__extends(List, _super);
        function List() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        List.getItemType = function () {
            return this.itemType;
        };
        List.prototype.getCache = function () {
            return null;
        };
        List.prototype.newItem = function (defaults) {
            throw new Error("@abstract");
        };
        List.prototype.resetEmptyListItem = function () {
            this.data = this.data.setEmptyListItem(this.newItem());
        };
        Object.defineProperty(List.prototype, "emptyListItem", {
            get: function () {
                return this.isEmpty ? this.data.getEmptyListItem() : this.data.get(0);
            },
            set: function (value) {
                if (this.isEmpty) {
                    if (this.data.getEmptyListItem() === value) {
                        return;
                    }
                    this.writePropagate(this.data.setEmptyListItem(value), this.getCache());
                }
                else {
                    if (this.data.get(0) === value) {
                        return;
                    }
                    this.writePropagate(this.data.set(0, value), this.getCache());
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(List.prototype, "modelId", {
            get: function () {
                return this.data.modelId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(List.prototype, "isEmpty", {
            get: function () {
                return this.data.isEmpty();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(List.prototype, "length", {
            get: function () {
                return this.data.count();
            },
            enumerable: false,
            configurable: true
        });
        List.prototype.isValidIndex = function (index, acceptNextIndex) {
            if (acceptNextIndex === void 0) { acceptNextIndex = false; }
            return index % 1 === 0 && index >= 0 && index < this.length + (acceptNextIndex ? 1 : 0);
        };
        List.prototype.checkIndex = function (index, acceptNextIndex) {
            if (acceptNextIndex === void 0) { acceptNextIndex = false; }
            if (!this.isValidIndex(index, acceptNextIndex)) {
                var msg = "Index out of bounds. Index " + index + " for ";
                if (this.isEmpty) {
                    msg += "empty list.";
                }
                else {
                    msg += "bounds [0, " + (this.length - 1) + "].";
                }
                throw new Error(msg);
            }
        };
        List.prototype.idOf = function (index) {
            this.checkIndex(index);
            return this.data.getId(index);
        };
        List.prototype.append = function (value) {
            this.writePropagate(this.data.push(value), this.getCache());
        };
        List.prototype.appendAll = function (listToAppend) {
            if (listToAppend.length > 0) {
                this.writePropagate(this.data.addFromOther(listToAppend.data), this.getCache());
            }
        };
        List.prototype.pushAll = function (listToAppend) {
            if (listToAppend.length > 0) {
                this.writePropagate(this.data.pushAll(listToAppend), this.getCache());
            }
        };
        List.prototype.insert = function (index, value) {
            this.checkIndex(index, true);
            this.writePropagate(this.data.insert(index, value), this.getCache());
        };
        List.prototype.remove = function (index) {
            this.checkIndex(index);
            if (this.length === 1) {
                this.resetEmptyListItem();
            }
            this.writePropagate(this.data.remove(index), this.getCache());
        };
        List.prototype.clear = function () {
            this.resetEmptyListItem();
            this.writePropagate(this.data.clear(), this.getCache());
        };
        List.prototype.indexOf = function (condition) {
            for (var i = 0; i < this.length; i++) {
                if (condition(this.getItem(i))) {
                    return i;
                }
            }
            return -1;
        };
        List.prototype.any = function (condition) {
            return this.indexOf(condition) !== -1;
        };
        List.prototype.all = function (condition) {
            return !this.any(function (elem) { return !condition(elem); });
        };
        List.prototype.filter = function (condition) {
            var result = new this.constructor();
            var elements = [];
            for (var i = 0; i < this.length; i++) {
                var item = this.getItem(i);
                if (condition(item)) {
                    elements.push(item);
                }
            }
            result.pushAll(elements);
            return result;
        };
        List.prototype.distinct = function () {
            var result = new this.constructor();
            var distinctItemIndexes = new Array();
            for (var i = 0; i < this.length; i++) {
                var current = this.getItem(i);
                var isToInsert = true;
                for (var j = 0; j < distinctItemIndexes.length; j++) {
                    if (equals(current, this.getItem(distinctItemIndexes[j]))) {
                        isToInsert = false;
                        break;
                    }
                }
                if (isToInsert) {
                    distinctItemIndexes.push(i);
                    result.append(current);
                }
            }
            return result;
        };
        List.prototype.sort = function (by, ascending) {
            var elements = [];
            for (var i = 0; i < this.length; i++) {
                elements[i] = this.getItem(i);
            }
            var factor = ascending ? 1 : -1;
            elements.sort(function (v1, v2) { return factor * compare(by(v1), by(v2)); });
            this.clear();
            this.pushAll(elements);
        };
        List.prototype.getCurrent = function (context) {
            if (this.isEmpty) {
                return this.emptyListItem;
            }
            else {
                var currentRowNumber = this.getCurrentRowNumber(context);
                return this.getItem(currentRowNumber);
            }
        };
        List.prototype.getCurrentRowNumber = function (context) {
            return context.getCurrentRowNumber(this);
        };
        List.prototype.getItem = function (index) {
            this.checkIndex(index);
            return this.data.get(index);
        };
        List.prototype.setCurrent = function (context, value) {
            if (this.isEmpty) {
                this.emptyListItem = value;
            }
            else {
                var currentRowNumber = this.getCurrentRowNumber(context);
                this.setItem(currentRowNumber, value);
            }
        };
        List.prototype.setItem = function (index, value) {
            this.checkIndex(index);
            if (this.data.get(index) !== value) {
                this.writePropagate(this.data.set(index, value), this.getCache());
            }
        };
        List.prototype.fastEquals = function (other) {
            return this === other;
        };
        List.prototype.equals = function (other) {
            if (!other || this.constructor !== other.constructor || this.length !== other.length) {
                return false;
            }
            if (this.isEmpty) {
                var thisEmptyListItem = this.emptyListItem;
                var otherEmptyListItem = other.emptyListItem;
                return equals(thisEmptyListItem, otherEmptyListItem);
            }
            else {
                for (var i = 0; i < this.length; i++) {
                    var thisItem = this.getItem(i);
                    var otherItem = other.getItem(i);
                    var result = equals(thisItem, otherItem);
                    if (!result) {
                        return false;
                    }
                }
            }
            return true;
        };
        return List;
    }(ImmutableBase));
    exports.List = List;
    var BasicTypeList = (function (_super) {
        tslib_1.__extends(BasicTypeList, _super);
        function BasicTypeList(defaults) {
            var _this = _super.call(this) || this;
            _this.data = defaults || new ImmutableListWithTracking(_this.newItem());
            return _this;
        }
        Object.defineProperty(BasicTypeList, "isBasicTypeListType", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        BasicTypeList.getTypeDefaultValue = function () {
            throw new Error("Not implemented: getTypeDefaultValue");
        };
        BasicTypeList.prototype.newItem = function () {
            var ctor = this.constructor;
            return ctor.getTypeDefaultValue();
        };
        BasicTypeList.prototype.clone = function () {
            var basicListType = this.constructor;
            var data = this.data.clone();
            return new basicListType(data);
        };
        return BasicTypeList;
    }(List));
    exports.BasicTypeList = BasicTypeList;
    var GenericRecordList = (function (_super) {
        tslib_1.__extends(GenericRecordList, _super);
        function GenericRecordList(defaults, cache) {
            var _this = _super.call(this) || this;
            _this._recordType = _this.constructor.getItemType();
            if (!_this._recordType) {
                throw new TypeError("GenericRecordLists must define a RecordType");
            }
            if (defaults) {
                _this.data = defaults;
            }
            else {
                _this.data = new ImmutableListWithTracking(GenericRecord.getData(_this.newItem()));
            }
            _this.cache = cache || new ListCache();
            return _this;
        }
        Object.defineProperty(GenericRecordList, "isGenericRecordListType", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        GenericRecordList.prototype.getCache = function () {
            return this.cache;
        };
        GenericRecordList.prototype.newItem = function (defaults) {
            return new (this.getRecordType())(defaults);
        };
        GenericRecordList.prototype.resetEmptyListItem = function () {
            this.data = this.data.setEmptyListItem(GenericRecord.getData(this.newItem()));
        };
        GenericRecordList.prototype.getRecordType = function () {
            return this._recordType;
        };
        Object.defineProperty(GenericRecordList.prototype, "emptyListItem", {
            get: function () {
                return this.internalGetItem(0, this.isEmpty);
            },
            set: function (value) {
                if (this.isEmpty) {
                    this.internalSetEmptyListItem(0, value);
                }
                else {
                    this.internalSetItem(0, value);
                }
            },
            enumerable: false,
            configurable: true
        });
        GenericRecordList.prototype.append = function (value) {
            if (this.isEmpty) {
                this.cache.invalidate(0);
            }
            _super.prototype.append.call(this, GenericRecord.getData(value));
            this.cache.append(undefined);
        };
        GenericRecordList.prototype.appendAll = function (listToAppend) {
            if (this.isEmpty) {
                this.cache.invalidate(0);
            }
            _super.prototype.appendAll.call(this, listToAppend);
            this.cache.appendMultiple(listToAppend.length);
        };
        GenericRecordList.prototype.pushAll = function (listToAppend) {
            if (this.isEmpty) {
                this.cache.invalidate(0);
            }
            _super.prototype.pushAll.call(this, listToAppend.map(function (item) { return Record.getData(item); }));
            this.cache.appendMultiple(listToAppend.length);
        };
        GenericRecordList.prototype.insert = function (index, value) {
            this.checkIndex(index, true);
            if (this.isEmpty) {
                this.cache.invalidate(0);
            }
            _super.prototype.insert.call(this, index, GenericRecord.getData(value));
            this.cache.insert(index, undefined);
        };
        GenericRecordList.prototype.getItem = function (index) {
            return this.internalGetItem(index, false);
        };
        GenericRecordList.prototype.internalGetItem = function (index, returnEmptyListItem) {
            if (!returnEmptyListItem) {
                this.checkIndex(index);
            }
            var result = this.cache.getItem(index);
            if (result) {
                GenericRecordList.setPropagationParent(result, this);
                GenericRecordList.setPropagationKey(result, index);
                return result;
            }
            if (returnEmptyListItem) {
                result = this.newItem(this.data.getEmptyListItem());
                GenericRecordList.setPropagationHandler(result, this, index, this.internalSetEmptyListItem);
            }
            else {
                result = this.newItem(this.data.get(index));
                GenericRecordList.setPropagationHandler(result, this, index, this.internalSetItem);
            }
            this.cache.setItem(index, result);
            return result;
        };
        GenericRecordList.prototype.setItem = function (index, value) {
            this.internalSetItem(index, value);
        };
        GenericRecordList.prototype.internalSetItem = function (index, value, cache) {
            var newData = GenericRecord.getData(value) || value;
            this.checkIndex(index);
            if (this.data.get(index) !== newData) {
                this.writePropagate(this.data.set(index, newData), this.cache);
                this.cache.setItem(index, undefined);
            }
        };
        GenericRecordList.prototype.internalSetEmptyListItem = function (index, value, cache) {
            var newData = GenericRecord.getData(value) || value;
            if (this.data.getEmptyListItem() !== newData) {
                this.writePropagate(this.data.setEmptyListItem(newData), this.cache);
                this.cache.setItem(index, undefined);
            }
        };
        GenericRecordList.prototype.remove = function (index) {
            _super.prototype.remove.call(this, index);
            this.cache.invalidate(index);
        };
        GenericRecordList.prototype.clear = function () {
            _super.prototype.clear.call(this);
            this.cache.invalidate();
        };
        GenericRecordList.prototype.readAll = function (readDb, dbRecords) {
            var records = [];
            for (var i = 0; i < dbRecords.length; i++) {
                var record = this.newItem();
                readDb(record, dbRecords.item(i));
                records.push(record);
            }
            this.pushAll(records);
        };
        GenericRecordList.prototype.clone = function () {
            var ctor = this.constructor;
            var data = this.data.clone();
            return new ctor(data);
        };
        GenericRecordList.isCompatibleWith = function (otherRecordListType) {
            if (this === otherRecordListType) {
                return true;
            }
            return this.getItemType().isCompatibleWith(otherRecordListType.getItemType());
        };
        GenericRecordList.prototype.isCompatibleWith = function (otherType) {
            return (otherType.prototype instanceof GenericRecordList &&
                this.constructor.isCompatibleWith(otherType));
        };
        return GenericRecordList;
    }(List));
    exports.GenericRecordList = GenericRecordList;
    var IntegerList = (function (_super) {
        tslib_1.__extends(IntegerList, _super);
        function IntegerList(defaults) {
            return _super.call(this, defaults) || this;
        }
        IntegerList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_INTEGER;
        };
        IntegerList.itemType = DataTypes.Integer;
        return IntegerList;
    }(BasicTypeList));
    exports.IntegerList = IntegerList;
    var LongIntegerList = (function (_super) {
        tslib_1.__extends(LongIntegerList, _super);
        function LongIntegerList(defaults) {
            return _super.call(this, defaults) || this;
        }
        LongIntegerList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_LONGINTEGER;
        };
        LongIntegerList.itemType = DataTypes.LongInteger;
        return LongIntegerList;
    }(BasicTypeList));
    exports.LongIntegerList = LongIntegerList;
    var DateList = (function (_super) {
        tslib_1.__extends(DateList, _super);
        function DateList(defaults) {
            return _super.call(this, defaults) || this;
        }
        DateList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_DATE;
        };
        DateList.itemType = DataTypes.Date;
        return DateList;
    }(BasicTypeList));
    exports.DateList = DateList;
    var DateTimeList = (function (_super) {
        tslib_1.__extends(DateTimeList, _super);
        function DateTimeList(defaults) {
            return _super.call(this, defaults) || this;
        }
        DateTimeList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_DATETIME;
        };
        DateTimeList.itemType = DataTypes.DateTime;
        return DateTimeList;
    }(BasicTypeList));
    exports.DateTimeList = DateTimeList;
    var TimeList = (function (_super) {
        tslib_1.__extends(TimeList, _super);
        function TimeList(defaults) {
            return _super.call(this, defaults) || this;
        }
        TimeList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_TIME;
        };
        TimeList.itemType = DataTypes.Time;
        return TimeList;
    }(BasicTypeList));
    exports.TimeList = TimeList;
    var DecimalList = (function (_super) {
        tslib_1.__extends(DecimalList, _super);
        function DecimalList(defaults) {
            return _super.call(this, defaults) || this;
        }
        DecimalList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_DECIMAL;
        };
        DecimalList.itemType = DataTypes.Decimal;
        return DecimalList;
    }(BasicTypeList));
    exports.DecimalList = DecimalList;
    var CurrencyList = (function (_super) {
        tslib_1.__extends(CurrencyList, _super);
        function CurrencyList(defaults) {
            return _super.call(this, defaults) || this;
        }
        CurrencyList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_CURRENCY;
        };
        CurrencyList.itemType = DataTypes.Currency;
        return CurrencyList;
    }(BasicTypeList));
    exports.CurrencyList = CurrencyList;
    var EmailList = (function (_super) {
        tslib_1.__extends(EmailList, _super);
        function EmailList(defaults) {
            return _super.call(this, defaults) || this;
        }
        EmailList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_EMAIL;
        };
        EmailList.itemType = DataTypes.Email;
        return EmailList;
    }(BasicTypeList));
    exports.EmailList = EmailList;
    var PhoneNumberList = (function (_super) {
        tslib_1.__extends(PhoneNumberList, _super);
        function PhoneNumberList(defaults) {
            return _super.call(this, defaults) || this;
        }
        PhoneNumberList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_PHONENUMBER;
        };
        PhoneNumberList.itemType = DataTypes.PhoneNumber;
        return PhoneNumberList;
    }(BasicTypeList));
    exports.PhoneNumberList = PhoneNumberList;
    var BooleanList = (function (_super) {
        tslib_1.__extends(BooleanList, _super);
        function BooleanList(defaults) {
            return _super.call(this, defaults) || this;
        }
        BooleanList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_BOOLEAN;
        };
        BooleanList.itemType = DataTypes.Boolean;
        return BooleanList;
    }(BasicTypeList));
    exports.BooleanList = BooleanList;
    var BinaryDataList = (function (_super) {
        tslib_1.__extends(BinaryDataList, _super);
        function BinaryDataList(defaults) {
            return _super.call(this, defaults) || this;
        }
        BinaryDataList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_BINARYDATA;
        };
        BinaryDataList.itemType = DataTypes.BinaryData;
        return BinaryDataList;
    }(BasicTypeList));
    exports.BinaryDataList = BinaryDataList;
    var TextList = (function (_super) {
        tslib_1.__extends(TextList, _super);
        function TextList(defaults) {
            return _super.call(this, defaults) || this;
        }
        TextList.getTypeDefaultValue = function () {
            return Constants.DEFAULT_TEXT;
        };
        TextList.itemType = DataTypes.Text;
        return TextList;
    }(BasicTypeList));
    exports.TextList = TextList;
    var BasicVariableHolder = (function () {
        function BasicVariableHolder(defaultValue) {
            this.varValue = defaultValue;
        }
        Object.defineProperty(BasicVariableHolder.prototype, "value", {
            get: function () {
                return this.varValue;
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: false,
            configurable: true
        });
        BasicVariableHolder.prototype.setValue = function (value) {
            this.varValue = value;
        };
        return BasicVariableHolder;
    }());
    exports.BasicVariableHolder = BasicVariableHolder;
    var VariableHolder = (function (_super) {
        tslib_1.__extends(VariableHolder, _super);
        function VariableHolder(defaultValue) {
            return _super.call(this, defaultValue) || this;
        }
        VariableHolder.prototype.setValue = function (value) {
            _super.prototype.setValue.call(this, value ? value.clone() : value);
        };
        return VariableHolder;
    }(BasicVariableHolder));
    exports.VariableHolder = VariableHolder;
    function RecordWithStaticConstructor() {
        return function (target) {
            var asAny = target;
            if (asAny.init !== undefined) {
                asAny.init();
            }
        };
    }
    exports.RecordWithStaticConstructor = RecordWithStaticConstructor;
    var JSONSerializeOutputType = (function (_super) {
        tslib_1.__extends(JSONSerializeOutputType, _super);
        function JSONSerializeOutputType(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        JSONSerializeOutputType.attributesToDeclare = function () {
            return [
                this.attr("JSON", "jSONOut", "jSONOut", true, true, DataTypes.Text, function () {
                    return defaultForType(DataTypes.Text);
                }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        JSONSerializeOutputType = tslib_1.__decorate([
            RecordWithStaticConstructor()
        ], JSONSerializeOutputType);
        return JSONSerializeOutputType;
    }(GenericRecord));
    exports.JSONSerializeOutputType = JSONSerializeOutputType;
    var ErrorHandlerOutputType = (function (_super) {
        tslib_1.__extends(ErrorHandlerOutputType, _super);
        function ErrorHandlerOutputType(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        ErrorHandlerOutputType.attributesToDeclare = function () {
            return [
                this.attr("ExceptionMessage", "exceptionMessageAttr", "exceptionMessageAttr", true, true, DataTypes.Text, function () {
                    return defaultForType(DataTypes.Text);
                }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        ErrorHandlerOutputType = tslib_1.__decorate([
            RecordWithStaticConstructor()
        ], ErrorHandlerOutputType);
        return ErrorHandlerOutputType;
    }(GenericRecord));
    exports.ErrorHandlerOutputType = ErrorHandlerOutputType;
    var RecordTypeFactory = (function () {
        function RecordTypeFactory() {
            this.typeDefinitions = new Map();
            this.typeCache = new Map();
        }
        RecordTypeFactory.prototype.isTypeRegistered = function (key) {
            return this.typeDefinitions.get(key) !== undefined;
        };
        RecordTypeFactory.prototype.registerTypeDefinition = function (key, typeDefinition) {
            this.typeDefinitions.set(key, typeDefinition);
        };
        RecordTypeFactory.prototype.getType = function (key) {
            var type = this.typeCache.get(key);
            if (type) {
                return type;
            }
            var attrs = this.typeDefinitions.get(key);
            if (!attrs) {
                throw new TypeError("Type ".concat(key, " was not registered"));
            }
            var RecordType = (function (_super) {
                tslib_1.__extends(RecordType, _super);
                function RecordType(defaults, cache) {
                    return _super.call(this, defaults, cache) || this;
                }
                RecordType.attributesToDeclare = function () {
                    var _this = this;
                    return attrs
                        .map(function (attrInfo) {
                        return _this.attr(attrInfo.name, attrInfo.attrName, attrInfo.nameForJson || attrInfo.attrName, attrInfo.mandatory === undefined ? false : attrInfo.mandatory, attrInfo.ignoreForServer === undefined ? true : attrInfo.ignoreForServer, attrInfo.dataType, attrInfo.defaultValue, attrInfo.optimizeList === undefined ? true : attrInfo.optimizeList, attrInfo.complexType);
                    })
                        .concat(_super.attributesToDeclare.call(this));
                };
                RecordType = tslib_1.__decorate([
                    RecordWithStaticConstructor()
                ], RecordType);
                return RecordType;
            }(GenericRecord));
            this.typeCache.set(key, RecordType);
            return RecordType;
        };
        return RecordTypeFactory;
    }());
    exports.RecordTypeFactory = RecordTypeFactory;
    var TypeKeyedTypeFactory = (function (_super) {
        tslib_1.__extends(TypeKeyedTypeFactory, _super);
        function TypeKeyedTypeFactory(mainAttributeName, mainAttributeAttrName, additionalAttributes) {
            var _this = _super.call(this) || this;
            _this.mainAttributeName = mainAttributeName;
            _this.mainAttributeAttrName = mainAttributeAttrName;
            _this.additionalAttributes = additionalAttributes;
            return _this;
        }
        TypeKeyedTypeFactory.prototype.registerTypeDefinition = function (key, typeDefinition) {
            throw new Error("Invalid operation");
        };
        TypeKeyedTypeFactory.prototype.createMainAttributeInfo = function (type) {
            return {
                name: this.mainAttributeName,
                attrName: this.mainAttributeAttrName,
                mandatory: true,
                dataType: this.getDataType(type),
                defaultValue: this.getDefaultValue(type),
                complexType: this.getComplexType(type),
            };
        };
        TypeKeyedTypeFactory.prototype.registerTypeIfNeeded = function (type) {
            if (!this.isTypeRegistered(type)) {
                var attrs = [this.createMainAttributeInfo(type)];
                if (this.additionalAttributes) {
                    attrs = attrs.concat(this.additionalAttributes);
                }
                _super.prototype.registerTypeDefinition.call(this, type, attrs);
            }
        };
        TypeKeyedTypeFactory.prototype.getType = function (key) {
            this.registerTypeIfNeeded(key);
            return _super.prototype.getType.call(this, key);
        };
        return TypeKeyedTypeFactory;
    }(RecordTypeFactory));
    exports.TypeKeyedTypeFactory = TypeKeyedTypeFactory;
    var BasicTypeKeyedTypeFactory = (function (_super) {
        tslib_1.__extends(BasicTypeKeyedTypeFactory, _super);
        function BasicTypeKeyedTypeFactory(mainAttributeName, mainAttributeAttrName, additionalAttributes) {
            return _super.call(this, mainAttributeName, mainAttributeAttrName, additionalAttributes) || this;
        }
        BasicTypeKeyedTypeFactory.prototype.getDataType = function (type) {
            return type;
        };
        BasicTypeKeyedTypeFactory.prototype.getDefaultValue = function (type) {
            return function () { return defaultForType(type); };
        };
        BasicTypeKeyedTypeFactory.prototype.getComplexType = function (type) {
            return;
        };
        return BasicTypeKeyedTypeFactory;
    }(TypeKeyedTypeFactory));
    exports.BasicTypeKeyedTypeFactory = BasicTypeKeyedTypeFactory;
    var ComplexTypeKeyedTypeFactory = (function (_super) {
        tslib_1.__extends(ComplexTypeKeyedTypeFactory, _super);
        function ComplexTypeKeyedTypeFactory(mainAttributeName, mainAttributeAttrName, additionalAttributes) {
            return _super.call(this, mainAttributeName, mainAttributeAttrName, additionalAttributes) || this;
        }
        ComplexTypeKeyedTypeFactory.prototype.getDataType = function (type) {
            return DataTypes.Record;
        };
        ComplexTypeKeyedTypeFactory.prototype.getDefaultValue = function (type) {
            return function () { return ImmutableBase.getData(new type()); };
        };
        ComplexTypeKeyedTypeFactory.prototype.getComplexType = function (type) {
            return type;
        };
        return ComplexTypeKeyedTypeFactory;
    }(TypeKeyedTypeFactory));
    exports.ComplexTypeKeyedTypeFactory = ComplexTypeKeyedTypeFactory;
    var TypeValidations;
    (function (TypeValidations) {
        function isDecimal(value) {
            return value && value.constructor === Decimal_1.default;
        }
        TypeValidations.isDecimal = isDecimal;
        function isBinaryData(value) {
            return value && value.value && value.value.constructor === BinaryData;
        }
        TypeValidations.isBinaryData = isBinaryData;
        function isValidDecimal(value) {
            return isDecimal(value) && !value.isNaN();
        }
        TypeValidations.isValidDecimal = isValidDecimal;
        function isWithinDecimalRange(value) {
            return (Constants.MIN_DECIMAL_VALUE.lessThanOrEqualTo(value) &&
                Constants.MAX_DECIMAL_VALUE.greaterThanOrEqualTo(value));
        }
        TypeValidations.isWithinDecimalRange = isWithinDecimalRange;
        function isText(value) {
            return typeof value === "string";
        }
        TypeValidations.isText = isText;
        function isBoolean(value) {
            return typeof value === "boolean";
        }
        TypeValidations.isBoolean = isBoolean;
        function isBasicType(value) {
            return (isText(value) ||
                isJsNumber(value) ||
                isBoolean(value) ||
                isDateTime(value) ||
                isLongInteger(value) ||
                isDecimal(value));
        }
        TypeValidations.isBasicType = isBasicType;
        function isValidInteger(value) {
            return isValidJsNumber(value) && value % 1 === 0;
        }
        TypeValidations.isValidInteger = isValidInteger;
        function isValidJsNumber(value) {
            return isJsNumber(value) && !isNaN(value);
        }
        TypeValidations.isValidJsNumber = isValidJsNumber;
        function isJsNumber(value) {
            return typeof value === "number";
        }
        TypeValidations.isJsNumber = isJsNumber;
        function isWithinIntegerRange(value) {
            return value >= Constants.MIN_INTEGER_VALUE && value <= Constants.MAX_INTEGER_VALUE;
        }
        TypeValidations.isWithinIntegerRange = isWithinIntegerRange;
        function isValidLongInteger(value) {
            return isLongInteger(value);
        }
        TypeValidations.isValidLongInteger = isValidLongInteger;
        function isLongInteger(value) {
            return value && value.constructor === LongInteger_1.default;
        }
        TypeValidations.isLongInteger = isLongInteger;
        function isValidDate(value) {
            return (isValidDateTime(value) &&
                value.hours === Constants.DEFAULT_DATE.hours &&
                value.minutes === Constants.DEFAULT_DATE.minutes &&
                value.seconds === Constants.DEFAULT_DATE.seconds);
        }
        TypeValidations.isValidDate = isValidDate;
        function isValidTime(value) {
            return (isValidDateTime(value) &&
                value.year === Constants.DEFAULT_TIME.year &&
                value.month === Constants.DEFAULT_TIME.month &&
                value.day === Constants.DEFAULT_TIME.day);
        }
        TypeValidations.isValidTime = isValidTime;
        function isDateTime(value) {
            return value instanceof DateTime_1.DateTime;
        }
        TypeValidations.isDateTime = isDateTime;
        function isValidDateTime(value) {
            return (isDateTime(value) &&
                ((0, Settings_1.getEnvParams)().DateTimeRevamp ? !value.isInvalid : !isNaN(value.getTime())));
        }
        TypeValidations.isValidDateTime = isValidDateTime;
        function isJsDate(value) {
            return value instanceof Date || Object.prototype.toString.call(value) === "[object Date]";
        }
        TypeValidations.isJsDate = isJsDate;
        function isValidJsDate(value) {
            return isJsDate(value) && !isNaN(value.getTime());
        }
        TypeValidations.isValidJsDate = isValidJsDate;
        function hasBinaryDataInterface(value) {
            return !!value && (value.content !== undefined || value.url !== undefined);
        }
        TypeValidations.hasBinaryDataInterface = hasBinaryDataInterface;
        var MAX_SAFE_NUMBER = 9007199254740991;
        var MIN_SAFE_NUMBER = -9007199254740991;
        function ensureNumberInsideBounds(value) {
            var maxOrMin = "";
            var maxOrMinValue = "";
            if (value.greaterThan(MAX_SAFE_NUMBER)) {
                maxOrMin = "maximum";
                maxOrMinValue = MAX_SAFE_NUMBER.toString();
            }
            else if (value.lessThan(MIN_SAFE_NUMBER)) {
                maxOrMin = "minimum";
                maxOrMinValue = MIN_SAFE_NUMBER.toString();
            }
            else {
                return;
            }
            var NUMBER_EXCEEDS_MESSAGE = "Unable to convert ".concat(value.toString(), " to the Javascript Number type since exceeds the ").concat(maxOrMin, " value allowed which is ").concat(maxOrMinValue, ".");
            throw new Exceptions_1.Exceptions.NumberOverflowException(NUMBER_EXCEEDS_MESSAGE);
        }
        TypeValidations.ensureNumberInsideBounds = ensureNumberInsideBounds;
        function ensureNumberPrecision(value) {
            var MAX_PRECISION = 16;
            if (value.decimalPlaces() > MAX_PRECISION) {
                var NUMBER_PRECISION_EXCEEDS_MESSAGE = "Unable to convert ".concat(value.toString(), " to the Javascript Number type because it will lead to precision loss. The maximum safe number of digits after the decimal point is ").concat(MAX_PRECISION, ".");
                throw new Exceptions_1.Exceptions.NumberOverflowException(NUMBER_PRECISION_EXCEEDS_MESSAGE);
            }
        }
        TypeValidations.ensureNumberPrecision = ensureNumberPrecision;
        var RangeBoundaries = (function () {
            function RangeBoundaries() {
            }
            Object.defineProperty(RangeBoundaries, "None", {
                get: function () {
                    return "";
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(RangeBoundaries, "Minimum", {
                get: function () {
                    return "minimum";
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(RangeBoundaries, "Maximum", {
                get: function () {
                    return "maximum";
                },
                enumerable: false,
                configurable: true
            });
            return RangeBoundaries;
        }());
        function makeBasicTypeExceedsLimitMessage(value, type, limitHit, limitValue) {
            return "Unable to convert ".concat(value, " to the ").concat(type, " type since it exceeds the ").concat(limitHit, " value allowed which is ").concat(limitValue, ".");
        }
        function ensureNumericPlatformTypeInsideBounds(value, min, max, type) {
            var limitHit = RangeBoundaries.None;
            var limitValue = "";
            var minNumber = Math.max(min, MIN_SAFE_NUMBER);
            var maxNumber = Math.min(max, MAX_SAFE_NUMBER);
            if (value < minNumber) {
                limitHit = RangeBoundaries.Minimum;
                limitValue = minNumber.toString();
            }
            else if (value > maxNumber) {
                limitHit = RangeBoundaries.Maximum;
                limitValue = maxNumber.toString();
            }
            else {
                return null;
            }
            throw new Exceptions_1.Exceptions.NumberOverflowException(makeBasicTypeExceedsLimitMessage(value.toString(), type, limitHit, limitValue));
        }
        function ensureIntegerInsideBounds(value) {
            ensureNumericPlatformTypeInsideBounds(value, Constants.MIN_INTEGER_VALUE, Constants.MAX_INTEGER_VALUE, "Integer");
        }
        TypeValidations.ensureIntegerInsideBounds = ensureIntegerInsideBounds;
        function ensureLongIntegerInsideBounds(value) {
            ensureNumericPlatformTypeInsideBounds(value, Constants.MIN_LONGINTEGER_VALUE.toNumber(), Constants.MAX_LONGINTEGER_VALUE.toNumber(), "Long Integer");
        }
        TypeValidations.ensureLongIntegerInsideBounds = ensureLongIntegerInsideBounds;
        function ensureDecimalInsideBounds(value) {
            ensureNumericPlatformTypeInsideBounds(value, Constants.MIN_DECIMAL_VALUE.toNumber(), Constants.MAX_DECIMAL_VALUE.toNumber(), "Decimal");
        }
        TypeValidations.ensureDecimalInsideBounds = ensureDecimalInsideBounds;
    })(TypeValidations || (exports.TypeValidations = TypeValidations = {}));
});
//# sourceMappingURL=DataTypes.js.map;
define('path-to-regexp',["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.compile = compile;
  _exports.match = match;
  _exports.parse = parse;
  _exports.pathToRegexp = pathToRegexp;
  _exports.regexpToFunction = regexpToFunction;
  _exports.tokensToFunction = tokensToFunction;
  _exports.tokensToRegexp = tokensToRegexp;
  /**
   * Tokenize input string.
   */
  function lexer(str) {
    var tokens = [];
    var i = 0;
    while (i < str.length) {
      var char = str[i];
      if (char === "*" || char === "+" || char === "?") {
        tokens.push({
          type: "MODIFIER",
          index: i,
          value: str[i++]
        });
        continue;
      }
      if (char === "\\") {
        tokens.push({
          type: "ESCAPED_CHAR",
          index: i++,
          value: str[i++]
        });
        continue;
      }
      if (char === "{") {
        tokens.push({
          type: "OPEN",
          index: i,
          value: str[i++]
        });
        continue;
      }
      if (char === "}") {
        tokens.push({
          type: "CLOSE",
          index: i,
          value: str[i++]
        });
        continue;
      }
      if (char === ":") {
        var name = "";
        var j = i + 1;
        while (j < str.length) {
          var code = str.charCodeAt(j);
          if (
          // `0-9`
          code >= 48 && code <= 57 ||
          // `A-Z`
          code >= 65 && code <= 90 ||
          // `a-z`
          code >= 97 && code <= 122 ||
          // `_`
          code === 95) {
            name += str[j++];
            continue;
          }
          break;
        }
        if (!name) throw new TypeError("Missing parameter name at ".concat(i));
        tokens.push({
          type: "NAME",
          index: i,
          value: name
        });
        i = j;
        continue;
      }
      if (char === "(") {
        var count = 1;
        var pattern = "";
        var j = i + 1;
        if (str[j] === "?") {
          throw new TypeError("Pattern cannot start with \"?\" at ".concat(j));
        }
        while (j < str.length) {
          if (str[j] === "\\") {
            pattern += str[j++] + str[j++];
            continue;
          }
          if (str[j] === ")") {
            count--;
            if (count === 0) {
              j++;
              break;
            }
          } else if (str[j] === "(") {
            count++;
            if (str[j + 1] !== "?") {
              throw new TypeError("Capturing groups are not allowed at ".concat(j));
            }
          }
          pattern += str[j++];
        }
        if (count) throw new TypeError("Unbalanced pattern at ".concat(i));
        if (!pattern) throw new TypeError("Missing pattern at ".concat(i));
        tokens.push({
          type: "PATTERN",
          index: i,
          value: pattern
        });
        i = j;
        continue;
      }
      tokens.push({
        type: "CHAR",
        index: i,
        value: str[i++]
      });
    }
    tokens.push({
      type: "END",
      index: i,
      value: ""
    });
    return tokens;
  }
  /**
   * Parse a string for the raw tokens.
   */
  function parse(str, options) {
    if (options === void 0) {
      options = {};
    }
    var tokens = lexer(str);
    var _a = options.prefixes,
      prefixes = _a === void 0 ? "./" : _a,
      _b = options.delimiter,
      delimiter = _b === void 0 ? "/#?" : _b;
    var result = [];
    var key = 0;
    var i = 0;
    var path = "";
    var tryConsume = function (type) {
      if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;
    };
    var mustConsume = function (type) {
      var value = tryConsume(type);
      if (value !== undefined) return value;
      var _a = tokens[i],
        nextType = _a.type,
        index = _a.index;
      throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
    };
    var consumeText = function () {
      var result = "";
      var value;
      while (value = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
        result += value;
      }
      return result;
    };
    var isSafe = function (value) {
      for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {
        var char = delimiter_1[_i];
        if (value.indexOf(char) > -1) return true;
      }
      return false;
    };
    var safePattern = function (prefix) {
      var prev = result[result.length - 1];
      var prevText = prefix || (prev && typeof prev === "string" ? prev : "");
      if (prev && !prevText) {
        throw new TypeError("Must have text between two parameters, missing text after \"".concat(prev.name, "\""));
      }
      if (!prevText || isSafe(prevText)) return "[^".concat(escapeString(delimiter), "]+?");
      return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
    };
    while (i < tokens.length) {
      var char = tryConsume("CHAR");
      var name = tryConsume("NAME");
      var pattern = tryConsume("PATTERN");
      if (name || pattern) {
        var prefix = char || "";
        if (prefixes.indexOf(prefix) === -1) {
          path += prefix;
          prefix = "";
        }
        if (path) {
          result.push(path);
          path = "";
        }
        result.push({
          name: name || key++,
          prefix: prefix,
          suffix: "",
          pattern: pattern || safePattern(prefix),
          modifier: tryConsume("MODIFIER") || ""
        });
        continue;
      }
      var value = char || tryConsume("ESCAPED_CHAR");
      if (value) {
        path += value;
        continue;
      }
      if (path) {
        result.push(path);
        path = "";
      }
      var open = tryConsume("OPEN");
      if (open) {
        var prefix = consumeText();
        var name_1 = tryConsume("NAME") || "";
        var pattern_1 = tryConsume("PATTERN") || "";
        var suffix = consumeText();
        mustConsume("CLOSE");
        result.push({
          name: name_1 || (pattern_1 ? key++ : ""),
          pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
          prefix: prefix,
          suffix: suffix,
          modifier: tryConsume("MODIFIER") || ""
        });
        continue;
      }
      mustConsume("END");
    }
    return result;
  }
  /**
   * Compile a string to a template function for the path.
   */
  function compile(str, options) {
    return tokensToFunction(parse(str, options), options);
  }
  /**
   * Expose a method for transforming tokens into the path function.
   */
  function tokensToFunction(tokens, options) {
    if (options === void 0) {
      options = {};
    }
    var reFlags = flags(options);
    var _a = options.encode,
      encode = _a === void 0 ? function (x) {
        return x;
      } : _a,
      _b = options.validate,
      validate = _b === void 0 ? true : _b;
    // Compile all the tokens into regexps.
    var matches = tokens.map(function (token) {
      if (typeof token === "object") {
        return new RegExp("^(?:".concat(token.pattern, ")$"), reFlags);
      }
    });
    return function (data) {
      var path = "";
      for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (typeof token === "string") {
          path += token;
          continue;
        }
        var value = data ? data[token.name] : undefined;
        var optional = token.modifier === "?" || token.modifier === "*";
        var repeat = token.modifier === "*" || token.modifier === "+";
        if (Array.isArray(value)) {
          if (!repeat) {
            throw new TypeError("Expected \"".concat(token.name, "\" to not repeat, but got an array"));
          }
          if (value.length === 0) {
            if (optional) continue;
            throw new TypeError("Expected \"".concat(token.name, "\" to not be empty"));
          }
          for (var j = 0; j < value.length; j++) {
            var segment = encode(value[j], token);
            if (validate && !matches[i].test(segment)) {
              throw new TypeError("Expected all \"".concat(token.name, "\" to match \"").concat(token.pattern, "\", but got \"").concat(segment, "\""));
            }
            path += token.prefix + segment + token.suffix;
          }
          continue;
        }
        if (typeof value === "string" || typeof value === "number") {
          var segment = encode(String(value), token);
          if (validate && !matches[i].test(segment)) {
            throw new TypeError("Expected \"".concat(token.name, "\" to match \"").concat(token.pattern, "\", but got \"").concat(segment, "\""));
          }
          path += token.prefix + segment + token.suffix;
          continue;
        }
        if (optional) continue;
        var typeOfMessage = repeat ? "an array" : "a string";
        throw new TypeError("Expected \"".concat(token.name, "\" to be ").concat(typeOfMessage));
      }
      return path;
    };
  }
  /**
   * Create path match function from `path-to-regexp` spec.
   */
  function match(str, options) {
    var keys = [];
    var re = pathToRegexp(str, keys, options);
    return regexpToFunction(re, keys, options);
  }
  /**
   * Create a path match function from `path-to-regexp` output.
   */
  function regexpToFunction(re, keys, options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.decode,
      decode = _a === void 0 ? function (x) {
        return x;
      } : _a;
    return function (pathname) {
      var m = re.exec(pathname);
      if (!m) return false;
      var path = m[0],
        index = m.index;
      var params = Object.create(null);
      var _loop_1 = function (i) {
        if (m[i] === undefined) return "continue";
        var key = keys[i - 1];
        if (key.modifier === "*" || key.modifier === "+") {
          params[key.name] = m[i].split(key.prefix + key.suffix).map(function (value) {
            return decode(value, key);
          });
        } else {
          params[key.name] = decode(m[i], key);
        }
      };
      for (var i = 1; i < m.length; i++) {
        _loop_1(i);
      }
      return {
        path: path,
        index: index,
        params: params
      };
    };
  }
  /**
   * Escape a regular expression string.
   */
  function escapeString(str) {
    return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  }
  /**
   * Get the flags for a regexp from the options.
   */
  function flags(options) {
    return options && options.sensitive ? "" : "i";
  }
  /**
   * Pull out keys from a regexp.
   */
  function regexpToRegexp(path, keys) {
    if (!keys) return path;
    var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
    var index = 0;
    var execResult = groupsRegex.exec(path.source);
    while (execResult) {
      keys.push({
        // Use parenthesized substring match if available, index otherwise
        name: execResult[1] || index++,
        prefix: "",
        suffix: "",
        modifier: "",
        pattern: ""
      });
      execResult = groupsRegex.exec(path.source);
    }
    return path;
  }
  /**
   * Transform an array into a regexp.
   */
  function arrayToRegexp(paths, keys, options) {
    var parts = paths.map(function (path) {
      return pathToRegexp(path, keys, options).source;
    });
    return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
  }
  /**
   * Create a path regexp from string input.
   */
  function stringToRegexp(path, keys, options) {
    return tokensToRegexp(parse(path, options), keys, options);
  }
  /**
   * Expose a function for taking tokens and returning a RegExp.
   */
  function tokensToRegexp(tokens, keys, options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.strict,
      strict = _a === void 0 ? false : _a,
      _b = options.start,
      start = _b === void 0 ? true : _b,
      _c = options.end,
      end = _c === void 0 ? true : _c,
      _d = options.encode,
      encode = _d === void 0 ? function (x) {
        return x;
      } : _d,
      _e = options.delimiter,
      delimiter = _e === void 0 ? "/#?" : _e,
      _f = options.endsWith,
      endsWith = _f === void 0 ? "" : _f;
    var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
    var delimiterRe = "[".concat(escapeString(delimiter), "]");
    var route = start ? "^" : "";
    // Iterate over the tokens and create our regexp string.
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
      var token = tokens_1[_i];
      if (typeof token === "string") {
        route += escapeString(encode(token));
      } else {
        var prefix = escapeString(encode(token.prefix));
        var suffix = escapeString(encode(token.suffix));
        if (token.pattern) {
          if (keys) keys.push(token);
          if (prefix || suffix) {
            if (token.modifier === "+" || token.modifier === "*") {
              var mod = token.modifier === "*" ? "?" : "";
              route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
            } else {
              route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
            }
          } else {
            if (token.modifier === "+" || token.modifier === "*") {
              throw new TypeError("Can not repeat \"".concat(token.name, "\" without a prefix and suffix"));
            }
            route += "(".concat(token.pattern, ")").concat(token.modifier);
          }
        } else {
          route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
        }
      }
    }
    if (end) {
      if (!strict) route += "".concat(delimiterRe, "?");
      route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
    } else {
      var endToken = tokens[tokens.length - 1];
      var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === undefined;
      if (!strict) {
        route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
      }
      if (!isEndDelimited) {
        route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
      }
    }
    return new RegExp(route, flags(options));
  }
  /**
   * Normalize the given path string, returning a regular expression.
   *
   * An empty array can be passed in for the keys, which will hold the
   * placeholder key descriptions. For example, using `/user/:id`, `keys` will
   * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
   */
  function pathToRegexp(path, keys, options) {
    if (path instanceof RegExp) return regexpToRegexp(path, keys);
    if (Array.isArray(path)) return arrayToRegexp(path, keys, options);
    return stringToRegexp(path, keys, options);
  }
});

define('OutSystems/ClientRuntime/modules/Common/IndexedStack',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IndexedStack = (function () {
        function IndexedStack() {
            this.stack = [];
            this.map = {};
            this.counter = 0;
        }
        IndexedStack.prototype.push = function (value) {
            var index = this.counter++;
            this.stack.push(index);
            this.map[index] = value;
            return index;
        };
        IndexedStack.prototype.remove = function (index) {
            var idx = this.stack.indexOf(index);
            var found = idx > -1;
            if (found) {
                this.stack.splice(idx, 1);
                delete this.map[index];
            }
            return found;
        };
        IndexedStack.prototype.pop = function () {
            if (this.stack.length === 0) {
                throw new Error("IndexedStack: pop from empty stack.");
            }
            var index = this.stack.pop();
            var value = this.map[index];
            delete this.map[index];
            return value;
        };
        IndexedStack.prototype.clear = function () {
            this.stack = [];
            this.map = {};
        };
        Object.defineProperty(IndexedStack.prototype, "isEmpty", {
            get: function () {
                return this.stack.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        return IndexedStack;
    }());
    exports.default = IndexedStack;
});
//# sourceMappingURL=IndexedStack.js.map;
define('OutSystems/ClientRuntime/Navigation',["require", "exports", "path-to-regexp", "./ApplicationInfo", "./Exceptions", "./Flow", "./Logger", "./modules/Common/IndexedStack", "./RegExpHelper", "./Settings"], function (require, exports, pathToRegexp, ApplicationInfo, Exceptions_1, Flow, Logger, IndexedStack_1, RegExpHelper_1, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VersionedURL = exports.buildApplicationRelativeUrl = exports.generateScreenURL = exports.locationReachedFromHistory = exports.ensureRequestSecurity = exports.switchUrlProtocol = exports.navigateBackNumPages = exports.navigateForwardNumPages = exports.navigateForward = exports.navigateBack = exports.navigateTo = exports.urlBelongsToPrefix = exports.onBeforeNavigate = exports.getUrlInfo = exports.unregisterBackNavigationHandler = exports.registerBackNavigationHandler = exports.reloadCurrentLocation = exports.reloadApplication = exports.addInvalidationSuffixToUrl = exports.currentLocationHasTimestamp = exports.changeWindowLocation = exports.hasPendingReload = exports.getLocationFromUrl = exports.urlBelongsToCurrentApplication = exports.getSearchParameterValue = exports.getCurrentLocation = exports.resetReloadState = exports.willReloadInNextNavigation = exports.forceReloadOnNextNavigation = exports.removeNavigationCallbacks = exports.getNavigationCallbacks = exports.setNavigationCallbacks = exports.throwRedirectOccurredExceptionIfNeeded = exports.isValidContext = exports.validateContext = exports.SCREEN_URL_PART_SEPARATOR = exports.NAVIGATE_FROM_HISTORY_ACTION = exports.NAVIGATE_TO_URL_ACTION = void 0;
    var NAVIGATION_MODULE_NAME = "Navigation";
    var FIRST_NODE_REGEX = new RegExp("/([^/]*)");
    var DOUBLE_SLASH_REGEX = new RegExp(/\/(\/)+/gm);
    var CONTAINS_SLASH_START_END_REGEX = new RegExp(/^\/|\/$/g);
    var QUERY_SEPARATOR = "?";
    var HASH_SEPARATOR = "#";
    var PARAMS_SEPARATOR = "&";
    var TIMESTAMP_QUERYPARAM = "_ts";
    var RECURSIVE_REDIRECTS_MAX_COUNT = 10;
    var RECURSIVE_REDIRECTS_PERIOD_IN_MS = 1000;
    exports.NAVIGATE_TO_URL_ACTION = "PUSH";
    exports.NAVIGATE_FROM_HISTORY_ACTION = "POP";
    exports.SCREEN_URL_PART_SEPARATOR = "-";
    var lastNavigatedUrls = [];
    var navigationCallbacks = [];
    var navigationHandlerStack = new IndexedStack_1.default();
    function validateContext(callContext) {
        if (!isValidContext(callContext)) {
            throw new Exceptions_1.Exceptions.OutOfContextException();
        }
    }
    exports.validateContext = validateContext;
    function isValidContext(callContext) {
        if (!!callContext && callContext.isOutOfContext) {
            return false;
        }
        return true;
    }
    exports.isValidContext = isValidContext;
    function throwRedirectOccurredExceptionIfNeeded(interruptExecution) {
        if (interruptExecution) {
            throw new Exceptions_1.Exceptions.RedirectOccurredException();
        }
    }
    exports.throwRedirectOccurredExceptionIfNeeded = throwRedirectOccurredExceptionIfNeeded;
    function setNavigationCallbacks(newNavigationCallBacks) {
        navigationCallbacks.push(newNavigationCallBacks);
    }
    exports.setNavigationCallbacks = setNavigationCallbacks;
    function getNavigationCallbacks() {
        return navigationCallbacks[navigationCallbacks.length - 1];
    }
    exports.getNavigationCallbacks = getNavigationCallbacks;
    function removeNavigationCallbacks() {
        return navigationCallbacks.pop();
    }
    exports.removeNavigationCallbacks = removeNavigationCallbacks;
    function validateValueNotNegative(value, argName) {
        if (argName === void 0) { argName = "Value"; }
        if ((!value && value !== 0) || value < 0) {
            throw new Exceptions_1.Exceptions.Exception("Couldn't perform the page navigation because \"".concat(value, "\" is not valid. ").concat(argName, " needs to be greater than or equal to 0."));
        }
    }
    var forceReload = false;
    var useTimestampOnReload = false;
    function forceReloadOnNextNavigation(useTimestamp) {
        if (useTimestamp === void 0) { useTimestamp = false; }
        Logger.trace(NAVIGATION_MODULE_NAME, "Next navigation will force a reload...");
        forceReload = true;
        useTimestampOnReload = useTimestamp;
    }
    exports.forceReloadOnNextNavigation = forceReloadOnNextNavigation;
    function willReloadInNextNavigation() {
        return forceReload;
    }
    exports.willReloadInNextNavigation = willReloadInNextNavigation;
    function resetReloadState(forceReloadValue, useTimestampOnReloadValue) {
        if (forceReloadValue === void 0) { forceReloadValue = false; }
        if (useTimestampOnReloadValue === void 0) { useTimestampOnReloadValue = false; }
        forceReload = forceReloadValue;
        useTimestampOnReload = useTimestampOnReloadValue;
    }
    exports.resetReloadState = resetReloadState;
    var getCurrentLocation = function () {
        var _a;
        var protocol = (_a = window.location, _a.protocol), pathname = _a.pathname, href = _a.href, search = _a.search;
        var hostname = window.location.hostname || window.location.host.split(":")[0];
        return {
            protocol: protocol,
            pathname: pathname,
            href: href,
            search: search,
            hostname: hostname,
        };
    };
    exports.getCurrentLocation = getCurrentLocation;
    var getSearchParameterValue = function (key) {
        if (key === undefined) {
            return null;
        }
        var urlQuery = window.location.search.substring(1);
        var queryParams = getQueryParameterParts(urlQuery);
        return queryParams[key];
    };
    exports.getSearchParameterValue = getSearchParameterValue;
    var urlBelongsToCurrentApplication = function (urlInfo, _a) {
        var _b;
        var _c = _a === void 0 ? {} : _a, _d = _c.getLocation, getLocation = _d === void 0 ? exports.getCurrentLocation : _d, _e = _c.getBasePath, getBasePath = _e === void 0 ? ApplicationInfo.getBasePath : _e, _f = _c.getHomeModuleDefinition, getHomeModuleDefinition = _f === void 0 ? ApplicationInfo.getHomeModuleDefinition : _f;
        var isWebProtocol = urlInfo.protocol === "http:" || urlInfo.protocol === "https:" || urlInfo.protocol === "outsystems:";
        if (!isWebProtocol) {
            return false;
        }
        var currentHost = getLocation().hostname;
        var host = urlInfo.hostname !== "" ? urlInfo.hostname : currentHost;
        if (currentHost !== host) {
            return false;
        }
        if ((0, Settings_1.getEnvParams)().AllowInterAppNavigationWhenAppIsRoot) {
            var pathname = (_b = urlInfo.pathname) === null || _b === void 0 ? void 0 : _b.replace(/\/$/, "");
            if (!urlBelongsToPrefix(pathname, getBasePath(), getHomeModuleDefinition(), { getBasePath: getBasePath })) {
                return false;
            }
        }
        else {
            var firstNodePath = FIRST_NODE_REGEX.exec(urlInfo.pathname);
            if (!firstNodePath || firstNodePath.length < 2) {
                return false;
            }
        }
        var belongsToApp = new RegExp("^".concat((0, RegExpHelper_1.escape)(getBasePath())), "i");
        return belongsToApp.test("".concat(urlInfo.pathname, "/"));
    };
    exports.urlBelongsToCurrentApplication = urlBelongsToCurrentApplication;
    var getLocationFromUrl = function (url) {
        var urlElement = document.createElement("a");
        urlElement.href = url;
        return urlElement;
    };
    exports.getLocationFromUrl = getLocationFromUrl;
    var hasPendingChangeWindowLocation = false;
    function hasPendingReload() {
        return hasPendingChangeWindowLocation;
    }
    exports.hasPendingReload = hasPendingReload;
    var changeWindowLocation = function (url, addTimestamp, replaceHistory) {
        if (addTimestamp === void 0) { addTimestamp = false; }
        if (replaceHistory === void 0) { replaceHistory = false; }
        if (addTimestamp) {
            url = addInvalidationSuffixToUrl(url);
        }
        Logger.trace(NAVIGATION_MODULE_NAME, "Reloading application with url: '".concat(url, "' (replace = ").concat(replaceHistory, ")"));
        var redirect = function () {
            if (replaceHistory) {
                window.location.replace(url);
            }
            else {
                window.location.href = url;
            }
        };
        hasPendingChangeWindowLocation = true;
        Logger.flushLogsToStorage(true).then(redirect).catch(redirect);
    };
    exports.changeWindowLocation = changeWindowLocation;
    function currentLocationHasTimestamp() {
        return typeof window !== "undefined" && window.location.search.indexOf(TIMESTAMP_QUERYPARAM) >= 0;
    }
    exports.currentLocationHasTimestamp = currentLocationHasTimestamp;
    function addInvalidationSuffixToUrl(url) {
        var appendType = url.indexOf(QUERY_SEPARATOR) < 0 ? QUERY_SEPARATOR : PARAMS_SEPARATOR;
        var timestampParam = "".concat(appendType).concat(TIMESTAMP_QUERYPARAM, "=").concat(new Date().valueOf());
        var hashIndex = url.indexOf(HASH_SEPARATOR);
        if (hashIndex >= 0) {
            return [url.slice(0, hashIndex), timestampParam, url.slice(hashIndex)].join("");
        }
        else {
            return "".concat(url).concat(timestampParam);
        }
    }
    exports.addInvalidationSuffixToUrl = addInvalidationSuffixToUrl;
    function reloadApplication(addTimestamp) {
        if (addTimestamp === void 0) { addTimestamp = false; }
        var newLocation = buildApplicationRelativeUrl();
        (0, exports.changeWindowLocation)(newLocation, addTimestamp);
    }
    exports.reloadApplication = reloadApplication;
    function reloadCurrentLocation(addTimestamp) {
        if (addTimestamp === void 0) { addTimestamp = false; }
        (0, exports.changeWindowLocation)((0, exports.getCurrentLocation)().href, addTimestamp, true);
    }
    exports.reloadCurrentLocation = reloadCurrentLocation;
    function concatApplicationToRelativeURL(url) {
        return buildApplicationRelativeUrl([ApplicationInfo.getBasePath(), url]);
    }
    function isRecursiveNavigation(url) {
        var currentTimestamp = new Date().getTime();
        var minPeriodDate = currentTimestamp - RECURSIVE_REDIRECTS_PERIOD_IN_MS;
        while (lastNavigatedUrls.length > 0 && lastNavigatedUrls[0].timestamp < minPeriodDate) {
            lastNavigatedUrls.shift();
        }
        var countRepeatedNavigations = lastNavigatedUrls.reduce(function (previous, value) {
            return value.url === url ? previous + 1 : previous;
        }, 0);
        if (countRepeatedNavigations < RECURSIVE_REDIRECTS_MAX_COUNT) {
            lastNavigatedUrls.push({ timestamp: currentTimestamp, url: url });
            return false;
        }
        else {
            Logger.trace(NAVIGATION_MODULE_NAME, "Identified a recursive navigation to '" + url + "'.");
            return true;
        }
    }
    function registerBackNavigationHandler(callback) {
        return navigationHandlerStack.push(callback);
    }
    exports.registerBackNavigationHandler = registerBackNavigationHandler;
    function unregisterBackNavigationHandler(id) {
        navigationHandlerStack.remove(id);
    }
    exports.unregisterBackNavigationHandler = unregisterBackNavigationHandler;
    var getUrlInfo = function (url, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.getHomeModuleDefinition, getHomeModuleDefinition = _c === void 0 ? ApplicationInfo.getHomeModuleDefinition : _c;
        var isInternalUrl = false;
        var urlHash;
        var urlQuery = "";
        var urlPath = url;
        var isAbsoluteUrl = url.indexOf(":") !== -1 ||
            url.indexOf("/") === 0;
        var urlHashIndex = urlPath.indexOf(HASH_SEPARATOR);
        if (urlHashIndex !== -1) {
            urlHash = urlPath.substring(urlHashIndex + 1).trim();
            urlPath = urlPath.substring(0, urlHashIndex);
        }
        var urlQueryIndex = urlPath.indexOf(QUERY_SEPARATOR);
        if (urlQueryIndex !== -1) {
            urlQuery = urlPath.substring(urlQueryIndex + 1).trim();
            urlPath = urlPath.substring(0, urlQueryIndex);
        }
        if (isAbsoluteUrl) {
            var absoluteUrlInfo = (0, exports.getLocationFromUrl)(urlPath);
            isInternalUrl = (0, exports.urlBelongsToCurrentApplication)(absoluteUrlInfo, { getHomeModuleDefinition: getHomeModuleDefinition });
            if (isInternalUrl) {
                urlPath = absoluteUrlInfo.pathname;
            }
        }
        else {
            urlPath = concatApplicationToRelativeURL(urlPath);
            isInternalUrl = true;
        }
        var queryParams = getQueryParameterParts(urlQuery);
        return {
            url: url,
            isInternal: isInternalUrl,
            path: urlPath,
            queryParams: queryParams,
            hash: urlHash,
        };
    };
    exports.getUrlInfo = getUrlInfo;
    function getQueryParameterParts(urlQuery) {
        var queryParams = {};
        if (urlQuery.length > 0) {
            urlQuery.split(PARAMS_SEPARATOR).forEach(function (param) {
                var paramParts = param.split("=");
                if (paramParts.length === 2) {
                    var key = safeDecodeURIComponent(paramParts[0]);
                    var value = safeDecodeURIComponent(paramParts[1]);
                    queryParams[key] = value;
                }
            });
        }
        return queryParams;
    }
    function safeDecodeURIComponent(encodedText) {
        return decodeURIComponent(encodedText.replace(/\+/g, " "));
    }
    function onBeforeNavigate(nextLocation, isBackNavigation) {
        var forceReloadOnNavigation = forceReload;
        if (forceReload) {
            forceReload = false;
        }
        if (isBackNavigation && !navigationHandlerStack.isEmpty) {
            var handler = navigationHandlerStack.pop();
            Flow.tryCatch(handler, function (e) {
                Logger.error(ApplicationInfo.getHomeModuleName(), e);
            });
            return false;
        }
        var fromHistory = locationReachedFromHistory(nextLocation);
        if (fromHistory || forceReloadOnNavigation) {
            var urlInfo = (0, exports.getUrlInfo)(nextLocation.pathname);
            var modules = ApplicationInfo.getModules();
            var basePath = ApplicationInfo.getBasePath();
            var invalidInternalURL = void 0;
            if (urlInfo.isInternal) {
                invalidInternalURL = true;
                for (var moduleKey in modules) {
                    if (modules.hasOwnProperty(moduleKey)) {
                        var path = urlInfo.url.replace(/\/$/, "");
                        var module = modules[moduleKey];
                        if (urlBelongsToPrefix(path, buildApplicationRelativeUrl([basePath]), module) ||
                            (module.moduleName !== ApplicationInfo.getHomeModuleName() &&
                                urlBelongsToPrefix(path, module.moduleName, module))) {
                            invalidInternalURL = false;
                            break;
                        }
                    }
                }
            }
            else {
                invalidInternalURL = false;
            }
            if (forceReloadOnNavigation || invalidInternalURL) {
                var newLocation = void 0;
                if (invalidInternalURL) {
                    newLocation = buildApplicationRelativeUrl();
                }
                else {
                    var search = nextLocation.search || "";
                    if (basePath === nextLocation.pathname && search === "") {
                        newLocation = /\/$/.test(nextLocation.pathname)
                            ? nextLocation.pathname
                            : "".concat(nextLocation.pathname, "/");
                    }
                    else {
                        newLocation = nextLocation.pathname + search;
                    }
                }
                (0, exports.changeWindowLocation)(newLocation, useTimestampOnReload, fromHistory);
                return !invalidInternalURL;
            }
        }
        navigationHandlerStack.clear();
        return true;
    }
    exports.onBeforeNavigate = onBeforeNavigate;
    function urlBelongsToPrefix(path, prefix, module, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.getBasePath, getBasePath = _c === void 0 ? ApplicationInfo.getBasePath : _c;
        return (prefix.replace(/\/$/, "") === path ||
            module.screens.some(function (screen) {
                var appRelativeUrl = buildApplicationRelativeUrl([prefix, screen.screenUrl], { getBasePath: getBasePath });
                var regexp = pathToRegexp.pathToRegexp(appRelativeUrl);
                return regexp.test(path);
            }));
    }
    exports.urlBelongsToPrefix = urlBelongsToPrefix;
    function cancelAllPendingResources() {
        if (ApplicationInfo.isWebApplication() && window.stop && document.readyState === "complete") {
            Logger.trace(NAVIGATION_MODULE_NAME, "Stopping all currently pending resources.");
            window.stop();
        }
    }
    function navigateTo(url, transition, callContext, interruptExecution, replace) {
        validateContext(callContext);
        if (isRecursiveNavigation(url)) {
            throw Error("Too many redirects.");
        }
        if (!interruptExecution) {
            cancelAllPendingResources();
        }
        var urlInfo = (0, exports.getUrlInfo)(url);
        var callbacks = getNavigationCallbacks();
        if ((callbacks === null || callbacks === void 0 ? void 0 : callbacks.goTo) && urlInfo.isInternal) {
            callbacks.goTo(urlInfo, transition, replace);
        }
        else {
            (0, exports.changeWindowLocation)(url);
        }
        throwRedirectOccurredExceptionIfNeeded(interruptExecution);
    }
    exports.navigateTo = navigateTo;
    function navigateBack(transition, callContext, interruptExecution) {
        validateContext(callContext);
        if (!interruptExecution) {
            cancelAllPendingResources();
        }
        var callbacks = getNavigationCallbacks();
        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.goBack) {
            callbacks.goBack(transition);
        }
        else {
            window.history.back();
        }
        throwRedirectOccurredExceptionIfNeeded(interruptExecution);
    }
    exports.navigateBack = navigateBack;
    function navigateForward(transition, callContext, interruptExecution) {
        validateContext(callContext);
        if (!interruptExecution) {
            cancelAllPendingResources();
        }
        var callbacks = getNavigationCallbacks();
        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.goForward) {
            callbacks.goForward(transition);
        }
        else {
            window.history.forward();
        }
        throwRedirectOccurredExceptionIfNeeded(interruptExecution);
    }
    exports.navigateForward = navigateForward;
    function navigateForwardNumPages(numPages, transition, callContext, interruptExecution) {
        validateValueNotNegative(numPages, "NumPages");
        navigateByOffset(numPages, transition, callContext, interruptExecution);
    }
    exports.navigateForwardNumPages = navigateForwardNumPages;
    function navigateBackNumPages(numPages, transition, callContext, interruptExecution) {
        validateValueNotNegative(numPages, "NumPages");
        navigateByOffset(-numPages, transition, callContext, interruptExecution);
    }
    exports.navigateBackNumPages = navigateBackNumPages;
    function navigateByOffset(numPages, transition, callContext, interruptExecution) {
        validateContext(callContext);
        if (!interruptExecution) {
            cancelAllPendingResources();
        }
        var callbacks = getNavigationCallbacks();
        if (callbacks === null || callbacks === void 0 ? void 0 : callbacks.goOffset) {
            callbacks.goOffset(numPages, transition);
        }
        else {
            window.history.go(numPages);
        }
        throwRedirectOccurredExceptionIfNeeded(interruptExecution);
    }
    function switchUrlProtocol(url, oldProtocol, newProtocol) {
        return newProtocol + url.substring(oldProtocol.length);
    }
    exports.switchUrlProtocol = switchUrlProtocol;
    function ensureRequestSecurity() {
        var currentLocation = (0, exports.getCurrentLocation)();
        if (currentLocation.protocol.toLocaleLowerCase() === "http:") {
            if (currentLocation.hostname.toLocaleLowerCase() === "localhost") {
                Logger.log("Navigation", "Accessing through http://localhost is not supported. Please access the application using the hostname instead.");
            }
            else {
                var secureURL = switchUrlProtocol(currentLocation.href, currentLocation.protocol, "https:");
                (0, exports.changeWindowLocation)(secureURL, false, true);
                return true;
            }
        }
        return false;
    }
    exports.ensureRequestSecurity = ensureRequestSecurity;
    function locationReachedFromHistory(location) {
        return location.action.toUpperCase() === exports.NAVIGATE_FROM_HISTORY_ACTION;
    }
    exports.locationReachedFromHistory = locationReachedFromHistory;
    function generateScreenURL(moduleNameOrBaseURL, screenURLOrParameters, parameters) {
        var moduleName = moduleNameOrBaseURL;
        var screenURL = moduleNameOrBaseURL;
        var baseURL;
        if (typeof screenURLOrParameters === "string") {
            screenURL = screenURLOrParameters;
            baseURL = generateScreenURLWithModuleName(moduleName, screenURL, parameters);
        }
        else {
            parameters = screenURLOrParameters;
            moduleName = "";
            baseURL = generateGenericURL(screenURL, parameters);
        }
        return baseURL;
    }
    exports.generateScreenURL = generateScreenURL;
    function generateScreenURLWithModuleName(moduleName, screenURL, parameters) {
        var querystringParameters = selectQueryStringParameters(parameters, screenURL);
        var pathParameters = selectPathParameters(parameters, querystringParameters);
        detectEmptyValueOptionalParameterError(pathParameters, screenURL);
        return innerBuildURL(moduleName, screenURL, pathParameters, querystringParameters);
    }
    function generateGenericURL(baseURL, parameters) {
        var querystring = Object.keys(parameters)
            .map(function (key) { return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(parameters[key])); })
            .join("&");
        var withQueryStringURL = "".concat(baseURL).concat(querystring.length > 0 ? "?".concat(querystring) : "");
        return withQueryStringURL;
    }
    function detectEmptyValueOptionalParameterError(paramMap, screenURL) {
        var tokens = pathToRegexp.parse(screenURL);
        var optTokensWithValues = tokens
            .filter(function (token) { return typeof token !== "string" && token.modifier === "?"; })
            .map(function (token) {
            var _a;
            return {
                name: token.name,
                value: (_a = paramMap[token.name]) !== null && _a !== void 0 ? _a : "",
            };
        });
        var hasEmptyValue = false;
        var emptyToken;
        optTokensWithValues.forEach(function (token) {
            if (hasEmptyValue && !isEmptyValue(token.value)) {
                throw new Error("Error processing optional parameters on path ".concat(screenURL, ". The parameter ").concat(emptyToken.name, " has an empty value while ").concat(token.name, " has a non-empty value. All optional parameters before ").concat(token.name, " must have a value when ").concat(token.name, " has a value."));
            }
            if (isEmptyValue(token.value)) {
                emptyToken = token;
                hasEmptyValue = true;
            }
        });
    }
    function isEmptyValue(value) {
        return value === "" || value === null || value === undefined;
    }
    function innerBuildURL(moduleName, screenURL, parameters, querystringParameters) {
        var querystring = Object.keys(querystringParameters)
            .map(function (key) { return "".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(querystringParameters[key])); })
            .join("&");
        try {
            var toPath = pathToRegexp.compile(screenURL, {
                encode: function (value) { return encodeURIComponent(value); },
                validate: false,
            });
            var filledParamsURL = toPath(parameters);
            var withQueryStringURL = "".concat(filledParamsURL).concat(querystring.length > 0 ? "?".concat(querystring) : "");
            return generateBaseUrl(moduleName, withQueryStringURL);
        }
        catch (e) {
            var regexResult = new RegExp("^Expected \"(.*)\" to be a string$", "g").exec(e.message);
            if (regexResult) {
                var parameterName = regexResult[1];
                var message = "Error building URL for ".concat(screenURL, ". Parameter ").concat(parameterName, " is missing or has an empty value");
                Logger.error(moduleName, message);
                return undefined;
            }
            throw e;
        }
    }
    function selectQueryStringParameters(paramMap, screenURL) {
        var tokens = pathToRegexp.parse(screenURL);
        return Object.keys(paramMap)
            .filter(function (key) { return !tokens.some(function (token) { return typeof token !== "string" && token.name === key; }); })
            .reduce(function (obj, key) {
            obj[key] = paramMap[key];
            return obj;
        }, {});
    }
    function selectPathParameters(paramMap, queryStringParamMap) {
        return Object.keys(paramMap)
            .filter(function (key) { return paramMap[key] !== "" && !(key in queryStringParamMap); })
            .reduce(function (obj, key) {
            obj[key] = paramMap[key];
            return obj;
        }, {});
    }
    function buildApplicationRelativeUrl(parts, _a) {
        if (parts === void 0) { parts = []; }
        var _b = _a === void 0 ? {} : _a, _c = _b.getBasePath, getBasePath = _c === void 0 ? ApplicationInfo.getBasePath : _c;
        var baseURL = parts.length === 0 ? getBasePath() : "/" + parts.join("/");
        return baseURL.replace(DOUBLE_SLASH_REGEX, "/");
    }
    exports.buildApplicationRelativeUrl = buildApplicationRelativeUrl;
    function generateBaseUrl(moduleName, baseURL) {
        var basePath = ApplicationInfo.getBasePath();
        var baseURLStartWithNoSlash = baseURL.replace(/^\//, "");
        var homeModuleName = ApplicationInfo.getHomeModuleName();
        if (moduleName === homeModuleName) {
            return "".concat(basePath).concat(baseURLStartWithNoSlash);
        }
        else {
            return "/".concat(moduleName, "/").concat(baseURLStartWithNoSlash);
        }
    }
    var VersionedURL;
    (function (VersionedURL) {
        var urlVersionProvider = function (relativeUrl) { return relativeUrl; };
        function setUrlVersionProvider(provider) {
            urlVersionProvider = provider;
        }
        VersionedURL.setUrlVersionProvider = setUrlVersionProvider;
        function getVersionedUrl(baseUrl) {
            return urlVersionProvider(baseUrl);
        }
        VersionedURL.getVersionedUrl = getVersionedUrl;
    })(VersionedURL || (exports.VersionedURL = VersionedURL = {}));
});
//# sourceMappingURL=Navigation.js.map;
define('OutSystems/ClientRuntime/RolesInfo',["require", "exports", "tslib", "./ApplicationInfo", "./Communication", "./CookiesManager", "./Exceptions", "./Logger", "./StorageProvider"], function (require, exports, tslib_1, ApplicationInfo, Communication, CookiesManager, Exceptions, Logger, StorageProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkRoles = exports.checkRegistered = exports.getUserId = exports.areRolesDefined = exports.areRolesEmpty = exports.storeRoleInformation = exports.initializeRolesFromServer = exports.initialize = exports.RolesInfoPersistentStorage = exports.RolesInfoStorage = exports.ROLES_INFO_MODULE_NAME = void 0;
    exports.ROLES_INFO_MODULE_NAME = "RolesInfo";
    exports.RolesInfoStorage = {
        rolesInfo: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Persistent, exports.ROLES_INFO_MODULE_NAME, null, ApplicationInfo.getUserProviderName),
    };
    function initialize(storage) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var storageReady, _a, userId, roles;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        exports.RolesInfoPersistentStorage = storage;
                        _a = !!exports.RolesInfoPersistentStorage;
                        if (!_a) return [3, 2];
                        return [4, exports.RolesInfoPersistentStorage.isReady()];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        storageReady = _a;
                        userId = this.getUserId();
                        if (!(!areRolesDefined() && userId !== 0 && storageReady)) return [3, 4];
                        return [4, exports.RolesInfoPersistentStorage.getValue(exports.ROLES_INFO_MODULE_NAME)];
                    case 3:
                        roles = _b.sent();
                        exports.RolesInfoStorage.rolesInfo.set(roles === "undefined" ? undefined : roles);
                        _b.label = 4;
                    case 4: return [2];
                }
            });
        });
    }
    exports.initialize = initialize;
    function initializeRolesFromServer() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var userId, roles, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.getUserId();
                        if (!((!areRolesDefined() || areRolesEmpty()) && userId !== 0 && Communication.NetworkStatus.isOnline())) return [3, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4, Communication.getRoles()];
                    case 2:
                        roles = _a.sent();
                        return [4, storeRoleInformation(roles)];
                    case 3:
                        _a.sent();
                        return [3, 5];
                    case 4:
                        ex_1 = _a.sent();
                        Logger.log("RolesInfo", "Failed to load role data from the server for user ".concat(userId, " after not finding it locally: ").concat(ex_1 === null || ex_1 === void 0 ? void 0 : ex_1.message));
                        return [3, 5];
                    case 5: return [2];
                }
            });
        });
    }
    exports.initializeRolesFromServer = initializeRolesFromServer;
    function storeRoleInformation(rolesInfo_1) {
        return tslib_1.__awaiter(this, arguments, void 0, function (rolesInfo, _a) {
            var isNewRolesInfo, rolesBefore, rolesAfter, storageReady;
            var _b = _a === void 0 ? {} : _a, _c = _b.url, url = _c === void 0 ? "" : _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        isNewRolesInfo = !areRolesDefined() || rolesInfo !== exports.RolesInfoStorage.rolesInfo.get();
                        rolesBefore = exports.RolesInfoStorage.rolesInfo.get();
                        exports.RolesInfoStorage.rolesInfo.set(rolesInfo);
                        rolesAfter = exports.RolesInfoStorage.rolesInfo.get();
                        Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Roles changed from [" + rolesBefore + "] to [" + rolesAfter + "]" + " (Endpoint: " + url + " )");
                        return [4, (exports.RolesInfoPersistentStorage === null || exports.RolesInfoPersistentStorage === void 0 ? void 0 : exports.RolesInfoPersistentStorage.isReady())];
                    case 1:
                        storageReady = _d.sent();
                        if (!(isNewRolesInfo && storageReady)) return [3, 3];
                        return [4, exports.RolesInfoPersistentStorage.setValue(exports.ROLES_INFO_MODULE_NAME, rolesInfo)];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3: return [2];
                }
            });
        });
    }
    exports.storeRoleInformation = storeRoleInformation;
    function areRolesEmpty() {
        var _a;
        return ((_a = exports.RolesInfoStorage.rolesInfo.get()) === null || _a === void 0 ? void 0 : _a.trim()) === ",";
    }
    exports.areRolesEmpty = areRolesEmpty;
    function areRolesDefined() {
        return exports.RolesInfoStorage.rolesInfo.isDefined();
    }
    exports.areRolesDefined = areRolesDefined;
    function getUserId() {
        var cookieValue = CookiesManager.readCookie(ApplicationInfo.getUserCookieName());
        Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking User's ID: User cookie value (" + cookieValue + ")");
        if (cookieValue === null) {
            return 0;
        }
        var userIdRegex = /uid=(\d+)/;
        var match = cookieValue.match(userIdRegex);
        if (match === null) {
            Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking User's ID: User is Anonymous");
            return 0;
        }
        return parseInt(match[1], 10);
    }
    exports.getUserId = getUserId;
    function checkRegistered() {
        if (this.getUserId() === 0) {
            Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: Not authorized since user is not registered");
            throw new Exceptions.Exceptions.NotRegisteredException("", "Registered role required");
        }
        Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: User authorized since it is registered");
    }
    exports.checkRegistered = checkRegistered;
    function checkRoles(roles) {
        if (this.getUserId() === 0) {
            Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: Not authorized because user is not logged in");
            throw roles[roles.length - 1].roleException;
        }
        if (!areRolesDefined()) {
            Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: Not authorized since user don't have roles for the specified user provider");
            throw roles[roles.length - 1].roleException;
        }
        Logger.trace(exports.ROLES_INFO_MODULE_NAME, function () {
            var requiredRoles = "";
            roles.forEach(function (role) {
                return (requiredRoles += role.roleException.message + " [RoleKey=" + role.roleKey + "] ");
            });
            return "Checking authorization: Required Roles ( " + requiredRoles + ")";
        });
        var rolesInfo = exports.RolesInfoStorage.rolesInfo.get();
        Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: User roles keys (" + rolesInfo + ")");
        if (!roles.some(function (role) {
            return rolesInfo.indexOf(role.roleKey) >= 0;
        })) {
            Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: Not authorized since roles don't match");
            throw roles[roles.length - 1].roleException;
        }
        Logger.trace(exports.ROLES_INFO_MODULE_NAME, "Checking authorization: User authorized due to role match");
    }
    exports.checkRoles = checkRoles;
});
//# sourceMappingURL=RolesInfo.js.map;
define('OutSystems/ClientRuntime/BuiltinFunctions',["require", "exports", "./ApplicationInfo", "./DataTypes", "./Injector", "./Injector/KnownServices", "./Navigation", "./RolesInfo"], function (require, exports, ApplicationInfo, DataTypes_1, Injector, KnownServices_1, Navigation, RolesInfo) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.iif = exports.getUserId = exports.getOwnerURLPath = exports.getBookmarkableURL = exports.getEntryEspaceName = exports.getUserAgent = exports.getCurrentLocale = exports.emailAddressValidate = exports.formatText = exports.formatPhoneNumber = exports.formatPercent = exports.formatDecimal = exports.formatCurrency = exports.formatDateTime = exports.toObject = exports.objectToDateTime = exports.objectToTime = exports.objectToDate = exports.objectToText = exports.objectToDecimal = exports.objectToBoolean = exports.objectToLongInteger = exports.objectToInteger = exports.textToIdentifier = exports.textToBoolean = exports.textToLongInteger = exports.textToLongIntegerValidate = exports.textToInteger = exports.textToIntegerValidate = exports.textToDecimal = exports.textToDecimalValidate = exports.timeToText = exports.textToTime = exports.textToTimeValidate = exports.textToDateTime = exports.textToDateTimeValidate = exports.textToDate = exports.textToDateValidate = exports.nullBinary = exports.nullObject = exports.nullDate = exports.nullTextIdentifier = exports.nullIdentifier = exports.integerToDecimal = exports.integerToText = exports.integerToBoolean = exports.integerToIdentifier = exports.integerToLongInteger = exports.identifierToText = exports.identifierToLongInteger = exports.identifierToInteger = exports.longIntegerToText = exports.longIntegerToIdentifier = exports.longIntegerToInteger = exports.longIntegerToIntegerValidate = exports.longIntegerToDecimal = exports.decimalToLongInteger = exports.decimalToLongIntegerValidate = exports.decimalToInteger = exports.decimalToIntegerValidate = exports.decimalToText = exports.decimalToBoolean = exports.dateToDateTime = exports.dateToText = exports.dateTimeToText = exports.dateTimeToTime = exports.dateTimeToDate = exports.booleanToText = exports.booleanToDecimal = exports.booleanToLongInteger = exports.booleanToInteger = exports.newTime = exports.newDateTime = exports.newDate = exports.second = exports.minute = exports.hour = exports.day = exports.month = exports.year = exports.diffSeconds = exports.diffMinutes = exports.diffHours = exports.diffDays = exports.dayOfWeek = exports.currTime = exports.currDateTime = exports.currDate = exports.buildDateTime = exports.addMonths = exports.addYears = exports.addSeconds = exports.addMinutes = exports.addHours = exports.addDays = exports.like = exports.trimEnd = exports.trimStart = exports.trim = exports.toUpper = exports.toLower = exports.substr = exports.replace = exports.length = exports.index = exports.encodeUrl = exports.encodeJavascript = exports.encodeHtml = exports.concat = exports.chr = exports.sign = exports.min = exports.max = exports.trunc = exports.sqrt = exports.round = exports.power = exports.mod = exports.abs = void 0;
    function parseDateFromRx(format) {
        if (format === void 0) { format = DataTypes_1.Constants.FORMAT.defaultDateTimeFormat; }
        return {
            year: parseInt(RegExp["$" + (format.yearIndexForDate + 1)], 10),
            month: parseInt(RegExp["$" + (format.monthIndexForDate + 1)], 10),
            day: parseInt(RegExp["$" + (format.dayIndexForDate + 1)], 10),
        };
    }
    function parseTimeFromRx(format) {
        if (format === void 0) { format = DataTypes_1.Constants.FORMAT.defaultDateTimeFormat; }
        var innerSeconds = parseInt(RegExp["$" + (format.secondsIndexForTime + 1)], 10);
        return {
            hours: parseInt(RegExp["$" + (format.hoursIndexForTime + 1)], 10),
            minutes: parseInt(RegExp["$" + (format.minutesIndexForTime + 1)], 10),
            seconds: isNaN(innerSeconds) ? 0 : innerSeconds,
        };
    }
    function parseDateTimeFromRx(format) {
        if (format === void 0) { format = DataTypes_1.Constants.FORMAT.defaultDateTimeFormat; }
        var innerSeconds = parseInt(RegExp["$" + (format.secondsIndexForDateTime + 1)], 10);
        return {
            year: parseInt(RegExp["$" + (format.yearIndexForDateTime + 1)], 10),
            month: parseInt(RegExp["$" + (format.monthIndexForDateTime + 1)], 10),
            day: parseInt(RegExp["$" + (format.dayIndexForDateTime + 1)], 10),
            hours: parseInt(RegExp["$" + (format.hoursIndexForDateTime + 1)], 10),
            minutes: parseInt(RegExp["$" + (format.minutesIndexForDateTime + 1)], 10),
            seconds: isNaN(innerSeconds) ? 0 : innerSeconds,
        };
    }
    function abs(n) {
        var result = n.abs();
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.abs = abs;
    function mod(n, m) {
        var result = n.mod(m);
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.mod = mod;
    function power(n, m) {
        var result = n.pow(m);
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.power = power;
    function round(n, fractionalDigits) {
        if (fractionalDigits === void 0) { fractionalDigits = 0; }
        var result = n.toDecimalPlaces(fractionalDigits);
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.round = round;
    function sqrt(n) {
        try {
            var result = n.sqrt();
            return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
        }
        catch (e) {
            return DataTypes_1.Constants.DEFAULT_DECIMAL;
        }
    }
    exports.sqrt = sqrt;
    function trunc(n) {
        var result = n.trunc();
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.trunc = trunc;
    function max(n, m) {
        var result = DataTypes_1.Decimal.max(n, m);
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.max = max;
    function min(n, m) {
        var result = DataTypes_1.Decimal.min(n, m);
        return result.isNaN() ? DataTypes_1.Constants.DEFAULT_DECIMAL : result;
    }
    exports.min = min;
    function sign(n) {
        var zero = new DataTypes_1.Decimal(0);
        if (n.eq(zero) || n.isNaN()) {
            return DataTypes_1.Constants.DEFAULT_INTEGER;
        }
        return n > zero ? 1 : -1;
    }
    exports.sign = sign;
    function chr(c) {
        var maxChr = 0xffff;
        var minChr = 0;
        return c >= minChr && c <= maxChr ? String.fromCharCode(c) : DataTypes_1.Constants.DEFAULT_TEXT;
    }
    exports.chr = chr;
    function concat(text1, text2) {
        return (text1 || "") + (text2 || "");
    }
    exports.concat = concat;
    function fixHtmlSpaces(s) {
        if (s === undefined || s === "") {
            return s;
        }
        var chars = [];
        var spaceCharCode = " ".charCodeAt(0);
        var newLineCharCode = "\n".charCodeAt(0);
        var xA0char = "\xA0";
        if (s.charCodeAt(0) === spaceCharCode) {
            chars[0] = xA0char;
        }
        else {
            chars[0] = s.charAt(0);
        }
        for (var i = 1; i < s.length - 1; ++i) {
            if (s.charCodeAt(i) === spaceCharCode &&
                (s.charCodeAt(i - 1) === newLineCharCode || s.charCodeAt(i + 1) === spaceCharCode)) {
                chars[i] = xA0char;
            }
            else {
                chars[i] = s.charAt(i);
            }
        }
        if (s.length !== 1) {
            if (s.charCodeAt(s.length - 1) === spaceCharCode) {
                chars[s.length - 1] = xA0char;
            }
            else {
                chars[s.length - 1] = s.charAt(s.length - 1);
            }
        }
        return chars.join("");
    }
    function encode(text) {
        var buf = [];
        for (var i = 0; i < text.length; ++i) {
            var c = text.charCodeAt(i);
            if (c === 60) {
                buf.push("&lt;");
            }
            else if (c === 62) {
                buf.push("&gt;");
            }
            else if (c === 38) {
                buf.push("&amp;");
            }
            else if (c === 34) {
                buf.push("&quot;");
            }
            else if (c === 39) {
                buf.push("&#39;");
            }
            else if (c >= 160 && c <= 255) {
                buf.push("&#" + c + ";");
            }
            else {
                buf.push(text.charAt(i));
            }
        }
        return buf.join("");
    }
    function encodeHtml(text) {
        if (text === undefined) {
            return "";
        }
        return fixHtmlSpaces(encode(text))
            .replace(/\r/g, "")
            .replace(/&#13;/g, "")
            .replace(/\n/g, "<br/>")
            .replace(/&#10;/g, "<br/>");
    }
    exports.encodeHtml = encodeHtml;
    function encodeJavascript(text) {
        return text
            .replace(/\\/g, "\\x5c")
            .replace(/'/g, "\\x27")
            .replace(/\"/g, "\\x22")
            .replace("&", "\\x26")
            .replace("<", "\\x3c")
            .replace(/>/g, "\\x3e")
            .replace(/\r/g, "\\r")
            .replace(/\n/g, "\\n");
    }
    exports.encodeJavascript = encodeJavascript;
    function encodeUrl(text) {
        return encodeURIComponent(text).replace(/'/g, "%27").replace(/%20/g, "+");
    }
    exports.encodeUrl = encodeUrl;
    var SURROGATE_PAIRS = "[".concat(String.fromCharCode(0xd800), "-").concat(String.fromCharCode(0xdbff), "]");
    var SURROGATE_PAIRS_REGEXP = new RegExp(SURROGATE_PAIRS, "g");
    function index(t, s, startIndex, searchFromEnd, ignoreCase) {
        try {
            if (s.length === 0 || startIndex < 0 || startIndex > length(t)) {
                return -1;
            }
            if (ignoreCase) {
                t = t.toLocaleLowerCase();
                s = s.toLocaleLowerCase();
            }
            if (startIndex && startIndex > 0) {
                startIndex = t.match(new RegExp("(" + SURROGATE_PAIRS + ".|.){" + startIndex + "}"))[0].length;
            }
            var index_1 = searchFromEnd ? t.lastIndexOf(s, startIndex || t.length) : t.indexOf(s, startIndex || 0);
            if (index_1 < 0) {
                return -1;
            }
            return length(t.substr(0, index_1));
        }
        catch (e) {
            return -1;
        }
    }
    exports.index = index;
    function length(t) {
        var surrogatePairs = t.match(SURROGATE_PAIRS_REGEXP);
        return t.length - (surrogatePairs ? surrogatePairs.length : 0);
    }
    exports.length = length;
    function replace(t, r, s) {
        var escapedRegExp = r.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
        return t.replace(new RegExp(escapedRegExp, "g"), s);
    }
    exports.replace = replace;
    function substr(text, start, len) {
        var lengthToReplace = length(text);
        if (start >= 0 && len > 0 && lengthToReplace >= start + 1) {
            lengthToReplace = Math.min(lengthToReplace, len);
        }
        else if (start >= 0 && len > 0 && lengthToReplace > start) {
            lengthToReplace = lengthToReplace - start;
        }
        else {
            return DataTypes_1.Constants.DEFAULT_TEXT;
        }
        var hasSurrogatePairs = text.match(SURROGATE_PAIRS_REGEXP);
        return hasSurrogatePairs
            ? text.match(new RegExp("(" + SURROGATE_PAIRS + ".|.){" + start + "}((" + SURROGATE_PAIRS + ".|.){" + lengthToReplace + "})"))[2]
            : text.substr(start, lengthToReplace);
    }
    exports.substr = substr;
    function toLower(t) {
        return t.toLowerCase();
    }
    exports.toLower = toLower;
    function toUpper(t) {
        return t.toUpperCase();
    }
    exports.toUpper = toUpper;
    function trim(t) {
        return t.trim();
    }
    exports.trim = trim;
    function trimStart(t) {
        var startIndex = 0;
        var character = " ";
        while (t[startIndex] === character) {
            startIndex++;
        }
        return t.substr(startIndex);
    }
    exports.trimStart = trimStart;
    function trimEnd(t) {
        var endIndex = t.length - 1;
        var character = " ";
        while (t[endIndex] === character) {
            endIndex--;
        }
        return t.substr(0, endIndex + 1);
    }
    exports.trimEnd = trimEnd;
    function like(str, searchPattern) {
        if (!searchPattern) {
            return false;
        }
        var regexPattern = searchPattern
            .replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&")
            .replace(/%/g, ".*")
            .replace(/_/g, ".");
        return RegExp("^".concat(regexPattern, "$"), "gi").test(str);
    }
    exports.like = like;
    function addDays(value, daysToAdd) {
        return value.addDays(daysToAdd);
    }
    exports.addDays = addDays;
    function addHours(value, hoursToAdd) {
        return value.addHours(hoursToAdd);
    }
    exports.addHours = addHours;
    function addMinutes(value, minutesToAdd) {
        return value.addMinutes(minutesToAdd);
    }
    exports.addMinutes = addMinutes;
    function addSeconds(value, secondsToAdd) {
        return value.addSeconds(secondsToAdd);
    }
    exports.addSeconds = addSeconds;
    function addYears(value, yearsToAdd) {
        return value.addYears(yearsToAdd);
    }
    exports.addYears = addYears;
    function addMonths(value, monthsToAdd) {
        return value.addMonths(monthsToAdd);
    }
    exports.addMonths = addMonths;
    function buildDateTime(value, timeValue) {
        return new DataTypes_1.DateTime(value.year, value.month, value.day, timeValue.hours, timeValue.minutes, timeValue.seconds, timeValue.milliseconds);
    }
    exports.buildDateTime = buildDateTime;
    function currDate() {
        var dateTime = new DataTypes_1.DateTime(new Date());
        return new DataTypes_1.DateTime(dateTime.year, dateTime.month, dateTime.day);
    }
    exports.currDate = currDate;
    function currDateTime() {
        return new DataTypes_1.DateTime(new Date());
    }
    exports.currDateTime = currDateTime;
    function currTime() {
        var dateTime = new DataTypes_1.DateTime(new Date());
        return new DataTypes_1.DateTime(1900, 1, 1, dateTime.hours, dateTime.minutes, dateTime.seconds);
    }
    exports.currTime = currTime;
    function dayOfWeek(dateValue) {
        return dateValue.weekDay;
    }
    exports.dayOfWeek = dayOfWeek;
    function toMilisecondsWithTimezoneOffset(date) {
        var dateWithTimezone = new Date(date.getTime());
        dateWithTimezone.setMinutes(date.getMinutes() - date.getTimezoneOffset());
        return dateWithTimezone.getTime();
    }
    function diff(dt, dt2, divider, useTimeZoneOffset) {
        if (useTimeZoneOffset === void 0) { useTimeZoneOffset = false; }
        var useHours = divider <= 3600000;
        var useMinutes = divider <= 60000;
        var useSeconds = divider <= 1000;
        var dtNative = fixTimePart(dt, useHours, useMinutes, useSeconds).toNative();
        var dt2Native = fixTimePart(dt2, useHours, useMinutes, useSeconds).toNative();
        var d = Date.UTC(dtNative.getUTCFullYear(), dtNative.getUTCMonth(), dtNative.getUTCDate(), dtNative.getUTCHours(), dtNative.getUTCMinutes(), dtNative.getUTCSeconds(), 0);
        var d2 = Date.UTC(dt2Native.getUTCFullYear(), dt2Native.getUTCMonth(), dt2Native.getUTCDate(), dt2Native.getUTCHours(), dt2Native.getUTCMinutes(), dt2Native.getUTCSeconds(), 0);
        var ms = useTimeZoneOffset
            ? toMilisecondsWithTimezoneOffset(dt2Native) - toMilisecondsWithTimezoneOffset(dtNative)
            : d2 - d;
        return Math.floor(ms / divider);
    }
    function fixTimePart(dt, useHours, useMinutes, useSeconds) {
        return new DataTypes_1.DateTime(dt.year, dt.month, dt.day, useHours ? dt.hours : 0, useMinutes ? dt.minutes : 0, useSeconds ? dt.seconds : 0);
    }
    function diffDays(dt, dt2) {
        return diff(dt, dt2, 86400000, true);
    }
    exports.diffDays = diffDays;
    function diffHours(dt, dt2) {
        return diff(dt, dt2, 3600000);
    }
    exports.diffHours = diffHours;
    function diffMinutes(dt, dt2) {
        return diff(dt, dt2, 60000);
    }
    exports.diffMinutes = diffMinutes;
    function diffSeconds(dt, dt2) {
        return diff(dt, dt2, 1000);
    }
    exports.diffSeconds = diffSeconds;
    function year(dateValue) {
        return dateValue.year;
    }
    exports.year = year;
    function month(dateValue) {
        return dateValue.month;
    }
    exports.month = month;
    function day(dateValue) {
        return dateValue.day;
    }
    exports.day = day;
    function hour(dateValue) {
        return dateValue.hours;
    }
    exports.hour = hour;
    function minute(dateValue) {
        return dateValue.minutes;
    }
    exports.minute = minute;
    function second(dateValue) {
        return dateValue.seconds;
    }
    exports.second = second;
    function newDate(y, mo, d) {
        if (validateDate(y, mo, d)) {
            return new DataTypes_1.DateTime(y, mo, d);
        }
        return DataTypes_1.Constants.DEFAULT_DATE;
    }
    exports.newDate = newDate;
    function newDateTime(y, mo, d, h, mi, s) {
        if (validateDateTime(y, mo, d, h, mi, s)) {
            return new DataTypes_1.DateTime(y, mo, d, h, mi, s);
        }
        return DataTypes_1.Constants.DEFAULT_DATETIME;
    }
    exports.newDateTime = newDateTime;
    function newTime(h, mi, s) {
        if (validateTime(h, mi, s)) {
            return new DataTypes_1.DateTime(1900, 1, 1, h, mi, s);
        }
        return DataTypes_1.Constants.DEFAULT_TIME;
    }
    exports.newTime = newTime;
    function validateTime(hours, minutes, seconds) {
        var time = new DataTypes_1.DateTime(1900, 1, 1, hours, minutes, seconds);
        return time.hours === hours && time.minutes === minutes && time.seconds === seconds;
    }
    function validateDate(year, month, day) {
        var dateTime = new DataTypes_1.DateTime(year, month, day);
        return dateTime.year === year && dateTime.month === month && dateTime.day === day;
    }
    function validateDateTime(year, month, day, hours, minutes, seconds) {
        var dateTime = new DataTypes_1.DateTime(year, month, day, hours, minutes, seconds);
        return (dateTime.year === year &&
            dateTime.month === month &&
            dateTime.day === day &&
            dateTime.hours === hours &&
            dateTime.minutes === minutes &&
            dateTime.seconds === seconds);
    }
    function booleanToInteger(value) {
        return value ? 1 : 0;
    }
    exports.booleanToInteger = booleanToInteger;
    function booleanToLongInteger(value) {
        return value ? DataTypes_1.LongInteger.fromNumber(1) : DataTypes_1.LongInteger.fromNumber(0);
    }
    exports.booleanToLongInteger = booleanToLongInteger;
    function booleanToDecimal(value) {
        return new DataTypes_1.Decimal(value ? 1 : 0);
    }
    exports.booleanToDecimal = booleanToDecimal;
    function booleanToText(value) {
        if (value === true) {
            return "True";
        }
        else if (value === false) {
            return "False";
        }
        else {
            return DataTypes_1.Constants.DEFAULT_TEXT;
        }
    }
    exports.booleanToText = booleanToText;
    function dateTimeToDate(value) {
        return new DataTypes_1.DateTime(value.year, value.month, value.day);
    }
    exports.dateTimeToDate = dateTimeToDate;
    function dateTimeToTime(value) {
        return new DataTypes_1.DateTime(1900, 1, 1, value.hours, value.minutes, value.seconds);
    }
    exports.dateTimeToTime = dateTimeToTime;
    function dateTimeToText(value) {
        return value.toString(DataTypes_1.Constants.FORMAT.defaultDateTimeFormat.dateTimeFormat);
    }
    exports.dateTimeToText = dateTimeToText;
    function dateToText(value) {
        return value.toString(DataTypes_1.Constants.FORMAT.defaultDateTimeFormat.dateFormat);
    }
    exports.dateToText = dateToText;
    function dateToDateTime(value) {
        return value;
    }
    exports.dateToDateTime = dateToDateTime;
    function decimalToBoolean(d) {
        return !d.eq(new DataTypes_1.Decimal(0.0));
    }
    exports.decimalToBoolean = decimalToBoolean;
    function decimalToText(value) {
        return DataTypes_1.TypeValidations.isValidDecimal(value) ? value.toString() : DataTypes_1.Constants.DEFAULT_TEXT;
    }
    exports.decimalToText = decimalToText;
    function decimalToIntegerValidate(value) {
        return value.gte(DataTypes_1.Constants.MIN_INTEGER_VALUE) && value.lte(DataTypes_1.Constants.MAX_INTEGER_VALUE);
    }
    exports.decimalToIntegerValidate = decimalToIntegerValidate;
    function decimalToInteger(value) {
        if (!decimalToIntegerValidate(value)) {
            return DataTypes_1.Constants.DEFAULT_INTEGER;
        }
        return value.round().toNumber();
    }
    exports.decimalToInteger = decimalToInteger;
    function decimalToLongIntegerValidate(value) {
        return (value.gte(DataTypes_1.Constants.MIN_LONGINTEGER_VALUE.toString()) && value.lte(DataTypes_1.Constants.MAX_LONGINTEGER_VALUE.toString()));
    }
    exports.decimalToLongIntegerValidate = decimalToLongIntegerValidate;
    function decimalToLongInteger(value) {
        if (!decimalToLongIntegerValidate(value)) {
            return DataTypes_1.Constants.DEFAULT_LONGINTEGER;
        }
        return DataTypes_1.LongInteger.fromString(value.round().toString());
    }
    exports.decimalToLongInteger = decimalToLongInteger;
    function longIntegerToDecimal(value) {
        return new DataTypes_1.Decimal(value.toString());
    }
    exports.longIntegerToDecimal = longIntegerToDecimal;
    function longIntegerToIntegerValidate(value) {
        return DataTypes_1.TypeValidations.isWithinIntegerRange(value.toNumber());
    }
    exports.longIntegerToIntegerValidate = longIntegerToIntegerValidate;
    function longIntegerToInteger(value) {
        var num = value.toNumber();
        if (!DataTypes_1.TypeValidations.isWithinIntegerRange(num)) {
            return DataTypes_1.Constants.DEFAULT_INTEGER;
        }
        return num;
    }
    exports.longIntegerToInteger = longIntegerToInteger;
    function longIntegerToIdentifier(value) {
        return value;
    }
    exports.longIntegerToIdentifier = longIntegerToIdentifier;
    function longIntegerToText(value) {
        return DataTypes_1.TypeValidations.isValidLongInteger(value) ? value.toString() : DataTypes_1.Constants.DEFAULT_TEXT;
    }
    exports.longIntegerToText = longIntegerToText;
    function identifierToInteger(er) {
        return er;
    }
    exports.identifierToInteger = identifierToInteger;
    function identifierToLongInteger(value) {
        return value;
    }
    exports.identifierToLongInteger = identifierToLongInteger;
    function identifierToText(ert) {
        return ert;
    }
    exports.identifierToText = identifierToText;
    function integerToLongInteger(value) {
        return DataTypes_1.LongInteger.fromNumber(value);
    }
    exports.integerToLongInteger = integerToLongInteger;
    function integerToIdentifier(i) {
        return i;
    }
    exports.integerToIdentifier = integerToIdentifier;
    function integerToBoolean(i) {
        return i !== 0;
    }
    exports.integerToBoolean = integerToBoolean;
    function integerToText(value) {
        return DataTypes_1.TypeValidations.isValidInteger(value) ? value.toString() : DataTypes_1.Constants.DEFAULT_TEXT;
    }
    exports.integerToText = integerToText;
    function integerToDecimal(value) {
        return new DataTypes_1.Decimal(value);
    }
    exports.integerToDecimal = integerToDecimal;
    function nullIdentifier() {
        return 0;
    }
    exports.nullIdentifier = nullIdentifier;
    function nullTextIdentifier() {
        return "";
    }
    exports.nullTextIdentifier = nullTextIdentifier;
    function nullDate() {
        return DataTypes_1.Constants.DEFAULT_DATE;
    }
    exports.nullDate = nullDate;
    function nullObject() {
        return null;
    }
    exports.nullObject = nullObject;
    function nullBinary() {
        return DataTypes_1.Constants.DEFAULT_BINARYDATA;
    }
    exports.nullBinary = nullBinary;
    function internalTextToDateValidate(value, format) {
        var valid = format.getRegExpForDate().test(value);
        if (valid) {
            var input = parseDateFromRx(format);
            var date = new DataTypes_1.DateTime(input.year, input.month, input.day);
            valid = date.year === input.year && date.month === input.month && date.day === input.day;
        }
        return valid;
    }
    function internalTextToDate(value, format) {
        if (!internalTextToDateValidate(value, format)) {
            return DataTypes_1.DateTime.defaultValue;
        }
        format.getRegExpForDate().test(value);
        var input = parseDateFromRx(format);
        return new DataTypes_1.DateTime(input.year, input.month, input.day);
    }
    function internalTextToDateTimeValidate(value, format) {
        var valid = format.getRegExpForDateTime().test(value);
        if (valid) {
            var input = parseDateTimeFromRx(format);
            valid = validateDateTime(input.year, input.month, input.day, input.hours, input.minutes, input.seconds);
        }
        return valid;
    }
    function internalTextToDateTime(value, format) {
        if (!internalTextToDateTimeValidate(value, format)) {
            return DataTypes_1.DateTime.defaultValue;
        }
        var input = parseDateTimeFromRx(format);
        return new DataTypes_1.DateTime(input.year, input.month, input.day, input.hours, input.minutes, input.seconds);
    }
    function isISODateTime(value) {
        return value.toUpperCase().indexOf("T") !== -1;
    }
    function isSpaceSeparatedDateTime(value) {
        return value.indexOf(" ") !== -1;
    }
    function getDateFromDateTime(value) {
        var splitPos = value.toUpperCase().search("T| ");
        if (splitPos !== -1) {
            value = value.substring(0, splitPos);
        }
        return value;
    }
    function textToDateValidate(value) {
        var acceptable = DataTypes_1.Constants.FORMAT.dateTimeFormats;
        value = getDateFromDateTime(value);
        for (var dateInd = 0; dateInd < acceptable.length; ++dateInd) {
            if (internalTextToDateValidate(value, acceptable[dateInd])) {
                return true;
            }
        }
        return false;
    }
    exports.textToDateValidate = textToDateValidate;
    function textToDate(value) {
        var acceptable = DataTypes_1.Constants.FORMAT.dateTimeFormats;
        value = getDateFromDateTime(value);
        for (var dateInd = 0; dateInd < acceptable.length; ++dateInd) {
            var textConverted = internalTextToDate(value, acceptable[dateInd]);
            if (!textConverted.eq(DataTypes_1.DateTime.defaultValue)) {
                return textConverted;
            }
        }
        return DataTypes_1.DateTime.defaultValue;
    }
    exports.textToDate = textToDate;
    function ISODateTimeValidate(value) {
        if (isISODateTime(value)) {
            return !isNaN(Date.parse(value));
        }
        else {
            return true;
        }
    }
    function textToDateTimeValidate(value) {
        var acceptable = DataTypes_1.Constants.FORMAT.dateTimeFormats;
        if (isISODateTime(value)) {
            return ISODateTimeValidate(value);
        }
        if (!isSpaceSeparatedDateTime(value)) {
            value += " 00:00:00";
        }
        for (var dateInd = 0; dateInd < acceptable.length; ++dateInd) {
            if (internalTextToDateTimeValidate(value, acceptable[dateInd])) {
                return true;
            }
        }
        return false;
    }
    exports.textToDateTimeValidate = textToDateTimeValidate;
    function textToDateTime(value) {
        var acceptable = DataTypes_1.Constants.FORMAT.dateTimeFormats;
        if (isISODateTime(value)) {
            return DataTypes_1.DateTime.fromISODateTime(value);
        }
        if (!isSpaceSeparatedDateTime(value)) {
            value += " 00:00:00";
        }
        for (var dateInd = 0; dateInd < acceptable.length; ++dateInd) {
            var textConverted = internalTextToDateTime(value, acceptable[dateInd]);
            if (!textConverted.eq(DataTypes_1.DateTime.defaultValue)) {
                return textConverted;
            }
        }
        return DataTypes_1.DateTime.defaultValue;
    }
    exports.textToDateTime = textToDateTime;
    function getTimeFromSpaceSeparatedDateTime(value) {
        var splitPos = value.indexOf(" ");
        if (splitPos !== -1) {
            value = value.substring(splitPos + 1, value.length);
        }
        return value;
    }
    function textToTimeValidate(value, format) {
        if (format === void 0) { format = DataTypes_1.Constants.FORMAT.defaultDateTimeFormat; }
        if (isISODateTime(value)) {
            return ISODateTimeValidate(value);
        }
        if (isSpaceSeparatedDateTime(value)) {
            value = getTimeFromSpaceSeparatedDateTime(value);
        }
        var valid = format.getRegExpForTime().test(value);
        if (valid) {
            var input = parseTimeFromRx(format);
            valid = validateTime(input.hours, input.minutes, input.seconds);
        }
        return valid;
    }
    exports.textToTimeValidate = textToTimeValidate;
    function textToTime(value) {
        if (isISODateTime(value)) {
            var dateTime = DataTypes_1.DateTime.fromISODateTime(value);
            return new DataTypes_1.DateTime(1900, 1, 1, dateTime.hours, dateTime.minutes, dateTime.seconds, dateTime.milliseconds);
        }
        if (isSpaceSeparatedDateTime(value)) {
            value = getTimeFromSpaceSeparatedDateTime(value);
        }
        return internalTextToTime(value, DataTypes_1.Constants.FORMAT.defaultDateTimeFormat);
    }
    exports.textToTime = textToTime;
    function internalTextToTime(value, format) {
        if (!textToTimeValidate(value, format)) {
            return DataTypes_1.DateTime.defaultValue;
        }
        format.getRegExpForTime().test(value);
        var input = parseTimeFromRx(format);
        return new DataTypes_1.DateTime(1900, 1, 1, input.hours, input.minutes, input.seconds);
    }
    function timeToText(value) {
        return value.toString(DataTypes_1.Constants.FORMAT.defaultDateTimeFormat.timeFormat);
    }
    exports.timeToText = timeToText;
    function tryParseInteger(value) {
        if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForInteger().test(value)) {
            var intValue = parseInt(value, 10);
            if (!isNaN(intValue) && intValue >= DataTypes_1.Constants.MIN_INTEGER_VALUE && intValue <= DataTypes_1.Constants.MAX_INTEGER_VALUE) {
                return intValue;
            }
        }
        return null;
    }
    function tryParseDecimal(value) {
        if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForDecimal().test(value)) {
            var decValue = new DataTypes_1.Decimal(value);
            if (!decValue.isNaN() &&
                decValue.gte(DataTypes_1.Constants.MIN_DECIMAL_VALUE) &&
                decValue.lte(DataTypes_1.Constants.MAX_DECIMAL_VALUE)) {
                return decValue;
            }
        }
        return null;
    }
    function tryParseLongInteger(value) {
        if (!DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForInteger().test(value)) {
            return null;
        }
        var isNegativeNumber = value.charAt(0) === "-";
        if ((isNegativeNumber && value.length < DataTypes_1.Constants.MIN_LONGINTEGER_VALUE.toString().length) ||
            (!isNegativeNumber && value.length < DataTypes_1.Constants.MAX_LONGINTEGER_VALUE.toString().length) ||
            decimalToLongIntegerValidate(new DataTypes_1.Decimal(value))) {
            try {
                return DataTypes_1.LongInteger.fromString(value);
            }
            catch (e) {
            }
        }
        return null;
    }
    function textToDecimalValidate(value) {
        return tryParseDecimal(value) !== null;
    }
    exports.textToDecimalValidate = textToDecimalValidate;
    function textToDecimal(value) {
        var decimal = tryParseDecimal(value);
        if (decimal === null) {
            return DataTypes_1.Constants.DEFAULT_DECIMAL;
        }
        return new DataTypes_1.Decimal(value);
    }
    exports.textToDecimal = textToDecimal;
    function textToIntegerValidate(value) {
        return tryParseInteger(value) !== null;
    }
    exports.textToIntegerValidate = textToIntegerValidate;
    function textToInteger(value) {
        var integer = tryParseInteger(value);
        if (integer === null) {
            return DataTypes_1.Constants.DEFAULT_INTEGER;
        }
        return integer;
    }
    exports.textToInteger = textToInteger;
    function textToLongIntegerValidate(value) {
        return tryParseLongInteger(value) !== null;
    }
    exports.textToLongIntegerValidate = textToLongIntegerValidate;
    function textToLongInteger(value) {
        var long = tryParseLongInteger(value);
        if (long === null) {
            return DataTypes_1.Constants.DEFAULT_LONGINTEGER;
        }
        return long;
    }
    exports.textToLongInteger = textToLongInteger;
    function textToBoolean(value) {
        return value.toLowerCase() === "true";
    }
    exports.textToBoolean = textToBoolean;
    function textToIdentifier(t) {
        return t;
    }
    exports.textToIdentifier = textToIdentifier;
    function objectToInteger(value) {
        if (typeof value === "number" || DataTypes_1.TypeValidations.isLongInteger(value) || DataTypes_1.TypeValidations.isDecimal(value)) {
            return new DataTypes_1.Decimal(value.toString()).round().toNumber();
        }
        throw new TypeError("Cannot convert type '" + typeof value + "' to 'Integer'");
    }
    exports.objectToInteger = objectToInteger;
    function objectToLongInteger(value) {
        if (typeof value === "number" || DataTypes_1.TypeValidations.isLongInteger(value) || DataTypes_1.TypeValidations.isDecimal(value)) {
            return DataTypes_1.LongInteger.fromString(new DataTypes_1.Decimal(value.toString()).round().toString());
        }
        throw new TypeError("Cannot convert type '" + typeof value + "' to 'LongInteger'");
    }
    exports.objectToLongInteger = objectToLongInteger;
    function objectToBoolean(value) {
        if (typeof value === "boolean") {
            return value;
        }
        throw new TypeError("Cannot convert type '" + typeof value + "' to 'Boolean'");
    }
    exports.objectToBoolean = objectToBoolean;
    function objectToDecimal(value) {
        if (typeof value === "number" || DataTypes_1.TypeValidations.isLongInteger(value) || DataTypes_1.TypeValidations.isDecimal(value)) {
            return new DataTypes_1.Decimal(value.toString());
        }
        throw new TypeError("Cannot convert type '" + typeof value + "' to 'Decimal'");
    }
    exports.objectToDecimal = objectToDecimal;
    function objectToText(value) {
        if (typeof value === "string") {
            return value;
        }
        throw new TypeError("Cannot convert type '" + typeof value + "' to 'Text'");
    }
    exports.objectToText = objectToText;
    function objectToDate(value) {
        return convertObjectToDateTime(value, true, false);
    }
    exports.objectToDate = objectToDate;
    function objectToTime(value) {
        return convertObjectToDateTime(value, false, true);
    }
    exports.objectToTime = objectToTime;
    function objectToDateTime(value) {
        return convertObjectToDateTime(value, true, true);
    }
    exports.objectToDateTime = objectToDateTime;
    function convertObjectToDateTime(value, hasDate, hasTime) {
        if (value instanceof DataTypes_1.DateTime || Object.prototype.toString.call(value) === "[object Date]") {
            var dateTime = new DataTypes_1.DateTime(value.getTime());
            var year_1 = hasDate ? dateTime.year : 1900;
            var month_1 = hasDate ? dateTime.month : 1;
            var days = hasDate ? dateTime.day : 1;
            var hours = hasTime ? dateTime.hours : 0;
            var minutes = hasTime ? dateTime.minutes : 0;
            var seconds = hasTime ? dateTime.seconds : 0;
            return new DataTypes_1.DateTime(year_1, month_1, days, hours, minutes, seconds);
        }
        throw new TypeError("Cannot convert type '" + typeof value + "' to 'DateTime'");
    }
    function toObject(value) {
        return value;
    }
    exports.toObject = toObject;
    function formatDateTime(dateValue, format) {
        return dateValue.toString(format);
    }
    exports.formatDateTime = formatDateTime;
    function formatCurrency(currencyValue, currencySymbol, decimalDigits, decimalSeparator, groupSeparator) {
        var decimalAsText = formatDecimal(currencyValue, decimalDigits, decimalSeparator, groupSeparator);
        return decimalAsText === DataTypes_1.Constants.DEFAULT_TEXT ? DataTypes_1.Constants.DEFAULT_TEXT : currencySymbol + decimalAsText;
    }
    exports.formatCurrency = formatCurrency;
    function formatDecimal(decimalValue, decimalDigits, decimalSeparator, groupSeparator) {
        if (decimalDigits < 0) {
            return DataTypes_1.Constants.DEFAULT_TEXT;
        }
        if (decimalSeparator.length > 1) {
            decimalSeparator = decimalSeparator.substr(0, 1);
        }
        if (groupSeparator.length > 1) {
            groupSeparator = groupSeparator.substr(0, 1);
        }
        return decimalValue.toFormat(decimalDigits, DataTypes_1.Decimal.rounding, {
            decimalSeparator: decimalSeparator,
            groupSeparator: groupSeparator,
        });
    }
    exports.formatDecimal = formatDecimal;
    function formatPercent(value, decimal_digits, decimal_separator) {
        try {
            if (decimal_digits < 0) {
                return "";
            }
            if (decimal_separator.length > 1) {
                decimal_separator = decimal_separator.substr(0, 1);
            }
            return (value.times(100).toFormat(decimal_digits, DataTypes_1.Decimal.rounding, {
                decimalSeparator: decimal_separator,
                groupSeparator: "",
            }) + "%");
        }
        catch (e) {
            return "";
        }
    }
    exports.formatPercent = formatPercent;
    function formatPhoneNumber(val, int_code_digits, area_code_digits, phone_digits, int_separator, area_separator, phone_separator) {
        try {
            if (!/^\d+$/.test(val)) {
                return val;
            }
            if (val.length !== int_code_digits + area_code_digits + phone_digits) {
                return val;
            }
            return (int_separator +
                val.substr(0, int_code_digits) +
                area_separator +
                val.substr(int_code_digits, area_code_digits) +
                phone_separator +
                val.substr(int_code_digits + area_code_digits, phone_digits));
        }
        catch (e) {
            return "";
        }
    }
    exports.formatPhoneNumber = formatPhoneNumber;
    function formatText(val, min_chars, max_chars, left_padding, padding_char) {
        try {
            var len = length(val);
            if (len < min_chars) {
                padding_char = substr(padding_char, 0, 1);
                var missingLength = min_chars - len;
                while (missingLength-- > 0) {
                    if (left_padding) {
                        val = padding_char + val;
                    }
                    else {
                        val = val + padding_char;
                    }
                }
                return val;
            }
            if (len > max_chars) {
                if (left_padding) {
                    return substr(val, len - max_chars, max_chars);
                }
                else {
                    return substr(val, 0, max_chars);
                }
            }
            return val;
        }
        catch (e) {
            return "";
        }
    }
    exports.formatText = formatText;
    var emailRegexStr = "[a-zA-Z0-9.!#$%&'*+\\-/=?^_`{|}~]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*";
    var emailNameStr = "([0-9a-zA-Z\\\\= ]*|=\\?([^?]*)\\?([qQbB])\\?([^?]*)\\?=)";
    var simpleEmailRegex = new RegExp("^" + emailRegexStr + "$");
    var nameAndEmailRegex = new RegExp("^" + emailNameStr + "[ ]*<" + emailRegexStr + ">$");
    var quotedNameAndEmailRegex = new RegExp('^\\"' + emailNameStr + '\\"[ ]*<' + emailRegexStr + ">$");
    function emailAddressValidate(textValue) {
        if (textValue === "") {
            return true;
        }
        if (/\.@/.test(textValue)) {
            return false;
        }
        return (simpleEmailRegex.test(textValue) || nameAndEmailRegex.test(textValue) || quotedNameAndEmailRegex.test(textValue));
    }
    exports.emailAddressValidate = emailAddressValidate;
    function getCurrentLocale() {
        var localeService = Injector.resolve(KnownServices_1.ServiceNames.LocaleService);
        if (localeService) {
            return localeService.getCurrentLocale();
        }
    }
    exports.getCurrentLocale = getCurrentLocale;
    function getUserAgent() {
        return navigator.userAgent;
    }
    exports.getUserAgent = getUserAgent;
    function getEntryEspaceName() {
        return ApplicationInfo.getHomeModuleName();
    }
    exports.getEntryEspaceName = getEntryEspaceName;
    function getBookmarkableURL() {
        return window.location.href;
    }
    exports.getBookmarkableURL = getBookmarkableURL;
    function getOwnerURLPath() {
        return Navigation.buildApplicationRelativeUrl();
    }
    exports.getOwnerURLPath = getOwnerURLPath;
    function getUserId() {
        return RolesInfo.getUserId();
    }
    exports.getUserId = getUserId;
    function iif(condition, trueReturn, falseReturn) {
        return condition ? trueReturn : falseReturn;
    }
    exports.iif = iif;
});
//# sourceMappingURL=BuiltinFunctions.js.map;
define('OutSystems/ClientRuntime/modules/Database/DatabaseTypeUtils',["require", "exports", "../../DataTypes", "../../Exceptions", "./DBDataType"], function (require, exports, DataTypes_1, Exceptions_1, DBDataType_1) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertDataTypeToDBDataType = exports.typeDisplayName = exports.convertToModelDataType = exports.typeDefaultValue = exports.dataTypeToDBDataType = void 0;
    exports.dataTypeToDBDataType = (_a = {},
        _a[DataTypes_1.DataTypes.Integer] = DBDataType_1.default.INTEGER,
        _a[DataTypes_1.DataTypes.LongInteger] = DBDataType_1.default.LONGINTEGER,
        _a[DataTypes_1.DataTypes.Decimal] = DBDataType_1.default.DECIMAL,
        _a[DataTypes_1.DataTypes.Currency] = DBDataType_1.default.DECIMAL,
        _a[DataTypes_1.DataTypes.Text] = DBDataType_1.default.TEXT,
        _a[DataTypes_1.DataTypes.PhoneNumber] = DBDataType_1.default.TEXT,
        _a[DataTypes_1.DataTypes.Email] = DBDataType_1.default.TEXT,
        _a[DataTypes_1.DataTypes.Boolean] = DBDataType_1.default.BOOLEAN,
        _a[DataTypes_1.DataTypes.Date] = DBDataType_1.default.DATE,
        _a[DataTypes_1.DataTypes.DateTime] = DBDataType_1.default.DATE_TIME,
        _a[DataTypes_1.DataTypes.Time] = DBDataType_1.default.TIME,
        _a[DataTypes_1.DataTypes.Record] = DBDataType_1.default.UNKNOWN,
        _a[DataTypes_1.DataTypes.RecordList] = DBDataType_1.default.UNKNOWN,
        _a[DataTypes_1.DataTypes.BinaryData] = DBDataType_1.default.BINARY_DATA,
        _a[DataTypes_1.DataTypes.Object] = DBDataType_1.default.UNKNOWN,
        _a);
    function typeDefaultValue(dataType) {
        switch (dataType) {
            case DBDataType_1.default.INTEGER:
            case DBDataType_1.default.LONGINTEGER:
            case DBDataType_1.default.DECIMAL:
            case DBDataType_1.default.TEXT:
            case DBDataType_1.default.BOOLEAN:
            case DBDataType_1.default.DATE:
            case DBDataType_1.default.DATE_TIME:
            case DBDataType_1.default.TIME:
            case DBDataType_1.default.BINARY_DATA:
                return (0, DataTypes_1.defaultForType)(convertToModelDataType(dataType));
            default:
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to determine default value for type ".concat(typeDisplayName(dataType)));
        }
    }
    exports.typeDefaultValue = typeDefaultValue;
    function convertToModelDataType(dbDataType) {
        switch (dbDataType) {
            case DBDataType_1.default.TEXT:
                return DataTypes_1.DataTypes.Text;
            case DBDataType_1.default.BINARY_DATA:
                return DataTypes_1.DataTypes.BinaryData;
            case DBDataType_1.default.BOOLEAN:
                return DataTypes_1.DataTypes.Boolean;
            case DBDataType_1.default.DATE:
                return DataTypes_1.DataTypes.Date;
            case DBDataType_1.default.DATE_TIME:
                return DataTypes_1.DataTypes.DateTime;
            case DBDataType_1.default.TIME:
                return DataTypes_1.DataTypes.Time;
            case DBDataType_1.default.DECIMAL:
                return DataTypes_1.DataTypes.Decimal;
            case DBDataType_1.default.INTEGER:
                return DataTypes_1.DataTypes.Integer;
            case DBDataType_1.default.LONGINTEGER:
                return DataTypes_1.DataTypes.LongInteger;
            default:
                throw new Error("Missing case for conversion of DB data type '".concat(dbDataType, "' to a model data type."));
        }
    }
    exports.convertToModelDataType = convertToModelDataType;
    function typeDisplayName(dbDataType) {
        var modelDataType = convertToModelDataType(dbDataType);
        return DataTypes_1.DataTypes[modelDataType];
    }
    exports.typeDisplayName = typeDisplayName;
    function convertDataTypeToDBDataType(runtimeType) {
        var dbType = exports.dataTypeToDBDataType[runtimeType];
        return dbType !== null && dbType !== void 0 ? dbType : DBDataType_1.default.UNKNOWN;
    }
    exports.convertDataTypeToDBDataType = convertDataTypeToDBDataType;
});
//# sourceMappingURL=DatabaseTypeUtils.js.map;
define('OutSystems/ClientRuntime/DataConversion',["require", "exports", "./BuiltinFunctions", "./DataTypes", "./Exceptions", "./Interfaces", "./modules/Database/DatabaseTypeUtils", "./Settings"], function (require, exports, BuiltinFunctions, DataTypes_1, Exceptions_1, Interfaces_1, DatabaseTypeUtils_1, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LocalStorageConverter = exports.NewJSONConverter = exports.JSONConverter = exports.JSNodeParamConverter = exports.JSConversions = exports.ServerDataConverter = void 0;
    function isGenericRecordType(dataType) {
        return !!dataType.isGenericRecordType;
    }
    function isGenericRecordListType(dataType) {
        return !!dataType.isGenericRecordListType;
    }
    function isBasicTypeListType(dataType) {
        return !!dataType.isBasicTypeListType;
    }
    var ServerDataConverter;
    (function (ServerDataConverter) {
        var ToMethodCache = new Map();
        var FromMethodCache = new Map();
        function to(value, dataTypeOrCallContext, callContextOrOptimizeList, optimizeList) {
            if (dataTypeOrCallContext === void 0) { dataTypeOrCallContext = DataTypes_1.DataTypes.Record; }
            if (callContextOrOptimizeList === void 0) { callContextOrOptimizeList = false; }
            if (optimizeList === void 0) { optimizeList = false; }
            return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                ? toWithEval(value, dataTypeOrCallContext, callContextOrOptimizeList, optimizeList)
                : toWithoutEval(value, dataTypeOrCallContext, callContextOrOptimizeList, optimizeList);
        }
        ServerDataConverter.to = to;
        function asString(value, dataType) {
            return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                ? toWithEval(value, dataType, false, false, true)
                : toWithoutEval(value, dataType, false, false, true);
        }
        ServerDataConverter.asString = asString;
        function toWithEval(value, dataTypeOrCallContext, callContextOrOptimizeList, optimizeList, convertToString) {
            if (dataTypeOrCallContext === void 0) { dataTypeOrCallContext = DataTypes_1.DataTypes.Record; }
            if (callContextOrOptimizeList === void 0) { callContextOrOptimizeList = false; }
            if (optimizeList === void 0) { optimizeList = false; }
            if (convertToString === void 0) { convertToString = false; }
            if (value === undefined || value === null) {
                return;
            }
            var dataType = DataTypes_1.DataTypes.Record;
            var callContext;
            if (typeof dataTypeOrCallContext !== "number") {
                optimizeList = callContextOrOptimizeList === true;
                callContext = dataTypeOrCallContext;
                dataType = DataTypes_1.DataTypes.Record;
            }
            else {
                dataType = dataTypeOrCallContext;
                if (typeof callContextOrOptimizeList !== "boolean") {
                    callContext = callContextOrOptimizeList;
                }
            }
            if (value instanceof DataTypes_1.GenericRecord) {
                var record = value;
                var recordType = record.constructor;
                var converter = ToMethodCache.get(recordType);
                if (!converter) {
                    var attributes = record.getAttributes();
                    var toFuncCode_1 = "return function to(record, callContext, optimizeList) {\n";
                    toFuncCode_1 += "    return {\n";
                    attributes.forEach(function (attr, index) {
                        if (!attr.ignoreForServer) {
                            if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                                toFuncCode_1 += "        ".concat(attr.name, ": toServerData(record.").concat(attr.attrName, ", callContext, ").concat(attr.optimizeList, " && optimizeList),\n");
                            }
                            else if (attr.dataType !== DataTypes_1.DataTypes.Object) {
                                toFuncCode_1 += "        ".concat(attr.name, ": basicTypeToJS(record.").concat(attr.attrName, ", attributes[").concat(index, "].dataType, ").concat(convertToString, "),\n");
                            }
                        }
                    });
                    toFuncCode_1 += "    };\n";
                    toFuncCode_1 += "};";
                    converter = new Function("toServerData", "basicTypeToJS", "attributes", toFuncCode_1)(to, basicTypeToJS, attributes);
                    ToMethodCache.set(recordType, converter);
                }
                return converter(value, callContext, optimizeList);
            }
            else if (value instanceof DataTypes_1.List) {
                var list = value;
                var listItemType = list.constructor.getItemType();
                var result = {
                    List: [],
                };
                if (!optimizeList || !callContext) {
                    for (var i = 0; i < list.length; i++) {
                        result.List.push(to(list.getItem(i), listItemType));
                    }
                }
                else {
                    if (list.length > 0 && callContext) {
                        var currentRow = callContext.iterationContext.getCurrentRowNumber(value);
                        result.List.push(to(list.getItem(currentRow), listItemType, callContext, optimizeList));
                    }
                }
                if (list.isEmpty) {
                    result.EmptyListItem = to(list.emptyListItem, listItemType, callContext, optimizeList);
                }
                return result;
            }
            else if (dataType !== DataTypes_1.DataTypes.Object) {
                return basicTypeToJS(value, dataType, convertToString);
            }
        }
        function toWithoutEval(value, dataTypeOrCallContext, callContextOrOptimizeList, optimizeList, convertToString) {
            if (dataTypeOrCallContext === void 0) { dataTypeOrCallContext = DataTypes_1.DataTypes.Record; }
            if (callContextOrOptimizeList === void 0) { callContextOrOptimizeList = false; }
            if (optimizeList === void 0) { optimizeList = false; }
            if (convertToString === void 0) { convertToString = false; }
            if (value === undefined || value === null) {
                return;
            }
            var dataType = DataTypes_1.DataTypes.Record;
            var callContext;
            if (typeof dataTypeOrCallContext !== "number") {
                optimizeList = callContextOrOptimizeList === true;
                callContext = dataTypeOrCallContext;
                dataType = DataTypes_1.DataTypes.Record;
            }
            else {
                dataType = dataTypeOrCallContext;
                if (typeof callContextOrOptimizeList !== "boolean") {
                    callContext = callContextOrOptimizeList;
                }
            }
            if (value instanceof DataTypes_1.GenericRecord) {
                var record_1 = value;
                var attributes = record_1.getAttributes();
                return attributes
                    .filter(function (attr) { return !attr.ignoreForServer; })
                    .reduce(function (acc, attr) {
                    if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                        acc[attr.name] = to(record_1[attr.attrName], callContext, attr.optimizeList && optimizeList);
                    }
                    else if (attr.dataType !== DataTypes_1.DataTypes.Object) {
                        acc[attr.name] = basicTypeToJS(record_1[attr.attrName], attr.dataType, convertToString);
                    }
                    return acc;
                }, {});
            }
            else if (value instanceof DataTypes_1.List) {
                var list = value;
                var listItemType = list.constructor.getItemType();
                var result = {
                    List: [],
                };
                if (!optimizeList || !callContext) {
                    for (var i = 0; i < list.length; i++) {
                        result.List.push(to(list.getItem(i), listItemType));
                    }
                }
                else {
                    if (list.length > 0 && callContext) {
                        var currentRow = callContext.iterationContext.getCurrentRowNumber(value);
                        result.List.push(to(list.getItem(currentRow), listItemType, callContext, optimizeList));
                    }
                }
                if (list.isEmpty) {
                    result.EmptyListItem = to(list.emptyListItem, listItemType, callContext, optimizeList);
                }
                return result;
            }
            else if (dataType !== DataTypes_1.DataTypes.Object) {
                return basicTypeToJS(value, dataType, convertToString);
            }
        }
        function from(jsObject, dataType) {
            return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                ? fromWithEval(jsObject, dataType)
                : fromWithoutEval(jsObject, dataType);
        }
        ServerDataConverter.from = from;
        function fromWithEval(jsObject, dataType) {
            if (isGenericRecordType(dataType)) {
                var recordType = dataType;
                var converter = FromMethodCache.get(recordType);
                if (!converter) {
                    var attributes = recordType.getAttributes();
                    var fromFuncCode_1 = "return function from(obj) {\n";
                    fromFuncCode_1 += "    if (!obj) { obj = {}; }\n";
                    fromFuncCode_1 += "    return new classDef(new classDef.RecordClass({\n";
                    attributes.forEach(function (attr, index) {
                        if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                            fromFuncCode_1 += "        ".concat(attr.attrName, ": GenericRecord.getData(fromServerData(obj.").concat(attr.name, ", attributes[").concat(index, "].complexType)),\n");
                        }
                        else if (attr.dataType === DataTypes_1.DataTypes.BinaryData) {
                            fromFuncCode_1 += "        ".concat(attr.attrName, ": jsToBasicType({ content: obj.").concat(attr.name, ", url: obj._").concat(attr.name, "URL }, attributes[").concat(index, "].dataType),\n");
                        }
                        else {
                            fromFuncCode_1 += "        ".concat(attr.attrName, ": jsToBasicType(obj.").concat(attr.name, ", attributes[").concat(index, "].dataType),\n");
                        }
                    });
                    fromFuncCode_1 += "    }));\n";
                    fromFuncCode_1 += "};";
                    converter = new Function("fromServerData", "jsToBasicType", "GenericRecord", "attributes", "classDef", fromFuncCode_1)(from, jsToBasicType, DataTypes_1.GenericRecord, attributes, recordType);
                    FromMethodCache.set(recordType, converter);
                }
                return converter(jsObject);
            }
            else if (isGenericRecordListType(dataType) || isBasicTypeListType(dataType)) {
                if (dataType.getItemType() === undefined || dataType.getItemType() === null) {
                    throw Error("A List can only be deserialized if its ItemType is defined.");
                }
                var constructableDataType = dataType;
                var result = new constructableDataType();
                if (jsObject.List.length === 0) {
                    result.emptyListItem = from(jsObject.EmptyListItem, dataType.getItemType());
                }
                else {
                    result.pushAll(jsObject.List.map(function (item) { return from(item, dataType.getItemType()); }));
                }
                return result;
            }
            else {
                return jsToBasicType(jsObject, dataType);
            }
        }
        function fromWithoutEval(jsObject, dataType) {
            if (isGenericRecordType(dataType)) {
                var recordType = dataType;
                var attributes = recordType.getAttributes();
                if (!jsObject) {
                    jsObject = {};
                }
                var recordData = new recordType.RecordClass(attributes.reduce(function (acc, attr) {
                    if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                        acc[attr.attrName] = DataTypes_1.GenericRecord.getData(from(jsObject[attr.name], attr.complexType));
                    }
                    else if (attr.dataType === DataTypes_1.DataTypes.BinaryData) {
                        acc[attr.attrName] = jsToBasicType({ content: jsObject[attr.name], url: jsObject["_" + attr.name + "URL"] }, attr.dataType);
                    }
                    else {
                        acc[attr.attrName] = jsToBasicType(jsObject[attr.name], attr.dataType);
                    }
                    return acc;
                }, {}));
                return new recordType(recordData);
            }
            else if (isGenericRecordListType(dataType) || isBasicTypeListType(dataType)) {
                if (dataType.getItemType() === undefined || dataType.getItemType() === null) {
                    throw Error("A List can only be deserialized if its ItemType is defined.");
                }
                var constructableDataType = dataType;
                var result = new constructableDataType();
                if (jsObject.List.length === 0) {
                    result.emptyListItem = from(jsObject.EmptyListItem, dataType.getItemType());
                }
                else {
                    result.pushAll(jsObject.List.map(function (item) { return from(item, dataType.getItemType()); }));
                }
                return result;
            }
            else {
                return jsToBasicType(jsObject, dataType);
            }
        }
        function basicTypeToJS(value, valueType, convertToString) {
            if (convertToString === void 0) { convertToString = false; }
            switch (valueType) {
                case DataTypes_1.DataTypes.Integer:
                case DataTypes_1.DataTypes.Text:
                case DataTypes_1.DataTypes.PhoneNumber:
                case DataTypes_1.DataTypes.Email:
                case DataTypes_1.DataTypes.Boolean:
                    return convertToString ? value.toString() : value;
                case DataTypes_1.DataTypes.LongInteger:
                    return BuiltinFunctions.longIntegerToText(value);
                case DataTypes_1.DataTypes.Decimal:
                case DataTypes_1.DataTypes.Currency:
                    return BuiltinFunctions.decimalToText(value);
                case DataTypes_1.DataTypes.Date:
                    return value.toISODate();
                case DataTypes_1.DataTypes.DateTime:
                    return value.toString();
                case DataTypes_1.DataTypes.Time:
                    return value.toISOTime();
                case DataTypes_1.DataTypes.Record:
                case DataTypes_1.DataTypes.RecordList:
                    throw new TypeError("Records and Record lists are not basic types");
                case DataTypes_1.DataTypes.BinaryData:
                    return typeof value === "string" ? value : value.content;
                default:
                    return value;
            }
        }
        function jsToBasicType(value, targetType) {
            switch (targetType) {
                case DataTypes_1.DataTypes.Integer:
                    DataTypes_1.TypeValidations.ensureIntegerInsideBounds(value);
                    return value | 0;
                case DataTypes_1.DataTypes.LongInteger:
                    return typeof value === "string"
                        ? DataTypes_1.LongInteger.fromString(value)
                        : DataTypes_1.LongInteger.fromNumber(value);
                case DataTypes_1.DataTypes.Decimal:
                case DataTypes_1.DataTypes.Currency:
                    return new DataTypes_1.Decimal(value || "0");
                case DataTypes_1.DataTypes.Boolean:
                    return typeof value === "string" ? BuiltinFunctions.textToBoolean(value) : value;
                case DataTypes_1.DataTypes.Text:
                case DataTypes_1.DataTypes.PhoneNumber:
                case DataTypes_1.DataTypes.Email:
                    if (value === undefined) {
                        return "";
                    }
                    return value + "";
                case DataTypes_1.DataTypes.Date:
                    if (value instanceof Date && !(0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return new DataTypes_1.DateTime(value);
                    }
                    return DataTypes_1.DateTime.fromISODate(value);
                case DataTypes_1.DataTypes.DateTime:
                    if (value instanceof Date && !(0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return new DataTypes_1.DateTime(value);
                    }
                    return DataTypes_1.DateTime.fromISODateTime(value);
                case DataTypes_1.DataTypes.Time:
                    if (value instanceof Date && !(0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return new DataTypes_1.DateTime(value);
                    }
                    return DataTypes_1.DateTime.fromISOTime(value);
                case DataTypes_1.DataTypes.Record:
                case DataTypes_1.DataTypes.RecordList:
                    throw new TypeError("Records and Record lists are not basic types");
                case DataTypes_1.DataTypes.BinaryData:
                    if (DataTypes_1.TypeValidations.hasBinaryDataInterface(value)) {
                        return new DataTypes_1.BinaryData(value.content, value.url);
                    }
                    return new DataTypes_1.BinaryData(value);
                case DataTypes_1.DataTypes.Object:
                    return value;
                default:
                    return value;
            }
        }
    })(ServerDataConverter || (exports.ServerDataConverter = ServerDataConverter = {}));
    var JSConversions;
    (function (JSConversions) {
        function isConvertibleToInteger(value) {
            if (DataTypes_1.TypeValidations.isValidJsNumber(value) &&
                value >= DataTypes_1.Constants.MIN_INTEGER_VALUE &&
                value <= DataTypes_1.Constants.MAX_INTEGER_VALUE) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                return BuiltinFunctions.longIntegerToIntegerValidate(value);
            }
            else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                return BuiltinFunctions.decimalToIntegerValidate(value);
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                return BuiltinFunctions.textToIntegerValidate(value);
            }
            else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                return true;
            }
            return false;
        }
        function isConvertibleToLongInteger(value) {
            if (DataTypes_1.TypeValidations.isValidJsNumber(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidLongInteger(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidDecimal(value)) {
                return BuiltinFunctions.decimalToLongIntegerValidate(value);
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                return BuiltinFunctions.textToLongIntegerValidate(value);
            }
            else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                return true;
            }
            return false;
        }
        function isConvertibleToDecimal(value) {
            if (DataTypes_1.TypeValidations.isValidJsNumber(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidDecimal(value) &&
                DataTypes_1.Constants.MIN_DECIMAL_VALUE.lte(value) &&
                DataTypes_1.Constants.MAX_DECIMAL_VALUE.gte(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidLongInteger(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                return BuiltinFunctions.textToDecimalValidate(value);
            }
            else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                return true;
            }
            return false;
        }
        function isConvertibleToCurrency(value) {
            return isConvertibleToDecimal(value);
        }
        function isConvertibleToText(value) {
            if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                return DataTypes_1.TypeValidations.isValidJsNumber(value);
            }
            else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                return DataTypes_1.TypeValidations.isValidLongInteger(value);
            }
            else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                return DataTypes_1.TypeValidations.isValidDecimal(value);
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isDateTime(value)) {
                return DataTypes_1.TypeValidations.isValidDateTime(value);
            }
            else if (DataTypes_1.TypeValidations.isJsDate(value)) {
                return DataTypes_1.TypeValidations.isValidJsDate(value);
            }
            return false;
        }
        function isConvertibleToPhoneNumber(value) {
            return isConvertibleToText(value);
        }
        function isConvertibleToEmail(value) {
            return isConvertibleToText(value);
        }
        function isConvertibleToBoolean(value) {
            if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                return DataTypes_1.TypeValidations.isValidJsNumber(value);
            }
            else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                return DataTypes_1.TypeValidations.isValidLongInteger(value);
            }
            else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                return DataTypes_1.TypeValidations.isValidDecimal(value);
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                return /^(true)|(false)$/gi.test(value);
            }
            else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                return true;
            }
            return false;
        }
        function isConvertibleToDate(value) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return isConvertibleToDateRevamp(value);
            }
            else {
                return isConvertibleToDateLegacy(value);
            }
        }
        function isConvertibleToDateRevamp(value) {
            var convertedDate;
            if (DataTypes_1.TypeValidations.isValidDateTime(value)) {
                convertedDate = value;
            }
            else if (DataTypes_1.TypeValidations.isValidJsDate(value)) {
                convertedDate = new DataTypes_1.DateTime(value);
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                    convertedDate = new DataTypes_1.DateTime(new Date(value));
                }
                else if (BuiltinFunctions.textToDateValidate(value)) {
                    convertedDate = BuiltinFunctions.textToDate(value);
                }
            }
            return !!convertedDate && !convertedDate.isInvalid;
        }
        function isConvertibleToDateLegacy(value) {
            if (DataTypes_1.TypeValidations.isValidDateTime(value) &&
                value.gte(DataTypes_1.Constants.MIN_DATE_VALUE) &&
                value.lte(DataTypes_1.Constants.MAX_DATE_VALUE)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidJsDate(value) &&
                new DataTypes_1.DateTime(value).gte(DataTypes_1.Constants.MIN_DATE_VALUE) &&
                new DataTypes_1.DateTime(value).lte(DataTypes_1.Constants.MAX_DATE_VALUE)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                    var date = new DataTypes_1.DateTime(new Date(value));
                    return date.gte(DataTypes_1.Constants.MIN_DATE_VALUE) && date.lte(DataTypes_1.Constants.MAX_DATE_VALUE);
                }
                else if (!BuiltinFunctions.textToDateValidate(value)) {
                    return false;
                }
                else {
                    var date = BuiltinFunctions.textToDate(value);
                    return date.gte(DataTypes_1.Constants.MIN_DATE_VALUE) && date.lte(DataTypes_1.Constants.MAX_DATE_VALUE);
                }
            }
            return false;
        }
        function isConvertibleToTime(value) {
            if (DataTypes_1.TypeValidations.isValidDateTime(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidJsDate(value)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                if (DataTypes_1.Constants.RFC3339_TIMEPART.test(value) || DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                    return true;
                }
                else {
                    return BuiltinFunctions.textToTimeValidate(value);
                }
            }
            return false;
        }
        function isConvertibleToDateTime(value) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return isConvertibleToDateTimeRevamp(value);
            }
            else {
                return isConvertibleToDateTimeLegacy(value);
            }
        }
        function isConvertibleToDateTimeRevamp(value) {
            var convertedDate;
            if (DataTypes_1.TypeValidations.isValidDateTime(value)) {
                convertedDate = value;
            }
            else if (DataTypes_1.TypeValidations.isValidJsDate(value)) {
                convertedDate = new DataTypes_1.DateTime(value);
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                    convertedDate = new DataTypes_1.DateTime(new Date(value));
                }
                else if (BuiltinFunctions.textToDateTimeValidate(value)) {
                    convertedDate = BuiltinFunctions.textToDateTime(value);
                }
            }
            return !!convertedDate && !convertedDate.isInvalid;
        }
        function isConvertibleToDateTimeLegacy(value) {
            if (DataTypes_1.TypeValidations.isValidDateTime(value) &&
                value.gte(DataTypes_1.Constants.MIN_DATETIME_VALUE) &&
                value.lte(DataTypes_1.Constants.MAX_DATETIME_VALUE)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isValidJsDate(value) &&
                new DataTypes_1.DateTime(value).gte(DataTypes_1.Constants.MIN_DATETIME_VALUE) &&
                new DataTypes_1.DateTime(value).lte(DataTypes_1.Constants.MAX_DATETIME_VALUE)) {
                return true;
            }
            else if (DataTypes_1.TypeValidations.isText(value)) {
                if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                    var dateTime = new DataTypes_1.DateTime(new Date(value));
                    return dateTime.gte(DataTypes_1.Constants.MIN_DATETIME_VALUE) && dateTime.lte(DataTypes_1.Constants.MAX_DATETIME_VALUE);
                }
                else if (!BuiltinFunctions.textToDateTimeValidate(value)) {
                    return false;
                }
                else {
                    var dateTime = BuiltinFunctions.textToDateTime(value);
                    return dateTime.gte(DataTypes_1.Constants.MIN_DATETIME_VALUE) && dateTime.lte(DataTypes_1.Constants.MAX_DATETIME_VALUE);
                }
            }
            return false;
        }
        function isConvertibleToBinaryData(value) {
            return DataTypes_1.TypeValidations.isBinaryData(value);
        }
        function isConvertibleTo(value, type) {
            switch (type) {
                case DataTypes_1.DataTypes.Integer:
                    return isConvertibleToInteger(value);
                case DataTypes_1.DataTypes.LongInteger:
                    return isConvertibleToLongInteger(value);
                case DataTypes_1.DataTypes.Decimal:
                    return isConvertibleToDecimal(value);
                case DataTypes_1.DataTypes.Currency:
                    return isConvertibleToCurrency(value);
                case DataTypes_1.DataTypes.Text:
                    return isConvertibleToText(value);
                case DataTypes_1.DataTypes.PhoneNumber:
                    return isConvertibleToPhoneNumber(value);
                case DataTypes_1.DataTypes.Email:
                    return isConvertibleToEmail(value);
                case DataTypes_1.DataTypes.Boolean:
                    return isConvertibleToBoolean(value);
                case DataTypes_1.DataTypes.Date:
                    return isConvertibleToDate(value);
                case DataTypes_1.DataTypes.Time:
                    return isConvertibleToTime(value);
                case DataTypes_1.DataTypes.DateTime:
                    return isConvertibleToDateTime(value);
                case DataTypes_1.DataTypes.BinaryData:
                    return isConvertibleToBinaryData(value);
                default:
                    return false;
            }
        }
        JSConversions.isConvertibleTo = isConvertibleTo;
        function isDefault(value) {
            return ((DataTypes_1.TypeValidations.isValidJsNumber(value) && value === DataTypes_1.Constants.DEFAULT_INTEGER) ||
                (DataTypes_1.TypeValidations.isValidLongInteger(value) &&
                    value.equals(DataTypes_1.Constants.DEFAULT_LONGINTEGER)) ||
                (DataTypes_1.TypeValidations.isValidDecimal(value) && value.equals(DataTypes_1.Constants.DEFAULT_DECIMAL)) ||
                (DataTypes_1.TypeValidations.isText(value) && value === DataTypes_1.Constants.DEFAULT_TEXT) ||
                (DataTypes_1.TypeValidations.isBoolean(value) && value === DataTypes_1.Constants.DEFAULT_BOOLEAN) ||
                (DataTypes_1.TypeValidations.isValidDateTime(value) && value.equals(DataTypes_1.Constants.DEFAULT_DATETIME)));
        }
        JSConversions.isDefault = isDefault;
        function convertToInteger(value) {
            if (isConvertibleToInteger(value)) {
                if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                    return BuiltinFunctions.objectToInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                    return BuiltinFunctions.objectToInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                    return BuiltinFunctions.objectToInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    return BuiltinFunctions.textToInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                    return BuiltinFunctions.booleanToInteger(value);
                }
            }
            return DataTypes_1.Constants.DEFAULT_INTEGER;
        }
        function convertToLongInteger(value) {
            if (isConvertibleToLongInteger(value)) {
                if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                    return BuiltinFunctions.objectToLongInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                    return BuiltinFunctions.objectToLongInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                    return BuiltinFunctions.objectToLongInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    return BuiltinFunctions.textToLongInteger(value);
                }
                else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                    return BuiltinFunctions.booleanToLongInteger(value);
                }
            }
            return DataTypes_1.Constants.DEFAULT_LONGINTEGER;
        }
        function convertToDecimal(value) {
            if (isConvertibleToDecimal(value)) {
                if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                    return BuiltinFunctions.objectToDecimal(value);
                }
                else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                    return BuiltinFunctions.objectToDecimal(value);
                }
                else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                    return BuiltinFunctions.objectToDecimal(value);
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    return BuiltinFunctions.textToDecimal(value);
                }
                else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                    return BuiltinFunctions.booleanToDecimal(value);
                }
            }
            return DataTypes_1.Constants.DEFAULT_DECIMAL;
        }
        function convertToCurrency(value) {
            return convertToDecimal(value);
        }
        function convertToText(value) {
            if (isConvertibleToText(value)) {
                if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                    if (DataTypes_1.TypeValidations.isValidInteger(value)) {
                        return BuiltinFunctions.integerToText(value);
                    }
                    else {
                        return BuiltinFunctions.decimalToText(new DataTypes_1.Decimal(value));
                    }
                }
                else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                    return BuiltinFunctions.longIntegerToText(value);
                }
                else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                    return BuiltinFunctions.decimalToText(value);
                }
                else if (DataTypes_1.TypeValidations.isText(value)) {
                    return value;
                }
                else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                    return BuiltinFunctions.booleanToText(value);
                }
                else if (DataTypes_1.TypeValidations.isValidDate(value)) {
                    return BuiltinFunctions.dateToText(value);
                }
                else if (DataTypes_1.TypeValidations.isValidTime(value)) {
                    return BuiltinFunctions.timeToText(value);
                }
                else if (DataTypes_1.TypeValidations.isDateTime(value)) {
                    return BuiltinFunctions.dateTimeToText(value);
                }
                else if (DataTypes_1.TypeValidations.isJsDate(value)) {
                    var dateTime = new DataTypes_1.DateTime(value);
                    if (DataTypes_1.TypeValidations.isValidDate(dateTime)) {
                        return BuiltinFunctions.dateToText(dateTime);
                    }
                    else if (DataTypes_1.TypeValidations.isValidTime(dateTime)) {
                        return BuiltinFunctions.timeToText(dateTime);
                    }
                    else {
                        return BuiltinFunctions.dateTimeToText(dateTime);
                    }
                }
            }
            return DataTypes_1.Constants.DEFAULT_TEXT;
        }
        function convertToPhoneNumber(value) {
            return convertToText(value);
        }
        function convertToEmail(value) {
            if (isConvertibleToEmail(value)) {
                if (DataTypes_1.TypeValidations.isText(value)) {
                    return value;
                }
            }
            return DataTypes_1.Constants.DEFAULT_EMAIL;
        }
        function convertToBoolean(value) {
            if (isConvertibleToBoolean(value)) {
                if (DataTypes_1.TypeValidations.isJsNumber(value)) {
                    return value !== 0;
                }
                else if (DataTypes_1.TypeValidations.isLongInteger(value)) {
                    return !value.eq(0);
                }
                else if (DataTypes_1.TypeValidations.isDecimal(value)) {
                    return !value.eq(0);
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    return !/^(false)$/gi.test(value);
                }
                else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                    return value;
                }
            }
            return DataTypes_1.Constants.DEFAULT_BOOLEAN;
        }
        function convertToDate(value) {
            if (isConvertibleToDate(value)) {
                if (DataTypes_1.TypeValidations.isDateTime(value)) {
                    var dateTime = value;
                    return new DataTypes_1.DateTime(dateTime.year, dateTime.month, dateTime.day);
                }
                else if (DataTypes_1.TypeValidations.isJsDate(value)) {
                    var date = value;
                    return new DataTypes_1.DateTime(date.getFullYear(), date.getMonth() + 1, date.getDate());
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    if (DataTypes_1.Constants.RFC3339_DATEPART.test(value)) {
                        return DataTypes_1.DateTime.fromISODate(value);
                    }
                    else if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                        return BuiltinFunctions.dateTimeToDate(DataTypes_1.DateTime.fromISODateTime(value));
                    }
                    else {
                        return BuiltinFunctions.textToDate(value);
                    }
                }
            }
            return DataTypes_1.Constants.DEFAULT_DATE;
        }
        function convertToTime(value) {
            if (isConvertibleToTime(value)) {
                if (DataTypes_1.TypeValidations.isDateTime(value)) {
                    var dateTime = value;
                    return new DataTypes_1.DateTime(null, null, null, dateTime.hours, dateTime.minutes, dateTime.seconds, dateTime.milliseconds);
                }
                else if (DataTypes_1.TypeValidations.isJsDate(value)) {
                    var date = value;
                    return new DataTypes_1.DateTime(null, null, null, date.getHours(), date.getMinutes(), date.getSeconds());
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    if (DataTypes_1.Constants.RFC3339_TIMEPART.test(value)) {
                        return DataTypes_1.DateTime.fromISOTime(value);
                    }
                    else if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                        return BuiltinFunctions.dateTimeToTime(DataTypes_1.DateTime.fromISODateTime(value));
                    }
                    else {
                        return BuiltinFunctions.textToTime(value);
                    }
                }
            }
            return DataTypes_1.Constants.DEFAULT_TIME;
        }
        function convertToDateTime(value) {
            if (isConvertibleToDateTime(value)) {
                if (DataTypes_1.TypeValidations.isDateTime(value)) {
                    var dateTime = value;
                    return new DataTypes_1.DateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hours, dateTime.minutes, dateTime.seconds, dateTime.milliseconds);
                }
                else if (DataTypes_1.TypeValidations.isJsDate(value)) {
                    var date = value;
                    return new DataTypes_1.DateTime(date);
                }
                else if (DataTypes_1.TypeValidations.isText(value) && value !== "") {
                    if (DataTypes_1.Constants.ISO_DATE_FORMAT_REGEXP.test(value)) {
                        return DataTypes_1.DateTime.fromISODateTime(value);
                    }
                    else {
                        return BuiltinFunctions.textToDateTime(value);
                    }
                }
            }
            return DataTypes_1.Constants.DEFAULT_DATETIME;
        }
        function convertToBinaryData(value) {
            return value;
        }
        function convertTo(value, type) {
            switch (type) {
                case DataTypes_1.DataTypes.Integer:
                    return convertToInteger(value);
                case DataTypes_1.DataTypes.LongInteger:
                    return convertToLongInteger(value);
                case DataTypes_1.DataTypes.Decimal:
                    return convertToDecimal(value);
                case DataTypes_1.DataTypes.Currency:
                    return convertToCurrency(value);
                case DataTypes_1.DataTypes.Text:
                    return convertToText(value);
                case DataTypes_1.DataTypes.PhoneNumber:
                    return convertToPhoneNumber(value);
                case DataTypes_1.DataTypes.Email:
                    return convertToEmail(value);
                case DataTypes_1.DataTypes.Boolean:
                    return convertToBoolean(value);
                case DataTypes_1.DataTypes.Date:
                    return convertToDate(value);
                case DataTypes_1.DataTypes.Time:
                    return convertToTime(value);
                case DataTypes_1.DataTypes.DateTime:
                    return convertToDateTime(value);
                case DataTypes_1.DataTypes.BinaryData:
                    return convertToBinaryData(value);
                default:
                    return null;
            }
        }
        JSConversions.convertTo = convertTo;
        function typeConvertRecord(source, target, convFunction) {
            return convFunction(source, target);
        }
        JSConversions.typeConvertRecord = typeConvertRecord;
        function typeConvertRecordList(source, target, convFunction) {
            var entityListIndex = 0;
            while (entityListIndex < source.length) {
                target.append(convFunction(source.getItem(entityListIndex), target.newItem()));
                entityListIndex++;
            }
            return target;
        }
        JSConversions.typeConvertRecordList = typeConvertRecordList;
    })(JSConversions || (exports.JSConversions = JSConversions = {}));
    var JSNodeParamConverter;
    (function (JSNodeParamConverter) {
        function trunc(value) {
            return value - (value % 1);
        }
        function to(value, dataType) {
            return basicTypetoJSNodeParam(value, dataType);
        }
        JSNodeParamConverter.to = to;
        function from(value, dataType) {
            return jsNodeParamToBasicType(value, dataType);
        }
        JSNodeParamConverter.from = from;
        function basicTypetoJSNodeParam(value, valueType) {
            switch (valueType) {
                case DataTypes_1.DataTypes.Integer:
                    return value;
                case DataTypes_1.DataTypes.LongInteger:
                    var longVal = value;
                    DataTypes_1.TypeValidations.ensureNumberInsideBounds(longVal);
                    return longVal.toNumber();
                case DataTypes_1.DataTypes.Decimal:
                case DataTypes_1.DataTypes.Currency:
                    var decVal = value;
                    DataTypes_1.TypeValidations.ensureNumberPrecision(decVal);
                    DataTypes_1.TypeValidations.ensureNumberInsideBounds(decVal);
                    return decVal.toNumber();
                case DataTypes_1.DataTypes.Text:
                case DataTypes_1.DataTypes.PhoneNumber:
                case DataTypes_1.DataTypes.Email:
                    return value;
                case DataTypes_1.DataTypes.Date:
                case DataTypes_1.DataTypes.DateTime:
                case DataTypes_1.DataTypes.Time:
                    var dateVal = value;
                    return dateVal.toNative();
                case DataTypes_1.DataTypes.Boolean:
                    return value;
                case DataTypes_1.DataTypes.Record:
                case DataTypes_1.DataTypes.RecordList:
                    throw new TypeError("Records and Record lists are not basic types");
                case DataTypes_1.DataTypes.BinaryData:
                    var binValue = value;
                    return typeof value === "string" ? value : binValue.content;
                case DataTypes_1.DataTypes.Object:
                    return value;
                default:
                    return value;
            }
        }
        function jsNodeParamToBasicType(value, targetType) {
            switch (targetType) {
                case DataTypes_1.DataTypes.Integer:
                    if (DataTypes_1.TypeValidations.isValidJsNumber(value)) {
                        DataTypes_1.TypeValidations.ensureIntegerInsideBounds(value);
                        return trunc(value);
                    }
                    break;
                case DataTypes_1.DataTypes.LongInteger:
                    if (DataTypes_1.TypeValidations.isValidJsNumber(value)) {
                        DataTypes_1.TypeValidations.ensureLongIntegerInsideBounds(value);
                        return DataTypes_1.LongInteger.fromNumber(trunc(value));
                    }
                    break;
                case DataTypes_1.DataTypes.Decimal:
                case DataTypes_1.DataTypes.Currency:
                    if (DataTypes_1.TypeValidations.isValidJsNumber(value)) {
                        DataTypes_1.TypeValidations.ensureDecimalInsideBounds(value);
                        return new DataTypes_1.Decimal(value);
                    }
                    break;
                case DataTypes_1.DataTypes.Boolean:
                    if (DataTypes_1.TypeValidations.isBoolean(value)) {
                        return value;
                    }
                    break;
                case DataTypes_1.DataTypes.Text:
                case DataTypes_1.DataTypes.PhoneNumber:
                case DataTypes_1.DataTypes.Email:
                    if (DataTypes_1.TypeValidations.isText(value)) {
                        return value;
                    }
                    else if (DataTypes_1.TypeValidations.isValidJsNumber(value)) {
                        DataTypes_1.TypeValidations.ensureDecimalInsideBounds(value);
                        return BuiltinFunctions.decimalToText(new DataTypes_1.Decimal(value));
                    }
                    else if (DataTypes_1.TypeValidations.isBoolean(value)) {
                        return BuiltinFunctions.booleanToText(value);
                    }
                    break;
                case DataTypes_1.DataTypes.Date:
                    if (DataTypes_1.TypeValidations.isValidJsDate(value)) {
                        var jsDate = value;
                        return new DataTypes_1.DateTime(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());
                    }
                    break;
                case DataTypes_1.DataTypes.DateTime:
                    if (DataTypes_1.TypeValidations.isValidJsDate(value)) {
                        return new DataTypes_1.DateTime(value);
                    }
                    break;
                case DataTypes_1.DataTypes.Time:
                    if (DataTypes_1.TypeValidations.isValidJsDate(value)) {
                        var jsDate = value;
                        return new DataTypes_1.DateTime(null, null, null, jsDate.getHours(), jsDate.getMinutes(), jsDate.getSeconds(), jsDate.getMilliseconds());
                    }
                    break;
                case DataTypes_1.DataTypes.BinaryData:
                    if (DataTypes_1.TypeValidations.hasBinaryDataInterface(value)) {
                        return new DataTypes_1.BinaryData(value.content, value.url);
                    }
                    return new DataTypes_1.BinaryData(value);
                case DataTypes_1.DataTypes.Object:
                    return value;
                default:
                    break;
            }
            throw new Exceptions_1.Exceptions.InvalidJavascriptType("Cannot assign a JavaScript ".concat(typeof value, " with value ").concat(value === undefined || value === null ? JSON.stringify(value) : value.toString(), " to an output parameter of type ").concat(DataTypes_1.DataTypes[targetType]));
        }
    })(JSNodeParamConverter || (exports.JSNodeParamConverter = JSNodeParamConverter = {}));
    var JSONConverter;
    (function (JSONConverter) {
        var ToMethodCache = new Map();
        var FromMethodCache = new Map();
        function to(value, serializeDefaultValues, useUnixDateFormat, dataType, defaultValue) {
            if (dataType === void 0) { dataType = DataTypes_1.DataTypes.Record; }
            return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                ? toWithEval(value, serializeDefaultValues, useUnixDateFormat, dataType, defaultValue)
                : toWithoutEval(value, serializeDefaultValues, useUnixDateFormat, dataType, defaultValue);
        }
        JSONConverter.to = to;
        function toWithEval(value, serializeDefaultValues, useUnixDateFormat, dataType, defaultValue) {
            if (dataType === void 0) { dataType = DataTypes_1.DataTypes.Record; }
            if (value === undefined || value === null) {
                return;
            }
            if (value instanceof DataTypes_1.GenericRecord) {
                var record = value;
                var recordType = record.constructor;
                var converter = ToMethodCache.get(recordType);
                if (!converter) {
                    var attributes = record.getAttributes();
                    var toFuncCode_2 = "return function to(record, serializeDefaultValues, useUnixDateFormat) {\n";
                    toFuncCode_2 += "     if (serializeDefaultValues === void 0) { serializeDefaultValues = true; }\n";
                    toFuncCode_2 += "     return {\n";
                    attributes.forEach(function (attr, index) {
                        if (attr.nameForJson !== "") {
                            if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                                toFuncCode_2 += "        \"".concat(attr.nameForJson, "\": toJSON(record.").concat(attr.attrName, ", serializeDefaultValues, useUnixDateFormat),\n");
                            }
                            else {
                                toFuncCode_2 += "        \"".concat(attr.nameForJson, "\": basicTypeToJSON(record.").concat(attr.attrName, ", attributes[").concat(index, "].dataType, attributes[").concat(index, "].defaultValue, ").concat(attr.mandatory ? "true" : "serializeDefaultValues", ", useUnixDateFormat),\n");
                            }
                        }
                    });
                    toFuncCode_2 += "    };\n";
                    toFuncCode_2 += "};";
                    converter = new Function("toJSON", "basicTypeToJSON", "attributes", toFuncCode_2)(to, basicTypeToJSON, attributes);
                    ToMethodCache.set(recordType, converter);
                }
                return converter(value, serializeDefaultValues, useUnixDateFormat);
            }
            else if (value instanceof DataTypes_1.List) {
                var list = value;
                var listItemType = list.constructor.getItemType();
                var result = [];
                for (var i = 0; i < list.length; i++) {
                    result.push(to(list.getItem(i), serializeDefaultValues, useUnixDateFormat, listItemType));
                }
                return result;
            }
            else {
                return basicTypeToJSON(value, dataType, defaultValue === undefined ? (0, DataTypes_1.defaultForType)(dataType) : defaultValue, serializeDefaultValues, useUnixDateFormat);
            }
        }
        function toWithoutEval(value, serializeDefaultValues, useUnixDateFormat, dataType, defaultValue) {
            if (dataType === void 0) { dataType = DataTypes_1.DataTypes.Record; }
            if (value === undefined || value === null) {
                return;
            }
            if (value instanceof DataTypes_1.GenericRecord) {
                var record_2 = value;
                var attributes = record_2.getAttributes();
                if (serializeDefaultValues === undefined) {
                    serializeDefaultValues = true;
                }
                return attributes
                    .filter(function (attr) { return attr.nameForJson !== ""; })
                    .reduce(function (acc, attr) {
                    if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                        acc[attr.nameForJson] = to(record_2[attr.attrName], serializeDefaultValues, useUnixDateFormat);
                    }
                    else {
                        acc[attr.nameForJson] = basicTypeToJSON(record_2[attr.attrName], attr.dataType, attr.defaultValue, attr.mandatory || serializeDefaultValues, useUnixDateFormat);
                    }
                    return acc;
                }, {});
            }
            else if (value instanceof DataTypes_1.List) {
                var list = value;
                var listItemType = list.constructor.getItemType();
                var result = [];
                for (var i = 0; i < list.length; i++) {
                    result.push(to(list.getItem(i), serializeDefaultValues, useUnixDateFormat, listItemType));
                }
                return result;
            }
            else {
                return basicTypeToJSON(value, dataType, defaultValue === undefined ? (0, DataTypes_1.defaultForType)(dataType) : defaultValue, serializeDefaultValues, useUnixDateFormat);
            }
        }
        function from(jsObject, dataType, useUnixDateFormat, defaultValue) {
            return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                ? fromWithEval(jsObject, dataType, useUnixDateFormat, defaultValue)
                : fromWithoutEval(jsObject, dataType, useUnixDateFormat, defaultValue);
        }
        JSONConverter.from = from;
        function fromWithEval(jsObject, dataType, useUnixDateFormat, defaultValue) {
            if (isGenericRecordType(dataType)) {
                var recordType = dataType;
                var converter = FromMethodCache.get(recordType);
                if (!converter) {
                    var attributes = recordType.getAttributes();
                    var fromFuncCode_2 = "return function from(obj, useUnixDateFormat) {\n";
                    fromFuncCode_2 += "     if (!obj) { obj = {}; }\n";
                    fromFuncCode_2 += "     return new classDef(new classDef.RecordClass({\n";
                    attributes.forEach(function (attr, index) {
                        if (attr.nameForJson !== "") {
                            if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                                fromFuncCode_2 += "        ".concat(attr.attrName, ": GenericRecord.getData(fromJSON(obj[\"").concat(attr.nameForJson, "\"], attributes[").concat(index, "].complexType, useUnixDateFormat)),\n");
                            }
                            else {
                                fromFuncCode_2 += "        ".concat(attr.attrName, ": jsonToBasicType(obj[\"").concat(attr.nameForJson, "\"], attributes[").concat(index, "].dataType, attributes[").concat(index, "].defaultValue, useUnixDateFormat),\n");
                            }
                        }
                    });
                    fromFuncCode_2 += "    }));\n";
                    fromFuncCode_2 += "};";
                    converter = new Function("fromJSON", "jsonToBasicType", "GenericRecord", "attributes", "classDef", fromFuncCode_2)(from, jsonToBasicType, DataTypes_1.GenericRecord, attributes, dataType);
                    FromMethodCache.set(recordType, converter);
                }
                return converter(jsObject, useUnixDateFormat);
            }
            else if (isGenericRecordListType(dataType) || isBasicTypeListType(dataType)) {
                if (dataType.getItemType() === undefined || dataType.getItemType() === null) {
                    throw Error("A List can only be deserialized if its ItemType is defined.");
                }
                var list = jsObject;
                if (list === null || list === undefined) {
                    list = [];
                }
                if (!(list.constructor === Array)) {
                    throw new TypeError("Could not convert '" + list + "' to List");
                }
                var constructableDataType = dataType;
                var result = new constructableDataType();
                result.pushAll(list.map(function (item) { return from(item, dataType.getItemType(), useUnixDateFormat); }));
                return result;
            }
            else {
                return jsonToBasicType(jsObject, dataType, defaultValue === undefined ? (0, DataTypes_1.defaultForType)(dataType) : defaultValue, useUnixDateFormat);
            }
        }
        function fromWithoutEval(jsObject, dataType, useUnixDateFormat, defaultValue) {
            if (isGenericRecordType(dataType)) {
                var recordType = dataType;
                var attributes = recordType.getAttributes();
                if (!jsObject) {
                    jsObject = {};
                }
                return new dataType(new dataType.RecordClass(attributes
                    .filter(function (attr) { return attr.nameForJson !== ""; })
                    .reduce(function (acc, attr) {
                    if (attr.dataType === DataTypes_1.DataTypes.Record || attr.dataType === DataTypes_1.DataTypes.RecordList) {
                        acc[attr.attrName] = DataTypes_1.GenericRecord.getData(from(jsObject[attr.nameForJson], attr.complexType, useUnixDateFormat));
                    }
                    else {
                        acc[attr.attrName] = jsonToBasicType(jsObject[attr.nameForJson], attr.dataType, attr.defaultValue, useUnixDateFormat);
                    }
                    return acc;
                }, {})));
            }
            else if (isGenericRecordListType(dataType) || isBasicTypeListType(dataType)) {
                if (dataType.getItemType() === undefined || dataType.getItemType() === null) {
                    throw Error("A List can only be deserialized if its ItemType is defined.");
                }
                var list = jsObject;
                if (list === null || list === undefined) {
                    list = [];
                }
                if (!(list.constructor === Array)) {
                    throw new TypeError("Could not convert '" + list + "' to List");
                }
                var constructableDataType = dataType;
                var result = new constructableDataType();
                result.pushAll(list.map(function (item) { return from(item, dataType.getItemType(), useUnixDateFormat); }));
                return result;
            }
            else {
                return jsonToBasicType(jsObject, dataType, defaultValue === undefined ? (0, DataTypes_1.defaultForType)(dataType) : defaultValue, useUnixDateFormat);
            }
        }
        function basicTypeToJSON(value, valueType, defaultValue, serializeDefaultValues, useUnixDateFormat) {
            if (serializeDefaultValues === void 0) { serializeDefaultValues = true; }
            if (serializeDefaultValues === false && (0, DataTypes_1.equals)(value, defaultValue)) {
                return null;
            }
            switch (valueType) {
                case DataTypes_1.DataTypes.Time:
                    return value.toISOTime();
                case DataTypes_1.DataTypes.Date:
                    return value.toISODate();
                case DataTypes_1.DataTypes.DateTime:
                    if (useUnixDateFormat === true) {
                        return "" + Math.floor(value.getTime() / 1000);
                    }
                    return value.toString().replace(/\.\d+/, "");
                default:
                    return JSNodeParamConverter.to(value, valueType);
            }
        }
        function jsonToBasicType(value, targetType, defaultValue, useUnixDateFormat) {
            if (value === undefined || value === null) {
                return defaultValue;
            }
            switch (targetType) {
                case DataTypes_1.DataTypes.Integer:
                    return jsonToInteger(value);
                case DataTypes_1.DataTypes.LongInteger:
                    return jsonToLongInteger(value);
                case DataTypes_1.DataTypes.Currency:
                case DataTypes_1.DataTypes.Decimal:
                    return jsonToDecimal(value);
                case DataTypes_1.DataTypes.DateTime:
                    return jsonToDateTime(value, useUnixDateFormat);
                default:
                    return ServerDataConverter.from(value, targetType);
            }
        }
        function jsonToInteger(value) {
            var decValue;
            if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForInteger().test(value)) {
                decValue = new DataTypes_1.Decimal(value);
            }
            else if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForJSNumber().test(value)) {
                decValue = new DataTypes_1.Decimal(+value);
            }
            if (decValue === undefined || !decValue.isInteger() || !BuiltinFunctions.decimalToIntegerValidate(decValue)) {
                throw new Exceptions_1.Exceptions.Exception("Could not convert '" + value + "' to Integer");
            }
            return BuiltinFunctions.decimalToInteger(decValue);
        }
        function jsonToLongInteger(value) {
            var decValue;
            if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForInteger().test(value)) {
                decValue = new DataTypes_1.Decimal(value);
            }
            else if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForJSNumber().test(value)) {
                decValue = new DataTypes_1.Decimal(+value);
            }
            if (decValue === undefined ||
                !decValue.isInteger() ||
                !BuiltinFunctions.decimalToLongIntegerValidate(decValue)) {
                throw new Exceptions_1.Exceptions.Exception("Could not convert '" + value + "' to Long Integer");
            }
            return BuiltinFunctions.decimalToLongInteger(decValue);
        }
        function jsonToDecimal(value) {
            var decValue;
            if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForInteger().test(value)) {
                decValue = new DataTypes_1.Decimal(value);
            }
            else if (DataTypes_1.Constants.FORMAT.numberFormat.getRegExpForJSNumber().test(value)) {
                decValue = new DataTypes_1.Decimal(+value);
            }
            if (decValue === undefined ||
                decValue.lt(DataTypes_1.Constants.MIN_DECIMAL_VALUE) ||
                decValue.gt(DataTypes_1.Constants.MAX_DECIMAL_VALUE)) {
                throw new Exceptions_1.Exceptions.Exception("Could not convert '" + value + "' to Decimal");
            }
            return decValue;
        }
        function jsonToDateTime(value, useUnixDateFormat) {
            if (useUnixDateFormat) {
                if (value instanceof Date) {
                    value = new DataTypes_1.DateTime(value.getTime());
                }
                try {
                    return new DataTypes_1.DateTime(+value * 1000);
                }
                catch (e) {
                    throw new Exceptions_1.Exceptions.Exception("Could not convert '" + value + "' to DateTime");
                }
            }
            else {
                if (!JSConversions.isConvertibleTo(value, DataTypes_1.DataTypes.DateTime)) {
                    throw new Exceptions_1.Exceptions.Exception("Could not convert '" + value + "' to DateTime");
                }
                return ServerDataConverter.from(value, DataTypes_1.DataTypes.DateTime);
            }
        }
    })(JSONConverter || (exports.JSONConverter = JSONConverter = {}));
    var NewJSONConverter;
    (function (NewJSONConverter) {
        function serializeBasicType(value, valueType, defaultValue, serializeDefaultValues, useUnixDateFormat, enforceDefaultValueSerializationAtThisLevel) {
            if (serializeDefaultValues === void 0) { serializeDefaultValues = true; }
            if (enforceDefaultValueSerializationAtThisLevel === void 0) { enforceDefaultValueSerializationAtThisLevel = false; }
            if (serializeDefaultValues === false &&
                !enforceDefaultValueSerializationAtThisLevel &&
                (0, DataTypes_1.equals)(value, defaultValue)) {
                return;
            }
            switch (valueType) {
                case DataTypes_1.DataTypes.Time:
                    return value.toISOTime();
                case DataTypes_1.DataTypes.Date:
                    return value.toISODate();
                case DataTypes_1.DataTypes.DateTime:
                    if (useUnixDateFormat === true) {
                        return "" + Math.floor(value.getTime() / 1000);
                    }
                    return value.toString().replace(/\.\d+/, "");
                case DataTypes_1.DataTypes.LongInteger:
                    var longVal = value;
                    DataTypes_1.TypeValidations.ensureNumberInsideBounds(longVal);
                    return longVal.toNumber();
                case DataTypes_1.DataTypes.Decimal:
                case DataTypes_1.DataTypes.Currency:
                    var decVal = value;
                    DataTypes_1.TypeValidations.ensureNumberPrecision(decVal);
                    DataTypes_1.TypeValidations.ensureNumberInsideBounds(decVal);
                    return decVal.toNumber();
                case DataTypes_1.DataTypes.Record:
                case DataTypes_1.DataTypes.RecordList:
                    throw new TypeError("Records and Record lists are not basic types");
                case DataTypes_1.DataTypes.BinaryData:
                    var binValue = value;
                    return typeof value === "string" ? value : binValue.content;
                default:
                    return value;
            }
        }
        function to(_a) {
            var value = _a.value, serializeDefaultValues = _a.serializeDefaultValues, useUnixDateFormat = _a.useUnixDateFormat, _b = _a.dataType, dataType = _b === void 0 ? DataTypes_1.DataTypes.Record : _b, defaultValue = _a.defaultValue, _c = _a.enforceDefaultValueSerializationAtThisLevel, enforceDefaultValueSerializationAtThisLevel = _c === void 0 ? false : _c;
            if (value === undefined || value === null) {
                return;
            }
            if (value instanceof DataTypes_1.GenericRecord) {
                return serializeRecord(value, serializeDefaultValues, useUnixDateFormat, enforceDefaultValueSerializationAtThisLevel);
            }
            else if (value instanceof DataTypes_1.List) {
                return serializeList(value, serializeDefaultValues, useUnixDateFormat, enforceDefaultValueSerializationAtThisLevel);
            }
            else {
                return serializeBasicType(value, dataType, defaultValue === undefined ? (0, DataTypes_1.defaultForType)(dataType) : defaultValue, serializeDefaultValues, useUnixDateFormat, enforceDefaultValueSerializationAtThisLevel);
            }
        }
        NewJSONConverter.to = to;
        function serializeRecord(value, serializeDefaultValues, useUnixDateFormat, enforceDefaultValueSerializationAtThisLevel) {
            if (enforceDefaultValueSerializationAtThisLevel === void 0) { enforceDefaultValueSerializationAtThisLevel = false; }
            var recordObject = value.getAttributes().reduce(function (agg, element) {
                if (element.dataType === DataTypes_1.DataTypes.Record || element.dataType === DataTypes_1.DataTypes.RecordList) {
                    var record = to({
                        value: value[element.attrName],
                        serializeDefaultValues: serializeDefaultValues,
                        useUnixDateFormat: useUnixDateFormat,
                    });
                    if (record) {
                        agg[element.nameForJson] = record;
                    }
                }
                else {
                    var basicType = serializeBasicType(value[element.attrName], element.dataType, element.defaultValue, serializeDefaultValues, useUnixDateFormat);
                    if (basicType !== undefined) {
                        agg[element.nameForJson] = basicType;
                    }
                }
                return agg;
            }, {});
            if (Object.keys(recordObject).length !== 0 || enforceDefaultValueSerializationAtThisLevel) {
                return recordObject;
            }
        }
        function serializeList(value, serializeDefaultValues, useUnixDateFormat, enforceDefaultValueSerializationAtThisLevel) {
            if (enforceDefaultValueSerializationAtThisLevel === void 0) { enforceDefaultValueSerializationAtThisLevel = false; }
            var jsonElement = [];
            var listItemType = value.constructor.getItemType();
            for (var i = 0; i < value.length; i++) {
                jsonElement.push(to({
                    value: value.getItem(i),
                    serializeDefaultValues: serializeDefaultValues,
                    useUnixDateFormat: useUnixDateFormat,
                    dataType: listItemType,
                    enforceDefaultValueSerializationAtThisLevel: true,
                }));
            }
            if (jsonElement.length > 0 || serializeDefaultValues || enforceDefaultValueSerializationAtThisLevel) {
                return jsonElement;
            }
        }
    })(NewJSONConverter || (exports.NewJSONConverter = NewJSONConverter = {}));
    var LocalStorageConverter;
    (function (LocalStorageConverter) {
        LocalStorageConverter.typeDefaultValue = DatabaseTypeUtils_1.typeDefaultValue;
        LocalStorageConverter.convertToModelDataType = DatabaseTypeUtils_1.convertToModelDataType;
        LocalStorageConverter.typeDisplayName = DatabaseTypeUtils_1.typeDisplayName;
        var NULLDATE_IN_DB = "1900-01-01 00:00:00";
        var FromMethodCache = new Map();
        function from(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder) {
            return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                ? fromWithEval(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder)
                : fromWithoutEval(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder);
        }
        LocalStorageConverter.from = from;
        function fromWithEval(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder) {
            if (isGenericRecordType(dataType)) {
                var row = rowOrRowList;
                var recordType = dataType;
                var indexRef = indexRefOrRowReader;
                var converter = FromMethodCache.get(recordType);
                if (!converter) {
                    var attributes = recordType.getAttributes();
                    var fromFuncCode_3 = "return function from(row, indexRef, readerImplementation, attributeOrder) {\n";
                    fromFuncCode_3 += "     var data = null;\n";
                    fromFuncCode_3 += "     if (attributeOrder && attributeOrder.length > 0) {\n";
                    fromFuncCode_3 += "         data = {\n";
                    attributes.forEach(function (attr, index) {
                        if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                            fromFuncCode_3 += "             ".concat(attr.attrName, ": null,\n");
                        }
                    });
                    fromFuncCode_3 += "         };\n";
                    fromFuncCode_3 += "         for (var i = 0; i < attributeOrder.length; i++) {\n";
                    fromFuncCode_3 += "             var attrName = attributeOrder[i];\n";
                    fromFuncCode_3 +=
                        "             var attr = attributes.filter(function(attr) { return attr.attrName === attrName; })[0];\n";
                    fromFuncCode_3 += "             if (attr.complexType) {\n";
                    fromFuncCode_3 += "                 data[attrName] = fromLocalStorage(row, attr.complexType, indexRef);\n";
                    fromFuncCode_3 += "             } else {\n";
                    fromFuncCode_3 += "                 data[attrName] = readerImplementation(row, indexRef.value++, attr.name, attr.dataType);\n";
                    fromFuncCode_3 += "             }\n";
                    fromFuncCode_3 += "         }\n";
                    fromFuncCode_3 += "     } else {\n";
                    fromFuncCode_3 += "         data = {\n";
                    attributes.forEach(function (attr, index) {
                        if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                            if (attr.dataType === DataTypes_1.DataTypes.Record && dataType.isAnonymousRecord()) {
                                fromFuncCode_3 += "            ".concat(attr.attrName, ": fromLocalStorage(row, attributes[").concat(index, "].complexType, indexRef),\n");
                            }
                            else {
                                fromFuncCode_3 += "            ".concat(attr.attrName, ": readerImplementation(row, indexRef.value++, attributes[").concat(index, "].name, attributes[").concat(index, "].dataType),\n");
                            }
                        }
                    });
                    fromFuncCode_3 += "        };\n";
                    fromFuncCode_3 += "     }\n";
                    fromFuncCode_3 += "     return new classDef.RecordClass(data);\n";
                    fromFuncCode_3 += "};";
                    converter = new Function("fromLocalStorage", "GenericRecord", "attributes", "classDef", fromFuncCode_3)(from, DataTypes_1.GenericRecord, attributes, dataType);
                    FromMethodCache.set(recordType, converter);
                }
                return converter(row, indexRef, getAttributeReaderImplementation(dataType), attributeOrder);
            }
            else if (isGenericRecordListType(dataType)) {
                if (dataType.getItemType() === undefined || dataType.getItemType() === null) {
                    throw Error("A List can only be deserialized if its ItemType is defined.");
                }
                var rowList = rowOrRowList;
                var itemType = dataType.getItemType();
                var rowReader = indexRefOrRowReader;
                var constructableDataType = dataType;
                var result = new constructableDataType();
                var items = [];
                for (var i = 0; i < rowList.length; i++) {
                    items.push(new itemType(rowReader(null, rowList.item(i))));
                }
                result.pushAll(items);
                return result;
            }
            else {
                var type = dataType;
                throw new Error("Unable to read data from Local Storage. Unknown type ".concat(type && type.name ? type.name : type));
            }
        }
        function fromWithoutEval(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder) {
            if (isGenericRecordType(dataType)) {
                var row_1 = rowOrRowList;
                var recordType = dataType;
                var indexRef_1 = indexRefOrRowReader;
                var attributes_1 = recordType.getAttributes();
                var attributeReaderImplementation_1 = getAttributeReaderImplementation(dataType);
                var data_1 = {};
                if (attributeOrder && attributeOrder.length > 0) {
                    attributes_1.forEach(function (attr, index) {
                        if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                            data_1[attr.attrName] = null;
                        }
                    });
                    attributeOrder.forEach(function (attrName, index) {
                        var attr = attributes_1.filter(function (attr) { return attr.attrName === attrName; })[0];
                        if (attr.complexType) {
                            data_1[attr.attrName] = from(row_1, attr.complexType, indexRef_1);
                        }
                        else {
                            data_1[attr.attrName] = attributeReaderImplementation_1(row_1, indexRef_1.value++, attr.name, attr.dataType);
                        }
                    });
                }
                else {
                    attributes_1.forEach(function (attr, index) {
                        if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                            if (attr.dataType === DataTypes_1.DataTypes.Record && dataType.isAnonymousRecord()) {
                                data_1[attr.attrName] = from(row_1, attr.complexType, indexRef_1);
                            }
                            else {
                                data_1[attr.attrName] = attributeReaderImplementation_1(row_1, indexRef_1.value++, attr.name, attr.dataType);
                            }
                        }
                    });
                }
                return new recordType.RecordClass(data_1);
            }
            else if (isGenericRecordListType(dataType)) {
                if (dataType.getItemType() === undefined || dataType.getItemType() === null) {
                    throw Error("A List can only be deserialized if its ItemType is defined.");
                }
                var rowList = rowOrRowList;
                var itemType = dataType.getItemType();
                var rowReader = indexRefOrRowReader;
                var constructableDataType = dataType;
                var result = new constructableDataType();
                var items = [];
                for (var i = 0; i < rowList.length; i++) {
                    items.push(new itemType(rowReader(null, rowList.item(i))));
                }
                result.pushAll(items);
                return result;
            }
            else {
                var type = dataType;
                throw new Error("Unable to read data from Local Storage. Unknown type ".concat(type && type.name ? type.name : type));
            }
        }
        function convertDataTypeToDBDataType(runtimeType) {
            var dbType = DatabaseTypeUtils_1.dataTypeToDBDataType[runtimeType];
            if (dbType === undefined) {
                return Interfaces_1.ClientDB.DBDataType.UNKNOWN;
            }
            return dbType;
        }
        function getAttributeReaderImplementation(type) {
            return type.isAnonymousRecord() ? namedAttributeReaderImplementation : attributeReaderImplementation;
        }
        function attributeReaderImplementation(dbRecord, currIndex, name, runtimeType) {
            return LocalStorageConverter.deserializeFromDB(dbRecord["o" + currIndex], convertDataTypeToDBDataType(runtimeType));
        }
        function namedAttributeReaderImplementation(dbRecord, currIndex, name, runtimeType) {
            return LocalStorageConverter.deserializeFromDB(dbRecord[name], convertDataTypeToDBDataType(runtimeType));
        }
        function maskValue(value, mask) {
            var length = mask.length;
            var strValue = value.toString();
            return mask.substr(0, Math.max(0, length - strValue.length)) + strValue;
        }
        function serializeToDB(value, typeInfo) {
            if (typeInfo.isEntityReference && (0, DataTypes_1.equals)(value, LocalStorageConverter.typeDefaultValue(typeInfo.type))) {
                return null;
            }
            switch (typeInfo.type) {
                case Interfaces_1.ClientDB.DBDataType.INTEGER:
                    return value;
                case Interfaces_1.ClientDB.DBDataType.LONGINTEGER:
                    var longValue = value;
                    return longValue ? longValue.toString() : null;
                case Interfaces_1.ClientDB.DBDataType.DECIMAL:
                    var decimalValue = value;
                    return !typeInfo.decimals ? decimalValue.toString() : decimalValue.toFixed(typeInfo.decimals);
                case Interfaces_1.ClientDB.DBDataType.TEXT:
                    return value;
                case Interfaces_1.ClientDB.DBDataType.BOOLEAN:
                    var booleanValue = value;
                    return booleanValue ? 1 : 0;
                case Interfaces_1.ClientDB.DBDataType.DATE_TIME:
                    if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return value.toDBDateTime();
                    }
                    else {
                        var dateTimeValue = value.toNative();
                        if (!(0, Settings_1.getEnvParams)().DbNullDatesTZAware && value.eq(DataTypes_1.DateTime.defaultValue)) {
                            return NULLDATE_IN_DB;
                        }
                        dateTimeValue = value.toNative();
                        return (maskValue(dateTimeValue.getUTCFullYear(), "0000") +
                            "-" +
                            maskValue(dateTimeValue.getUTCMonth() + 1, "00") +
                            "-" +
                            maskValue(dateTimeValue.getUTCDate(), "00") +
                            " " +
                            maskValue(dateTimeValue.getUTCHours(), "00") +
                            ":" +
                            maskValue(dateTimeValue.getUTCMinutes(), "00") +
                            ":" +
                            maskValue(dateTimeValue.getUTCSeconds(), "00"));
                    }
                case Interfaces_1.ClientDB.DBDataType.DATE:
                    if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return value.toISODate();
                    }
                    else {
                        var dateValue = value.toNative();
                        return (maskValue(dateValue.getFullYear(), "0000") +
                            "-" +
                            maskValue(dateValue.getMonth() + 1, "00") +
                            "-" +
                            maskValue(dateValue.getDate(), "00"));
                    }
                case Interfaces_1.ClientDB.DBDataType.TIME:
                    if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return "1900-01-01 " + value.toISOTime();
                    }
                    else {
                        var timeValue = value.toNative();
                        return ("1900-01-01" +
                            " " +
                            maskValue(timeValue.getHours(), "00") +
                            ":" +
                            maskValue(timeValue.getMinutes(), "00") +
                            ":" +
                            maskValue(timeValue.getSeconds(), "00"));
                    }
                case Interfaces_1.ClientDB.DBDataType.BINARY_DATA:
                    var binary = value;
                    return binary.content === undefined ? null : binary.content;
                default:
                    throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to serialize ".concat(value, " to a database value."));
            }
        }
        LocalStorageConverter.serializeToDB = serializeToDB;
        function deserializeFromDB(dbValue, dataType) {
            if (dbValue === null) {
                return LocalStorageConverter.typeDefaultValue(dataType);
            }
            switch (dataType) {
                case Interfaces_1.ClientDB.DBDataType.INTEGER:
                    return dbValue;
                case Interfaces_1.ClientDB.DBDataType.LONGINTEGER:
                    return DataTypes_1.LongInteger.fromValue(dbValue);
                case Interfaces_1.ClientDB.DBDataType.DECIMAL:
                    var rawDecimalValue = dbValue;
                    return new DataTypes_1.Decimal(rawDecimalValue);
                case Interfaces_1.ClientDB.DBDataType.TEXT:
                    return dbValue;
                case Interfaces_1.ClientDB.DBDataType.BOOLEAN:
                    var rawBooleanValue = dbValue;
                    return rawBooleanValue !== 0;
                case Interfaces_1.ClientDB.DBDataType.DATE_TIME:
                    if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return DataTypes_1.DateTime.fromDBDateTime(dbValue);
                    }
                case Interfaces_1.ClientDB.DBDataType.DATE:
                    if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return DataTypes_1.DateTime.fromISODate(dbValue);
                    }
                case Interfaces_1.ClientDB.DBDataType.TIME:
                    if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                        return DataTypes_1.DateTime.fromISOTime(dbValue.replace("1900-01-01", "").trim());
                    }
                    var DateTimeDbParseRegExp = /^(\d{4})-(\d{2})-(\d{2})( (\d{2}):(\d{2}):(\d{2}))?$/;
                    var rawDateTimeValue = dbValue;
                    var dtParts = DateTimeDbParseRegExp.exec(rawDateTimeValue);
                    var nativeDate = new Date();
                    switch (dataType) {
                        case Interfaces_1.ClientDB.DBDataType.DATE_TIME:
                            if (dbValue === NULLDATE_IN_DB && !(0, Settings_1.getEnvParams)().DbNullDatesTZAware) {
                                return DataTypes_1.DateTime.defaultValue;
                            }
                            nativeDate.setUTCFullYear(parseInt(dtParts[1], 10), parseInt(dtParts[2], 10) - 1, parseInt(dtParts[3], 10));
                            nativeDate.setUTCHours(parseInt(dtParts[5], 10) || 0, parseInt(dtParts[6], 10) || 0, parseInt(dtParts[7], 10) || 0, 0);
                            break;
                        case Interfaces_1.ClientDB.DBDataType.DATE:
                            nativeDate.setFullYear(parseInt(dtParts[1], 10), parseInt(dtParts[2], 10) - 1, parseInt(dtParts[3], 10));
                            nativeDate.setHours(0, 0, 0, 0);
                            break;
                        case Interfaces_1.ClientDB.DBDataType.TIME:
                            nativeDate.setFullYear(1900, 0, 1);
                            nativeDate.setHours(parseInt(dtParts[5], 10) || 0, parseInt(dtParts[6], 10) || 0, parseInt(dtParts[7], 10) || 0, 0);
                            break;
                        default:
                            break;
                    }
                    return new DataTypes_1.DateTime(nativeDate);
                case Interfaces_1.ClientDB.DBDataType.BINARY_DATA:
                    return new DataTypes_1.BinaryData(dbValue);
                default:
                    throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to deserialize " + dbValue + " to a runtime value.");
            }
        }
        LocalStorageConverter.deserializeFromDB = deserializeFromDB;
        function deserializeLazyBinaryFromDB(lazyLoad) {
            return new DataTypes_1.BinaryData(null, null, lazyLoad);
        }
        LocalStorageConverter.deserializeLazyBinaryFromDB = deserializeLazyBinaryFromDB;
    })(LocalStorageConverter || (exports.LocalStorageConverter = LocalStorageConverter = {}));
});
//# sourceMappingURL=DataConversion.js.map;
define('OutSystems/ClientRuntime/Entities',["require", "exports", "./Database", "./DataConversion", "./DataTypes", "./Exceptions", "./Interfaces", "./Logger", "./RegExpHelper"], function (require, exports, Database_1, DataConversion_1, DataTypes, Exceptions_1, Interfaces_1, Logger, RegExpHelper) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QueryArgumentsList = exports.Entity = exports.webSQLStorageInstance = exports.WebSQLStorage = exports.Upgrades = exports.PersistentKeyValue = exports.LogTable = exports.BACKUP_TABLE_PREFIX = void 0;
    exports.BACKUP_TABLE_PREFIX = "BACKUP_";
    function ignoreResult(arg) { }
    function extractScalar(dbRecord) {
        for (var key in dbRecord) {
            if (dbRecord.hasOwnProperty(key)) {
                return dbRecord[key];
            }
        }
        return null;
    }
    var LogTable;
    (function (LogTable) {
        var LOG_FIELDS = {
            Instant: "Instant",
            LogType: "LogType",
            Message: "Message",
            ModuleName: "ModuleName",
            Stack: "Stack",
            MessageType: "MessageType",
            ExtraInfo: "ExtraInfo",
        };
        LogTable.TABLE_NAME = "OSSYS_LOG";
        var maxRecords = 1000;
        var fieldNames = Object.keys(LOG_FIELDS).map(function (key) { return LOG_FIELDS[key]; });
        function createSql() {
            return "CREATE TABLE IF NOT EXISTS \"".concat(LogTable.TABLE_NAME, "\" (\"").concat(fieldNames.join("\",\""), "\")");
        }
        LogTable.createSql = createSql;
        function addExtraInfoColumnIfNeeded(runner) {
            return runner
                .executeScalar("SELECT \"".concat(LogTable.TABLE_NAME, "\".\"").concat(LOG_FIELDS.ExtraInfo, "\" FROM \"").concat(LogTable.TABLE_NAME, "\" LIMIT 0"))
                .onError(function () { return runner.executeNonQuery("ALTER TABLE \"".concat(LogTable.TABLE_NAME, "\" ADD \"").concat(LOG_FIELDS.ExtraInfo, "\"")); })
                .andThen(function () {
            });
        }
        function setMaxRecords(newMax) {
            maxRecords = newMax;
        }
        LogTable.setMaxRecords = setMaxRecords;
        function initialize(runner, database) {
            return runner
                .executeNonQuery(createSql())
                .andThen(addExtraInfoColumnIfNeeded)
                .andThen(function (nextRunner) {
                var logStorage = new LogDatabaseStorage(database);
                return logStorage.initialize(nextRunner).andThen(function () { return Logger.setOfflineStorage(logStorage); });
            });
        }
        LogTable.initialize = initialize;
        var LogDatabaseStorage = (function () {
            function LogDatabaseStorage(db) {
                this.db = db;
            }
            LogDatabaseStorage.prototype.initialize = function (runner) {
                var _this = this;
                return runner.feed(null).withoutTraces(function (runner) {
                    return _this.internalCountLogs(runner).andThen(function (runner, count) {
                        _this.count = count;
                    });
                });
            };
            LogDatabaseStorage.prototype.insertEntity = function (runner, logMessage) {
                var _this = this;
                var insertArgList = new QueryArgumentsList();
                insertArgList.add(LOG_FIELDS.Instant, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.instant);
                insertArgList.add(LOG_FIELDS.LogType, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.logType);
                insertArgList.add(LOG_FIELDS.Message, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.message);
                insertArgList.add(LOG_FIELDS.ModuleName, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.moduleName);
                insertArgList.add(LOG_FIELDS.Stack, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.stack);
                insertArgList.add(LOG_FIELDS.MessageType, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.messageType);
                insertArgList.add(LOG_FIELDS.ExtraInfo, Interfaces_1.ClientDB.DBDataType.TEXT, logMessage.extra ? JSON.stringify(logMessage.extra) : null);
                return runner
                    .executeNonQuery("INSERT INTO \"".concat(LogTable.TABLE_NAME, "\" (\"").concat(fieldNames.join("\", \""), "\") VALUES (").concat(fieldNames
                    .map(function () { return "?"; })
                    .join(", "), ")"), insertArgList.toArray())
                    .andThen(function () {
                    _this.updateCount(1);
                });
            };
            LogDatabaseStorage.prototype.internalWriteLog = function (logMessages) {
                var _this = this;
                return this.db.executeTransaction(function (runner) {
                    var promise;
                    if (_this.count + logMessages.length >= maxRecords) {
                        var numberLogsToDiscard = _this.count + logMessages.length - maxRecords;
                        promise = _this.discardLogs(runner, _this.count, numberLogsToDiscard);
                    }
                    else {
                        promise = runner.feed(null);
                    }
                    return promise.andThenAll(function (result) {
                        return logMessages.map(function (log) { return function (runner) { return _this.insertEntity(runner, log); }; });
                    });
                }, false);
            };
            LogDatabaseStorage.prototype.writeLog = function (logMessage) {
                return this.internalWriteLog([logMessage]);
            };
            LogDatabaseStorage.prototype.writeLogBatch = function (logBatch) {
                if (logBatch.length > maxRecords) {
                    var logsToDiscard = logBatch.length - maxRecords;
                    logBatch.splice(0, logsToDiscard);
                }
                return this.internalWriteLog(logBatch);
            };
            LogDatabaseStorage.prototype.getLogs = function (numberRows) {
                var _this = this;
                return this.db.executeReadTransaction(function (runner) {
                    if (numberRows === undefined) {
                        numberRows = _this.count;
                    }
                    return runner.executeQuery("SELECT * FROM \"".concat(LogTable.TABLE_NAME, "\" ORDER BY rowid ASC LIMIT ").concat(numberRows), _this.dbRecordToLogMessage);
                }, false);
            };
            LogDatabaseStorage.prototype.popLogs = function (numberLogs) {
                var _this = this;
                if (numberLogs === undefined) {
                    numberLogs = this.count;
                }
                return this.getLogs(numberLogs).then(function (retrievedLogs) {
                    return _this.removeLogs(numberLogs).then(function () {
                        return retrievedLogs;
                    });
                });
            };
            LogDatabaseStorage.prototype.internalCountLogs = function (runner) {
                return runner
                    .executeScalar("SELECT COUNT(*) AS count FROM \"".concat(LogTable.TABLE_NAME, "\""))
                    .andThen(function (runner, result) { return result; });
            };
            LogDatabaseStorage.prototype.updateCount = function (change) {
                this.count += change;
                this.count = Math.max(this.count, 0);
            };
            LogDatabaseStorage.prototype.countLogs = function () {
                var _this = this;
                return this.db.executeReadTransaction(function (runner) {
                    return _this.internalCountLogs(runner);
                }, false);
            };
            LogDatabaseStorage.prototype.discardLogs = function (runner, initialCount, totalRowsToDelete) {
                var _this = this;
                var deleteQuery = this.buildDeleteQuery(totalRowsToDelete, false);
                return runner
                    .executeNonQuery(deleteQuery, [Logger.LogTypes.Error])
                    .andThen(function (runner) { return _this.internalCountLogs(runner); })
                    .andThen(function (runner, currentCount) {
                    var rowsDeleted = initialCount - currentCount;
                    if (rowsDeleted < totalRowsToDelete) {
                        var numberErrorsToDiscard = totalRowsToDelete - rowsDeleted;
                        deleteQuery = _this.buildDeleteQuery(numberErrorsToDiscard, true);
                        runner.executeNonQuery(deleteQuery, [Logger.LogTypes.Error]);
                    }
                })
                    .andThen(function () {
                    _this.updateCount(-totalRowsToDelete);
                });
            };
            LogDatabaseStorage.prototype.buildDeleteQuery = function (numberRowsToDelete, equalsLogType) {
                return ("DELETE FROM \"".concat(LogTable.TABLE_NAME, "\" ") +
                    "WHERE rowid IN " +
                    "(SELECT rowid FROM \"".concat(LogTable.TABLE_NAME, "\" ") +
                    "WHERE LogType ".concat(equalsLogType ? "=" : "<>", " ? ") +
                    "ORDER BY rowid ASC " +
                    "LIMIT ".concat(numberRowsToDelete, ")"));
            };
            LogDatabaseStorage.prototype.removeLogs = function (numberRowsToDelete) {
                var _this = this;
                return this.db.executeTransaction(function (runner) {
                    var deleteQuery = "DELETE FROM \"".concat(LogTable.TABLE_NAME, "\" WHERE rowid IN (SELECT rowid FROM \"").concat(LogTable.TABLE_NAME, "\" ORDER BY rowid ASC LIMIT ").concat(numberRowsToDelete, ")");
                    return runner.executeNonQuery(deleteQuery).andThen(function () {
                        _this.updateCount(-numberRowsToDelete);
                    });
                }, false);
            };
            LogDatabaseStorage.prototype.dbRecordToLogMessage = function (dbRecord) {
                return {
                    instant: dbRecord.Instant,
                    logType: dbRecord.LogType,
                    message: dbRecord.Message,
                    moduleName: dbRecord.ModuleName,
                    stack: dbRecord.Stack,
                    messageType: dbRecord.MessageType,
                    extra: dbRecord.ExtraInfo ? JSON.parse(dbRecord.ExtraInfo) : undefined,
                };
            };
            return LogDatabaseStorage;
        }());
        LogTable.LogDatabaseStorage = LogDatabaseStorage;
    })(LogTable || (exports.LogTable = LogTable = {}));
    var UpgradeStatus;
    (function (UpgradeStatus) {
        UpgradeStatus[UpgradeStatus["Unchanged"] = 0] = "Unchanged";
        UpgradeStatus[UpgradeStatus["Deleted"] = 1] = "Deleted";
        UpgradeStatus[UpgradeStatus["Recreated"] = 2] = "Recreated";
        UpgradeStatus[UpgradeStatus["New"] = 3] = "New";
    })(UpgradeStatus || (UpgradeStatus = {}));
    var PersistentKeyValue;
    (function (PersistentKeyValue) {
        var FIELDS = [
            { columnName: "Id", options: "INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL" },
            { columnName: "Key", options: "UNIQUE NOT NULL" },
            { columnName: "Value" },
        ];
        PersistentKeyValue.TABLE_NAME = "OSSYS_PERSISTENTKEYVALUE";
        var FIELD_LIST = "\"".concat(FIELDS.map(function (f) { return f.columnName; }).join("\", \""), "\"");
        var FIELD_WITH_OPTIONS = FIELDS.map(function (f) { return "'" + f.columnName + (!!f.options ? "' " + f.options : "'"); }).join(", ");
        function initialize(runner, db) {
            PersistentKeyValue.storage = new PersistentKeyValueStorage(db);
            return create(runner);
        }
        PersistentKeyValue.initialize = initialize;
        function create(runner) {
            return runner.executeNonQuery("CREATE TABLE IF NOT EXISTS \"".concat(PersistentKeyValue.TABLE_NAME, "\" (").concat(FIELD_WITH_OPTIONS, ")"));
        }
        PersistentKeyValue.create = create;
        var PersistentKeyValueStorage = (function () {
            function PersistentKeyValueStorage(db) {
                this.db = db;
            }
            PersistentKeyValueStorage.prototype.isReady = function () {
                return Promise.resolve(true);
            };
            PersistentKeyValueStorage.prototype.getValue = function (key) {
                return this.db.executeTransaction(function (runner) {
                    return runner.executeScalar("SELECT VALUE FROM ".concat(PersistentKeyValue.TABLE_NAME, " WHERE Key = ?"), [key]);
                });
            };
            PersistentKeyValueStorage.prototype.setValue = function (key, value) {
                return this.db.executeTransaction(function (runner) {
                    return runner.executeNonQuery("INSERT OR REPLACE INTO ".concat(PersistentKeyValue.TABLE_NAME, " (").concat(FIELD_LIST, ") VALUES (COALESCE((SELECT Id FROM ").concat(PersistentKeyValue.TABLE_NAME, " WHERE Key = ?), null), ?, ?)"), [key, key, value]);
                });
            };
            return PersistentKeyValueStorage;
        }());
        PersistentKeyValue.PersistentKeyValueStorage = PersistentKeyValueStorage;
    })(PersistentKeyValue || (exports.PersistentKeyValue = PersistentKeyValue = {}));
    var Upgrades;
    (function (Upgrades) {
        function fillWithDefaults(dbRecordInLowercase, info) {
            for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
                var expectedAttr = _a[_i];
                var attrNameLower = expectedAttr.name.toLowerCase();
                if (dbRecordInLowercase[attrNameLower] === undefined) {
                    var defaultValue = expectedAttr.default === undefined
                        ? DataConversion_1.LocalStorageConverter.typeDefaultValue(expectedAttr.type)
                        : expectedAttr.default;
                    dbRecordInLowercase[attrNameLower] = DataConversion_1.LocalStorageConverter.serializeToDB(defaultValue, expectedAttr);
                }
            }
        }
        var Metamodel;
        (function (Metamodel) {
            var METADATA_TABLE_NAME = "OSSYS_ENTITY";
            var METADATA_BACKUP_TABLE_NAME = "".concat(exports.BACKUP_TABLE_PREFIX).concat(METADATA_TABLE_NAME);
            var METADATA_FIELD_INFO = [
                { name: "SS_Key" },
                { name: "Module_SS_Key" },
                { name: "Name" },
                { name: "Physical_Table_name" },
                { name: "Hash" },
                { name: "Extra_Info", defaultValue: "'{\"attrs\":{}}'" },
                { name: "Upgrade_Status", defaultValue: 0..toString() },
            ];
            var METADATA_FIELD_LIST = "\"".concat(METADATA_FIELD_INFO.map(function (f) { return f.name; }).join("\", \""), "\"");
            function getDefaultMetaData() {
                return {
                    v: -1,
                    attrs: {},
                };
            }
            Metamodel.getDefaultMetaData = getDefaultMetaData;
            function create(runner) {
                return innerCreate(runner, METADATA_TABLE_NAME).andThen(function (runner) {
                    return innerCreate(runner, "".concat(exports.BACKUP_TABLE_PREFIX).concat(METADATA_TABLE_NAME));
                });
            }
            Metamodel.create = create;
            function innerCreate(runner, tableName) {
                return runner.executeNonQuery("CREATE TABLE IF NOT EXISTS \"".concat(tableName, "\" (").concat(METADATA_FIELD_LIST, ", UNIQUE (SS_Key, Module_SS_Key))"));
            }
            Metamodel.innerCreate = innerCreate;
            function verifyColumns(runner) {
                return innerVerifyColumns(runner, METADATA_TABLE_NAME).andThen(function (runner) {
                    return innerVerifyColumns(runner, METADATA_BACKUP_TABLE_NAME);
                });
            }
            Metamodel.verifyColumns = verifyColumns;
            function innerVerifyColumns(runner, tableName) {
                var hasAllColumns = true;
                var qualifiedFieldNames = METADATA_FIELD_INFO.map(function (f) { return "\"ent\".\"".concat(f.name, "\""); });
                return runner
                    .executeQueryRaw("SELECT ".concat(qualifiedFieldNames.join(", "), " FROM \"").concat(tableName, "\" \"ent\" LIMIT 0"))
                    .onError(function (err) {
                    hasAllColumns = false;
                })
                    .andThen(function () {
                    return hasAllColumns;
                });
            }
            Metamodel.innerVerifyColumns = innerVerifyColumns;
            function addMissingColumns(runner) {
                return runner
                    .feed(null)
                    .andThenAll(function (_) {
                    return METADATA_FIELD_INFO.map(function (f) { return function (runner) { return addColumnIfNeeded(runner, f.name, f.defaultValue); }; });
                });
            }
            Metamodel.addMissingColumns = addMissingColumns;
            function addColumnIfNeeded(runner, colName, rawDefaultValue) {
                return innerAddColumnIfNeeded(runner, METADATA_TABLE_NAME, colName, rawDefaultValue).andThen(function (runner) {
                    return innerAddColumnIfNeeded(runner, METADATA_BACKUP_TABLE_NAME, colName, rawDefaultValue);
                });
            }
            Metamodel.addColumnIfNeeded = addColumnIfNeeded;
            function innerAddColumnIfNeeded(runner, tableName, colName, rawDefaultValue) {
                var noColumn = false;
                return runner.feed(null).andThenAll(function (_) { return [
                    function (runner) {
                        return runner
                            .executeNonQuery("SELECT \"ent\".\"".concat(colName, "\" FROM ").concat(tableName, " \"ent\" LIMIT 0"))
                            .onError(function (e) {
                            noColumn = true;
                        });
                    },
                    function (runner) {
                        return noColumn
                            ? runner
                                .executeNonQuery("ALTER TABLE ".concat(tableName, " ADD \"").concat(colName, "\""))
                                .andThen(function (runner) {
                                return rawDefaultValue
                                    ? runner.executeNonQuery("UPDATE ".concat(tableName, " SET \"").concat(colName, "\" = ").concat(rawDefaultValue))
                                    : runner.feed(null);
                            })
                            : runner.feed(null);
                    },
                ]; });
            }
            function copyMetaInfo(runner, tableName, isRollback) {
                var sourceTable = isRollback ? METADATA_BACKUP_TABLE_NAME : METADATA_TABLE_NAME;
                var targetTable = isRollback ? METADATA_TABLE_NAME : METADATA_BACKUP_TABLE_NAME;
                var continuation = runner
                    .executeNonQuery("DELETE FROM ".concat(targetTable, " WHERE Physical_Table_name = ?"), [tableName])
                    .andThen(function (runner) {
                    return runner.executeNonQuery("INSERT INTO ".concat(targetTable, "(").concat(METADATA_FIELD_LIST, ") SELECT ").concat(METADATA_FIELD_LIST, " FROM ").concat(sourceTable, " WHERE Physical_Table_name = ?"), [tableName]);
                });
                if (isRollback) {
                    continuation = continuation.andThen(function (runner) {
                        return runner.executeNonQuery("DELETE FROM ".concat(sourceTable, " WHERE Physical_Table_name = ?"), [tableName]);
                    });
                }
                return continuation;
            }
            Metamodel.copyMetaInfo = copyMetaInfo;
            function extractEntityMetadata(info) {
                Logger.trace("Metamodel", "Extracting metadata for table ".concat(info.tableName, " (").concat(info.name, ")"));
                var newExtraInfo = {
                    v: 0,
                    idIsAutoNumber: info.idIsAutoNumber,
                    attrs: {},
                };
                for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
                    var attr = _a[_i];
                    newExtraInfo.attrs[attr.name.toLowerCase()] = extractAttributeMetadata(attr);
                }
                return newExtraInfo;
            }
            Metamodel.extractEntityMetadata = extractEntityMetadata;
            function extractAttributeMetadata(attr) {
                var extraAttrInfo = {
                    type: attr.type,
                };
                if (attr.decimals !== undefined) {
                    extraAttrInfo.decimals = attr.decimals;
                }
                if (attr.length !== undefined) {
                    extraAttrInfo.length = attr.length;
                }
                if (attr.isPrimaryKey) {
                    extraAttrInfo.isPrimaryKey = attr.isPrimaryKey;
                }
                if (attr.isEntityReference) {
                    extraAttrInfo.isEntityReference = attr.isEntityReference;
                }
                return extraAttrInfo;
            }
            function updateEntity(runner, info, moduleKey) {
                var newExtraInfo = extractEntityMetadata(info);
                Logger.trace("Metamodel", "Updating metadata for table ".concat(info.tableName, " (").concat(info.name, ")"));
                var updateArgList = new QueryArgumentsList();
                updateArgList.add("Hash", Interfaces_1.ClientDB.DBDataType.TEXT, info.hash);
                updateArgList.add("Name", Interfaces_1.ClientDB.DBDataType.TEXT, info.name);
                updateArgList.add("Physical_Table_name", Interfaces_1.ClientDB.DBDataType.TEXT, info.tableName);
                updateArgList.add("Extra_Info", Interfaces_1.ClientDB.DBDataType.TEXT, JSON.stringify(newExtraInfo));
                updateArgList.add("Key", Interfaces_1.ClientDB.DBDataType.TEXT, info.key);
                updateArgList.add("ModuleKey", Interfaces_1.ClientDB.DBDataType.TEXT, moduleKey);
                return runner.executeNonQuery("UPDATE ".concat(METADATA_TABLE_NAME, " SET Hash = ?, Name = ?, Physical_Table_name = ?, Extra_Info = ? WHERE SS_Key = ? AND Module_SS_Key = ?"), updateArgList.toArray());
            }
            Metamodel.updateEntity = updateEntity;
            function insertEntity(runner, info, moduleKey) {
                var newExtraInfo = extractEntityMetadata(info);
                var insertArgList = new QueryArgumentsList();
                insertArgList.add("Key", Interfaces_1.ClientDB.DBDataType.TEXT, info.key);
                insertArgList.add("ModuleKey", Interfaces_1.ClientDB.DBDataType.TEXT, moduleKey);
                insertArgList.add("Name", Interfaces_1.ClientDB.DBDataType.TEXT, info.name);
                insertArgList.add("TableName", Interfaces_1.ClientDB.DBDataType.TEXT, info.tableName);
                insertArgList.add("Hash", Interfaces_1.ClientDB.DBDataType.TEXT, info.hash);
                insertArgList.add("Extra_Info", Interfaces_1.ClientDB.DBDataType.TEXT, JSON.stringify(newExtraInfo));
                insertArgList.add("Upgrade_Status", Interfaces_1.ClientDB.DBDataType.TEXT, 3);
                return runner.executeNonQuery("INSERT INTO ".concat(METADATA_TABLE_NAME, "(SS_Key, Module_SS_Key, Name, Physical_Table_name, Hash, Extra_Info, Upgrade_Status) VALUES (?, ?, ?, ?, ?, ?, ?)"), insertArgList.toArray());
            }
            Metamodel.insertEntity = insertEntity;
        })(Metamodel = Upgrades.Metamodel || (Upgrades.Metamodel = {}));
        function typeUpgradeNeedsValueConversion(from, to) {
            if (from === undefined) {
                return true;
            }
            if (from === to) {
                return false;
            }
            switch (from) {
                case Interfaces_1.ClientDB.DBDataType.BOOLEAN:
                    return to !== Interfaces_1.ClientDB.DBDataType.INTEGER && to !== Interfaces_1.ClientDB.DBDataType.LONGINTEGER;
                case Interfaces_1.ClientDB.DBDataType.INTEGER:
                    return to !== Interfaces_1.ClientDB.DBDataType.LONGINTEGER && to !== Interfaces_1.ClientDB.DBDataType.TEXT;
                case Interfaces_1.ClientDB.DBDataType.LONGINTEGER:
                    return to !== Interfaces_1.ClientDB.DBDataType.TEXT;
                default:
                    return true;
            }
        }
        function needsValueConversion(fromInfo, toInfo) {
            if (typeUpgradeNeedsValueConversion(fromInfo.type, toInfo.type)) {
                return true;
            }
            if (!fromInfo.isEntityReference !== !toInfo.isEntityReference) {
                return true;
            }
            if (fromInfo.length !== undefined) {
                if (fromInfo.decimals !== undefined) {
                    return fromInfo.length - fromInfo.decimals > toInfo.length - toInfo.decimals;
                }
                return fromInfo.length > toInfo.length;
            }
            return false;
        }
        function upgradeDbValue(dbValue, fromInfo, toInfo) {
            if (needsValueConversion(fromInfo, toInfo)) {
                var originalValue = DataConversion_1.LocalStorageConverter.deserializeFromDB(dbValue, fromInfo.type);
                var newModelDataType = DataConversion_1.LocalStorageConverter.convertToModelDataType(toInfo.type);
                var operation = createOperationLabel(dbValue, originalValue, fromInfo.type, newModelDataType);
                if (DataConversion_1.JSConversions.isConvertibleTo(originalValue, newModelDataType)) {
                    var convertedValue = DataConversion_1.JSConversions.convertTo(originalValue, newModelDataType);
                    var dbConvertedValue = DataConversion_1.LocalStorageConverter.serializeToDB(convertedValue, toInfo);
                    validateValueForCreateOrUpdate(dbConvertedValue, toInfo, operation);
                    return dbConvertedValue;
                }
                else {
                    throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to ".concat(operation, "."));
                }
            }
            else {
                return dbValue;
            }
        }
        Upgrades.upgradeDbValue = upgradeDbValue;
        function createOperationLabel(dbValue, originalValue, originalType, newModelDataType) {
            var dbValueToLog = dbValue;
            var originalValueToLog = originalValue;
            var originalTypeLabel = GetDBDataTypeLabel(originalType);
            var newModelDataTypeLabel = DataTypes.DataTypes[newModelDataType];
            if (typeof dbValue === "string" && !!dbValue) {
                dbValueToLog = dbValue.substr(0, 50) + " (length:".concat(dbValue.length, ")");
            }
            if (DataTypes.TypeValidations.isText(originalValue)) {
                var val = originalValue;
                originalValueToLog = val.substr(0, 50) + " (length:".concat(val.length, ")");
            }
            if (originalValue instanceof DataTypes.BinaryData) {
                var content = originalValue.content;
                originalValueToLog = content.substr(0, 50) + " (length:".concat(content.length, ")");
            }
            return "convert databaseValue:'".concat(dbValueToLog, "'/deserializedValue:'").concat(originalValueToLog, "' from type ").concat(originalTypeLabel, " to ").concat(newModelDataTypeLabel);
        }
        function getCorrespondingColumnInfo(attrInfo, tableInfo) {
            var attrNameInLowercase = attrInfo.name.toLowerCase();
            var cols = tableInfo.attributes.filter(function (col) { return col.name.toLowerCase() === attrNameInLowercase; });
            if (cols.length === 0) {
                return null;
            }
            else {
                return cols[0];
            }
        }
        function convertRecordAttribute(attrValue, attr, tableInfo, extraInfo) {
            if (tableInfo) {
                var tableAttr = getCorrespondingColumnInfo(attr, tableInfo);
                if (tableAttr !== null) {
                    if (extraInfo && tableAttr.type === Interfaces_1.ClientDB.DBDataType.DATE_TIME) {
                        var extraInfoAttr_1 = extraInfo.attrs[attr.name.toLowerCase()];
                        if (extraInfoAttr_1) {
                            return Upgrades.upgradeDbValue(attrValue, extraInfoAttr_1, attr);
                        }
                    }
                    return Upgrades.upgradeDbValue(attrValue, tableAttr, attr);
                }
            }
            var extraInfoAttr = extraInfo.attrs[attr.name.toLowerCase()];
            if (extraInfoAttr) {
                return Upgrades.upgradeDbValue(attrValue, extraInfoAttr, attr);
            }
            return attrValue;
        }
        function upgradeDbRecord(dbRecord, info, tableInfo, extraInfo) {
            var dbRecordInLowercase = {};
            for (var _i = 0, _a = Object.keys(dbRecord); _i < _a.length; _i++) {
                var prop = _a[_i];
                dbRecordInLowercase[prop.toLowerCase()] = dbRecord[prop];
            }
            fillWithDefaults(dbRecordInLowercase, info);
            var newDbRecord = {};
            for (var _b = 0, _c = info.attributes; _b < _c.length; _b++) {
                var attr = _c[_b];
                try {
                    var attrNameLower = attr.name.toLowerCase();
                    var oldValue = dbRecordInLowercase[attrNameLower];
                    newDbRecord[attrNameLower] = convertRecordAttribute(oldValue, attr, tableInfo, extraInfo);
                }
                catch (error) {
                    throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to upgrade attribute '".concat(attr.name, "' data type to '").concat(DataConversion_1.LocalStorageConverter.typeDisplayName(attr.type), "':\n").concat((0, Exceptions_1.getMessage)(error)));
                }
            }
            return newDbRecord;
        }
        Upgrades.upgradeDbRecord = upgradeDbRecord;
        function requiresFullUpgrade(entityInfo, tableInfo, extraMetadata) {
            var dbIdIsAutoNumber;
            if (tableInfo) {
                dbIdIsAutoNumber = tableInfo.idIsAutoNumber;
            }
            else {
                dbIdIsAutoNumber = extraMetadata.idIsAutoNumber;
            }
            if (dbIdIsAutoNumber !== entityInfo.idIsAutoNumber) {
                return true;
            }
            var attrInfos = getAttributeInfoSummary(entityInfo, tableInfo, extraMetadata);
            return attrInfos.some(function (info) {
                if (!info.entityAttribute) {
                    return true;
                }
                if (!info.dbAttribute && !info.dbMetaAttribute) {
                    return info.entityAttribute.isPrimaryKey;
                }
                return columnDefinitionHasChanged(info.entityAttribute, info.dbAttribute, info.dbMetaAttribute, dbIdIsAutoNumber !== Interfaces_1.ClientDB.AutoNumber.No);
            });
        }
        Upgrades.requiresFullUpgrade = requiresFullUpgrade;
        function columnDefinitionHasChanged(newInfo, dbInfo, dbMetaInfo, idIsAutoNumber) {
            if (idIsAutoNumber === void 0) { idIsAutoNumber = false; }
            if (dbInfo) {
                var metaInfoTypeIsOk = dbMetaInfo === undefined ||
                    dbMetaInfo.type === undefined ||
                    dbMetaInfo.type === newInfo.type;
                return (!metaInfoTypeIsOk ||
                    typeDefinitionHasChanged(newInfo, dbInfo, idIsAutoNumber, dbMetaInfo) ||
                    !dbInfo.isPrimaryKey !== !newInfo.isPrimaryKey);
            }
            else {
                return (typeDefinitionHasChanged(newInfo, dbMetaInfo, idIsAutoNumber) ||
                    !dbMetaInfo.isPrimaryKey !== !newInfo.isPrimaryKey);
            }
        }
        function typeDefinitionHasChanged(newInfo, oldInfo, idIsAutoNumber, extraInfo) {
            if (idIsAutoNumber === void 0) { idIsAutoNumber = false; }
            if (extraInfo === void 0) { extraInfo = null; }
            var changedDbType;
            var infoToUse = oldInfo;
            if (extraInfo && oldInfo.type === Interfaces_1.ClientDB.DBDataType.DATE_TIME) {
                infoToUse = extraInfo;
            }
            if (newInfo.isPrimaryKey && infoToUse.isPrimaryKey && idIsAutoNumber) {
                changedDbType = !((Interfaces_1.ClientDB.DBDataType.INTEGER === newInfo.type || Interfaces_1.ClientDB.DBDataType.LONGINTEGER === newInfo.type) &&
                    (Interfaces_1.ClientDB.DBDataType.INTEGER === infoToUse.type || Interfaces_1.ClientDB.DBDataType.LONGINTEGER === infoToUse.type));
            }
            else {
                changedDbType = newInfo.type !== infoToUse.type;
            }
            return (changedDbType ||
                (infoToUse.type !== Interfaces_1.ClientDB.DBDataType.DECIMAL && infoToUse.length !== newInfo.length) ||
                (infoToUse.type !== Interfaces_1.ClientDB.DBDataType.DECIMAL && infoToUse.decimals !== newInfo.decimals) ||
                (!infoToUse.isEntityReference !== !newInfo.isEntityReference && !newInfo.isPrimaryKey));
        }
        function getAttributeInfoSummary(entityInfo, tableInfo, extraMetadata) {
            var pairedInfo = {};
            for (var _i = 0, _a = entityInfo.attributes; _i < _a.length; _i++) {
                var einfoAttr = _a[_i];
                var attrName = einfoAttr.name.toLowerCase();
                pairedInfo[attrName] = {};
                pairedInfo[attrName].entityAttribute = einfoAttr;
            }
            for (var _b = 0, _c = Object.keys(extraMetadata.attrs); _b < _c.length; _b++) {
                var attr = _c[_b];
                var attrName = attr.toLowerCase();
                pairedInfo[attrName] = pairedInfo[attrName] || {};
                pairedInfo[attrName].dbMetaAttribute = extraMetadata.attrs[attr];
            }
            if (tableInfo) {
                for (var _d = 0, _e = tableInfo.attributes; _d < _e.length; _d++) {
                    var tblInfoAttr = _e[_d];
                    var attrName = tblInfoAttr.name.toLowerCase();
                    pairedInfo[attrName] = pairedInfo[attrName] || {};
                    pairedInfo[attrName].dbAttribute = tblInfoAttr;
                }
            }
            return Object.keys(pairedInfo).map(function (attrName) { return pairedInfo[attrName]; });
        }
    })(Upgrades || (exports.Upgrades = Upgrades = {}));
    var CreateOrUpdateAllMethod;
    (function (CreateOrUpdateAllMethod) {
        CreateOrUpdateAllMethod[CreateOrUpdateAllMethod["Auto"] = 0] = "Auto";
        CreateOrUpdateAllMethod[CreateOrUpdateAllMethod["Single"] = 1] = "Single";
        CreateOrUpdateAllMethod[CreateOrUpdateAllMethod["Bulk"] = 2] = "Bulk";
    })(CreateOrUpdateAllMethod || (CreateOrUpdateAllMethod = {}));
    var EntityIdOutputTypeFactory = new DataTypes.BasicTypeKeyedTypeFactory("Id", "idOut");
    var EntityRecordOutputTypeFactory = new DataTypes.ComplexTypeKeyedTypeFactory("Record", "recordOut");
    var WebSQLStorage = (function () {
        function WebSQLStorage() {
        }
        WebSQLStorage.prototype.getDatabase = function () {
            var _this = this;
            if (this._db) {
                return Promise.resolve(this._db);
            }
            if (!this.dbReadyPromise) {
                this.dbReadyPromise = new Promise(function (resolve) {
                    _this.onDbInit = function () { return resolve(_this._db); };
                });
            }
            return this.dbReadyPromise;
        };
        WebSQLStorage.prototype.trace = function (msg) {
            Logger.trace(this, msg);
        };
        WebSQLStorage.prototype.initDb = function (db) {
            Logger.trace(this, "Setting platform database to '".concat(db ? db.name : "none", "'"));
            this._db = db;
            if (this.onDbInit) {
                this.onDbInit();
                this.onDbInit = null;
            }
        };
        WebSQLStorage.prototype.clearDb = function () {
            this._db = null;
        };
        WebSQLStorage.prototype.initModule = function (entitiesInfo, runner, moduleKey) {
            var _this = this;
            return this.recoverBackupTables(runner, entitiesInfo, moduleKey)
                .andThen(function (runner) {
                return entitiesInfo.length === 0
                    ? runner.feed(null)
                    : _this.dropInconsistentTables(runner, entitiesInfo, moduleKey);
            })
                .andThen(function (runner) {
                return _this.backupDeletedTables(runner, entitiesInfo, moduleKey);
            })
                .andThen(function (runner) {
                var argsList = new QueryArgumentsList();
                argsList.add("ModuleKey", Interfaces_1.ClientDB.DBDataType.TEXT, moduleKey);
                return runner.executeQuery("SELECT SS_Key, Hash, Extra_Info FROM OSSYS_ENTITY WHERE Module_SS_Key = ?", function (result) {
                    return {
                        hash: result.Hash,
                        extraInfo: JSON.parse(result.Extra_Info || "{}"),
                        ssKey: result.SS_Key,
                    };
                }, argsList.toArray());
            })
                .andThenAll(function (storedMetadata) {
                return entitiesInfo.map(function (info) {
                    var thisMetadata = storedMetadata.filter(function (m) { return m.ssKey === info.key; });
                    return function (runner) {
                        return _this.createOrUpgradeTable(runner, info, thisMetadata.length === 1 ? thisMetadata[0] : undefined, moduleKey);
                    };
                });
            });
        };
        WebSQLStorage.prototype.initMetamodel = function (runner) {
            return Upgrades.Metamodel.create(runner)
                .andThen(function (runner) { return Upgrades.Metamodel.verifyColumns(runner); })
                .andThen(function (runner, hasAllColumns) {
                if (hasAllColumns) {
                    return;
                }
                return Upgrades.Metamodel.addMissingColumns(runner);
            });
        };
        WebSQLStorage.prototype.createOrUpgradeTable = function (runner, info, result, moduleKey) {
            var _this = this;
            this.trace("Checking the status of table ".concat(info.tableName, " (").concat(info.name, ")"));
            if (!result) {
                result = { hash: null, extraInfo: Upgrades.Metamodel.getDefaultMetaData() };
            }
            var hash = result.hash, extraInfo = result.extraInfo;
            if (!hash) {
                this.trace("Table ".concat(info.tableName, " (").concat(info.name, ") does not exist and will be created"));
                return this.createTable(runner, info, moduleKey).andThen(function (runner) {
                    return Upgrades.Metamodel.insertEntity(runner, info, moduleKey);
                });
            }
            else if (hash !== info.hash) {
                return Database_1.SqlDbIntrospector.introspectTableInfo(runner, info.tableName).andThen(function (runner, tableInfo) {
                    if (Upgrades.requiresFullUpgrade(info, tableInfo, extraInfo)) {
                        _this.trace("Table ".concat(info.tableName, " (").concat(info.name, ") exists and will be fully upgraded"));
                        return _this.recreateTable(runner, info, tableInfo, moduleKey, extraInfo);
                    }
                    else {
                        _this.trace("Table ".concat(info.tableName, " (").concat(info.name, ") exists and will be incrementally upgraded"));
                        return _this.upgradeTable(runner, info, tableInfo, moduleKey, extraInfo);
                    }
                });
            }
            else {
                this.trace("Table ".concat(info.tableName, " (").concat(info.name, ") exists and is up to date"));
                return null;
            }
        };
        WebSQLStorage.prototype.recreateTable = function (runner, info, tableInfo, moduleKey, extraInfo) {
            var _this = this;
            return (runner
                .executeQuery("SELECT * FROM \"".concat(info.tableName, "\""), function (dbRecord) { return dbRecord; })
                .onError(function (error) {
                _this.trace("Unable to upgrade the definition of entity '".concat(info.name, "':\n").concat((0, Exceptions_1.getMessage)(error)));
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to upgrade the definition of entity '".concat(info.name, "':\n").concat((0, Exceptions_1.getMessage)(error)));
            })
                .andThen(function (runner, values) {
                return _this.backupTable(runner, info.tableName, 2)
                    .andThen(function (runner) { return _this.createTable(runner, info, moduleKey); })
                    .andThenAll(function () {
                    return values.map(function (dbRecord) {
                        var newDbRecord = Upgrades.upgradeDbRecord(dbRecord, info, tableInfo, extraInfo);
                        var argList = new QueryArgumentsList(true);
                        for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
                            var attr = _a[_i];
                            argList.add(attr.name, attr.type, newDbRecord[attr.name.toLowerCase()]);
                        }
                        return function (runner) {
                            return runner.executeNonQuery(info.insert.sql, argList.toArray());
                        };
                    });
                });
            })
                .andThen(function (runner) { return Upgrades.Metamodel.updateEntity(runner, info, moduleKey); }));
        };
        WebSQLStorage.prototype.upgradeTable = function (runner, info, tableInfo, moduleKey, extraInfo, hash) {
            var _this = this;
            if (hash === void 0) { hash = null; }
            return runner
                .feed(null)
                .andThenAll(function () {
                var newAttributes = info.attributes.filter(function (attr) {
                    if (tableInfo) {
                        return !tableInfo.attributes.some(function (dbAttr) { return attr.name === dbAttr.name; });
                    }
                    else {
                        return !Object.keys(extraInfo.attrs).some(function (infoAttrName) { return infoAttrName === attr.name.toLowerCase(); });
                    }
                });
                _this.trace("Entity '".concat(info.name, "' - newAttributes - ").concat(JSON.stringify(newAttributes), " - hash - ").concat(hash, " - info.hash - ").concat(info.hash));
                return newAttributes.map(function (attribute) {
                    return function (runner) {
                        var cont = runner.executeNonQuery(attribute.addColumn.sql);
                        if (attribute.default !== undefined) {
                            var argsList_1 = new QueryArgumentsList();
                            argsList_1.add("value", attribute.type, attribute.default);
                            cont = cont.andThen(function (runner) {
                                return runner.executeNonQuery("UPDATE \"".concat(info.tableName, "\" SET \"").concat(attribute.name, "\" = ?"), argsList_1.toArray());
                            });
                        }
                        return cont;
                    };
                });
            })
                .andThen(function (runner) { return Upgrades.Metamodel.updateEntity(runner, info, moduleKey); });
        };
        WebSQLStorage.prototype.switchModule = function (runner, moduleKey) {
            return this.dropBackupTables(runner, moduleKey);
        };
        WebSQLStorage.prototype.recoverBackupTables = function (runner, entitiesInfo, moduleKey) {
            var _this = this;
            return this.doForEachTable(runner, function (tableName) {
                _this.trace("Recovering table ".concat(tableName));
                var filtered = entitiesInfo.filter(function (value) { return value.tableName === tableName; });
                return function (runner) {
                    return _this.recoverBackupTable(runner, tableName, filtered.length === 1 ? filtered[0] : null, moduleKey);
                };
            }, moduleKey, "Upgrade_Status <> " + 0);
        };
        WebSQLStorage.prototype.dropInconsistentTables = function (runner, entitiesInfo, moduleKey) {
            var _this = this;
            return this.doForEachTable(runner, function (tableName) {
                _this.trace("Dropping inconsistent table ".concat(tableName, " (same key, different physical table name)"));
                return function (runner) {
                    return _this.dropTableIfExists(runner, tableName).andThen(function (runner) {
                        return runner.executeNonQuery("DELETE FROM OSSYS_ENTITY WHERE upper(Physical_Table_name) = '".concat(tableName, "'"));
                    });
                };
            }, moduleKey, "Upgrade_Status = " +
                0 +
                (entitiesInfo.length === 0
                    ? ""
                    : " AND SS_Key IN (".concat(entitiesInfo
                        .map(function (info) { return "'" + info.key + "'"; })
                        .join(", "), ")") +
                        " AND Physical_Table_name NOT IN (".concat(entitiesInfo
                            .map(function (info) { return "'" + info.tableName + "'"; })
                            .join(", "), ")")));
        };
        WebSQLStorage.prototype.dropBackupTables = function (runner, moduleKey) {
            var _this = this;
            return this.doForEachTable(runner, function (tableName) {
                _this.trace("Dropping table ".concat(tableName));
                return function (runner) { return _this.dropBackupTable(runner, tableName); };
            }, moduleKey, "Upgrade_Status <> " + 0);
        };
        WebSQLStorage.prototype.backupDeletedTables = function (runner, entitiesInfo, moduleKey) {
            var _this = this;
            return this.doForEachTable(runner, function (tableName) {
                _this.trace("Backing up old table ".concat(tableName));
                return function (runner) { return _this.backupTable(runner, tableName, 1); };
            }, moduleKey, "Upgrade_Status = " +
                0 +
                (entitiesInfo.length === 0
                    ? ""
                    : " AND Physical_Table_name NOT IN (".concat(entitiesInfo
                        .map(function (info) { return "'" + info.tableName + "'"; })
                        .join(", "), ")")));
        };
        WebSQLStorage.prototype.doForEachTable = function (runner, getStatement, moduleKey, additionalSqlFilters) {
            var sql = "SELECT Physical_Table_name as name FROM OSSYS_ENTITY WHERE Module_SS_Key = '".concat(moduleKey, "'");
            if (additionalSqlFilters) {
                sql += " AND " + additionalSqlFilters;
            }
            return runner
                .executeQuery(sql, function (dbRecord) { return dbRecord.name; })
                .andThenAll(function (tables) {
                var statements = [];
                tables.forEach(function (tableName) {
                    statements.push(getStatement(tableName));
                });
                return statements;
            });
        };
        WebSQLStorage.prototype.dropTableIfExists = function (runner, tableName) {
            return runner.executeNonQuery("DROP TABLE IF EXISTS \"".concat(tableName, "\""));
        };
        WebSQLStorage.prototype.createTable = function (runner, info, moduleKey) {
            this.trace("createTable '".concat(info.createTable.sql, "'"));
            return runner.executeNonQuery(info.createTable.sql);
        };
        WebSQLStorage.prototype.backupTable = function (runner, tableName, reason) {
            var _this = this;
            this.trace("backupTable '".concat(tableName, "'"));
            return Upgrades.Metamodel.copyMetaInfo(runner, tableName, false)
                .andThen(function (runner) { return _this.dropTableIfExists(runner, _this.getBackupTableName(tableName)); })
                .andThen(function (runner) {
                return _this.renameTableAndSetStatus(runner, tableName, _this.getBackupTableName(tableName), tableName, reason);
            });
        };
        WebSQLStorage.prototype.recoverBackupTable = function (runner, tableName, info, moduleKey) {
            var _this = this;
            var hasBackupTable = true;
            return (this.dropTableIfExists(runner, tableName)
                .andThen(function (runner) {
                return runner.executeScalar("SELECT 1 FROM ".concat(_this.getBackupTableName(tableName)));
            })
                .onError(function (error) {
                if (error) {
                    hasBackupTable = false;
                }
            })
                .andThen(function (runner) {
                if (hasBackupTable) {
                    return _this.renameTableAndSetStatus(runner, _this.getBackupTableName(tableName), tableName, tableName, 0);
                }
            })
                .andThen(function (runner) { return Upgrades.Metamodel.copyMetaInfo(runner, tableName, true); }));
        };
        WebSQLStorage.prototype.dropBackupTable = function (runner, tableName) {
            return this.dropTableIfExists(runner, this.getBackupTableName(tableName))
                .andThen(function (runner) {
                return runner.executeScalar("SELECT Upgrade_Status FROM OSSYS_ENTITY WHERE upper(Physical_Table_name) = '".concat(tableName, "'"));
            })
                .andThen(function (runner, upgradeStatus) {
                return runner.executeNonQuery(upgradeStatus === 1
                    ? "DELETE FROM OSSYS_ENTITY WHERE upper(Physical_Table_name) = '".concat(tableName, "'")
                    : "UPDATE OSSYS_ENTITY SET Upgrade_Status = ".concat(0, " WHERE upper(Physical_Table_name) = '").concat(tableName, "'"));
            })
                .andThen(function (runner) {
                return runner.executeNonQuery("DELETE FROM ".concat(exports.BACKUP_TABLE_PREFIX, "OSSYS_ENTITY WHERE Physical_Table_name = ?"), [
                    tableName,
                ]);
            });
        };
        WebSQLStorage.prototype.renameTableAndSetStatus = function (runner, currentTableName, newTableName, originalTableName, upgradeStatus) {
            var _this = this;
            this.trace("renameTableAndSetStatus '".concat(originalTableName, " to ").concat(newTableName, "'"));
            return this.renameTable(runner, currentTableName, newTableName).andThen(function (runner) {
                return _this.setTableUpgradeStatus(runner, originalTableName, upgradeStatus);
            });
        };
        WebSQLStorage.prototype.renameTable = function (runner, currentTableName, newTableName) {
            return runner.executeNonQuery("ALTER TABLE \"".concat(currentTableName, "\" RENAME TO \"").concat(newTableName, "\""));
        };
        WebSQLStorage.prototype.setTableUpgradeStatus = function (runner, tableName, upgradeStatus) {
            return runner.executeNonQuery("UPDATE OSSYS_ENTITY SET Upgrade_Status = ".concat(upgradeStatus, " WHERE upper(Physical_Table_name) = '").concat(tableName, "'"));
        };
        WebSQLStorage.prototype.getBackupTableName = function (enabledTableName) {
            return exports.BACKUP_TABLE_PREFIX + enabledTableName;
        };
        WebSQLStorage.prototype.executeNonQuery = function (sql, argsList) {
            return this.getDatabase().then(function (db) {
                return db.executeTransaction(function (runner) { return runner.executeNonQuery(sql, argsList && argsList.toArray()); });
            });
        };
        WebSQLStorage.prototype.executeQuery = function (sql, targetListType, readDb, argsList) {
            return this.getDatabase().then(function (db) {
                return db.executeReadTransaction(function (runner) {
                    return runner
                        .executeQueryRaw(sql, argsList && argsList.toArray())
                        .andThen(function (runner, rs) {
                        return DataConversion_1.LocalStorageConverter.from(rs.rows, targetListType, readDb);
                    });
                });
            });
        };
        WebSQLStorage.prototype.rawExecuteQuery = function (sql, conversionFunction, argsList) {
            return this.getDatabase().then(function (db) {
                return db.executeReadTransaction(function (runner) {
                    return runner
                        .executeQueryRaw(sql, argsList && argsList.toArray())
                        .andThen(function (runner, rs) {
                        var result = new Array(rs.rows.length);
                        for (var i = 0; i < rs.rows.length; i++) {
                            var item = rs.rows.item(i);
                            result[i] = conversionFunction(item);
                        }
                        return result;
                    });
                });
            });
        };
        WebSQLStorage.prototype.executeCount = function (sql, argsList) {
            return this.getDatabase().then(function (db) {
                return db.executeReadTransaction(function (runner) {
                    return runner
                        .executeScalar(sql, argsList && argsList.toArray())
                        .andThen(function (runner, dbValue) {
                        return DataConversion_1.LocalStorageConverter.deserializeFromDB(dbValue, Interfaces_1.ClientDB.DBDataType.LONGINTEGER);
                    });
                });
            });
        };
        WebSQLStorage.prototype.rawExecuteScalar = function (sql, argsList) {
            return this.getDatabase().then(function (db) {
                return db.executeReadTransaction(function (runner) {
                    return runner
                        .executeQueryRaw(sql, argsList && argsList.toArray())
                        .andThen(function (runner, rs) {
                        if (rs.rows.length === 0) {
                            return null;
                        }
                        else {
                            return extractScalar(rs.rows.item(0));
                        }
                    });
                });
            });
        };
        WebSQLStorage.prototype.create = function (info, record) {
            var _this = this;
            validateRecordForCreateOrUpdate(info, record, "create");
            return this.getDatabase().then(function (db) {
                return db.executeTransaction(function (runner) {
                    return _this.createInner(runner, info, record, true);
                });
            });
        };
        WebSQLStorage.prototype.createInner = function (runner, info, record, fetchInsertedId) {
            var attrValues = info.insert.getArguments(record);
            return runner
                .executeQueryRaw(info.insert.sql, attrValues.toArray())
                .andThen(function (runner, rs) {
                if (info.getIdAttribute() === null) {
                    return null;
                }
                if (info.idIsAutoNumber === Interfaces_1.ClientDB.AutoNumber.No ||
                    (info.idIsAutoNumber === Interfaces_1.ClientDB.AutoNumber.YesIfEmpty && !info.hasNullId(record))) {
                    fetchInsertedId = false;
                }
                var idType = info.getIdAttribute().type;
                var dataType = DataConversion_1.LocalStorageConverter.convertToModelDataType(idType);
                var result = new (EntityIdOutputTypeFactory.getType(dataType))();
                var id = null;
                if (fetchInsertedId) {
                    id = DataConversion_1.LocalStorageConverter.deserializeFromDB(rs.insertId, idType);
                }
                else {
                    id = info.getIdFromRecord(record);
                }
                result.idOut = id;
                return result;
            });
        };
        WebSQLStorage.prototype.update = function (info, record) {
            validateRecordForCreateOrUpdate(info, record, "update");
            var attrValues = info.update.getArguments(record);
            return this.executeNonQuery(info.update.sql, attrValues);
        };
        WebSQLStorage.prototype.createOrUpdate = function (info, record) {
            var _this = this;
            return this.getDatabase().then(function (db) {
                return db.executeTransaction(function (runner) {
                    return _this.createOrUpdateInner(runner, info, record, true);
                });
            });
        };
        WebSQLStorage.prototype.createOrUpdateInner = function (runner, info, record, fetchInsertedId) {
            validateRecordForCreateOrUpdate(info, record, "create or update");
            if (info.hasNullId(record)) {
                return this.createInner(runner, info, record, true);
            }
            var attrValues = info.upsert.getArguments(record);
            return runner
                .executeQueryRaw(info.upsert.sql, attrValues.toArray())
                .andThen(function (runner, rs) {
                var id = info.getIdFromRecord(record);
                var idType = info.getIdAttribute().type;
                var dataType = DataConversion_1.LocalStorageConverter.convertToModelDataType(idType);
                var result = new (EntityIdOutputTypeFactory.getType(dataType))();
                result.idOut = id;
                return result;
            });
        };
        WebSQLStorage.prototype.createOrUpdateAll = function (info, recordList) {
            var _this = this;
            return this.getDatabase().then(function (db) {
                return db
                    .executeTransaction(function (runner) {
                    if (WebSQLStorage.ForceCreateOrUpdateAllMethod === CreateOrUpdateAllMethod.Bulk ||
                        (WebSQLStorage.ForceCreateOrUpdateAllMethod === CreateOrUpdateAllMethod.Auto &&
                            info.attributes.filter(function (attr) { return attr.type === Interfaces_1.ClientDB.DBDataType.BINARY_DATA; }).length ===
                                0)) {
                        return _this.createOrUpdateAllBulk(runner, info, recordList);
                    }
                    else {
                        return _this.createOrUpdateAllSingle(runner, info, recordList);
                    }
                })
                    .then(ignoreResult);
            });
        };
        WebSQLStorage.prototype.createOrUpdateAllBulk = function (runner, info, recordList) {
            var stuffToDo = [];
            var pushStuff = function (query, parameters) {
                return stuffToDo.push(function (runner) { return runner.executeQueryRaw(query, parameters); });
            };
            var chunkSize = Math.floor(WebSQLStorage.MaxQueryParameters / info.attributes.length);
            if (chunkSize === 0) {
                return this.createOrUpdateAllSingle(runner, info, recordList);
            }
            var chunkCount = Math.ceil(recordList.length / chunkSize);
            for (var i = 0; i < chunkCount; i++) {
                var parameters = [];
                var recordCount = 0;
                while (recordCount < chunkSize) {
                    var idx = i * chunkSize + recordCount;
                    if (idx === recordList.length) {
                        break;
                    }
                    var record = recordList.getItem(idx);
                    validateRecordForCreateOrUpdate(info, record, "create or update");
                    parameters = parameters.concat(info.upsert.getArguments(record).toArray());
                    recordCount++;
                }
                var query = info.upsert.getBulkSql(recordCount);
                pushStuff(query, parameters);
            }
            return runner.feed(null).andThenAll(function (runner) { return stuffToDo; });
        };
        WebSQLStorage.prototype.createOrUpdateAllSingle = function (runner, info, recordList) {
            var _this = this;
            var stuffToDo = [];
            var pushStuff = function (record) {
                return stuffToDo.push(function (runner) { return _this.createOrUpdateInner(runner, info, record, false); });
            };
            for (var i = 0; i < recordList.length; i++) {
                var record = recordList.getItem(i);
                pushStuff(record);
            }
            return runner.feed(null).andThenAll(function (runner) { return stuffToDo; });
        };
        WebSQLStorage.prototype.get = function (info, id) {
            var attr = info.getIdAttribute();
            var argsList = new QueryArgumentsList();
            argsList.add(attr.name, attr.type, id);
            return this.rawExecuteQuery(info.select.sql, info.dbRecordToRecord, argsList).then(function (values) {
                if (values.length === 0) {
                    throw new Exceptions_1.Exceptions.DataBaseException("", "".concat(info.name, " with id ").concat(id, " was not found"));
                }
                else {
                    var result = new (EntityRecordOutputTypeFactory.getType(values[0].constructor))();
                    result.recordOut = values[0];
                    return result;
                }
            });
        };
        WebSQLStorage.prototype.delete = function (info, id) {
            var attr = info.getIdAttribute();
            var argsList = new QueryArgumentsList();
            argsList.add(attr.name, attr.type, id);
            return this.executeNonQuery(info.delete.sql, argsList);
        };
        WebSQLStorage.prototype.deleteAll = function (info) {
            return this.executeNonQuery(info.deleteAll.sql);
        };
        WebSQLStorage.prototype.getBinary = function (info, attrName, id) {
            var _this = this;
            var idAttr = info.getIdAttribute();
            var idName = idAttr.name, idType = idAttr.type;
            var sql = "SELECT \"".concat(attrName, "\" FROM \"").concat(info.tableName, "\" WHERE \"").concat(idName, "\" = ?");
            var argsList = new QueryArgumentsList();
            argsList.add(idName, idType, id);
            return DataConversion_1.LocalStorageConverter.deserializeLazyBinaryFromDB(function () {
                return _this.getDatabase().then(function (db) {
                    return db.executeReadTransaction(function (runner) {
                        return runner.executeScalar(sql, argsList.toArray());
                    });
                });
            });
        };
        WebSQLStorage.prototype.replaceEntityReferencesInOrderBy = function (paramValue, entityNames, entityAliases) {
            var _this = this;
            var ret = null;
            var mc = null;
            var m = null;
            paramValue = paramValue.trim();
            mc = RegExpHelper.matches(paramValue, '(^|\\s|\\.)(\\[|"|)(ossys_|osltm_|oslog_|osevt_|osusr_|osext_)', true);
            if (mc.length > 0) {
                m = mc[0];
                throw new Exceptions_1.Exceptions.DataBaseException("", "'".concat(m.groups[2] + m.groups[3], "' found in 'Order By' parameter is a reserved prefix"));
            }
            if (paramValue !== "") {
                mc = RegExpHelper.matches(paramValue, "((((\\{\\w+\\})|(\\w+)).)?((\\[\\w+\\])|(\\w+))(( )+(desc|asc))?)(( )*,( )*(((\\{\\w+\\})|(\\w+)).)?((\\[\\w+\\])|(\\w+))(( )+(desc|asc))?)*", true);
                if (mc.length !== 1 || mc[0].value !== paramValue) {
                    throw new Exceptions_1.Exceptions.DataBaseException("", "Invalid syntax in 'Order By' parameter.");
                }
            }
            var meReplaceEntityName = function (match) {
                return _this.replaceEntityNameInOrderBy(match, entityNames, entityAliases);
            };
            var meReplaceAttributeName = function (match) {
                return _this.replaceAttributeName(match);
            };
            ret = RegExpHelper.replace(paramValue, "(\\{\\w+\\}|\\w+\\.)", false, meReplaceEntityName);
            ret = RegExpHelper.replace(ret, "(\\[\\w+\\])", false, meReplaceAttributeName);
            return ret;
        };
        WebSQLStorage.prototype.replaceEntityNameInOrderBy = function (m, entityNames, entityAliases) {
            var result = "";
            var entityName = this.getEntityNameFromMatch(m);
            var found = false;
            for (var i = 0; i < entityNames.length; i++) {
                if (entityNames[i].toLowerCase() === entityName.toLowerCase()) {
                    found = true;
                    result = '"' + entityAliases[i] + '"';
                    break;
                }
            }
            if (!found) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "'".concat(entityName, "' found in 'Order By' parameter is an invalid Entity"));
            }
            if (m.value.charAt(m.value.length - 1) === ".") {
                return result + ".";
            }
            else {
                return result;
            }
        };
        WebSQLStorage.prototype.replaceAttributeName = function (m) {
            var result = m.value.substr(1, m.value.length - 2);
            return !result
                ? ""
                : (result.charAt(0) === '"' ? "" : '"') + result + (result.charAt(result.length - 1) === '"' ? "" : '"');
        };
        WebSQLStorage.prototype.getEntityNameFromMatch = function (m) {
            if (m.value.charAt(m.value.length - 1) === ".") {
                return m.value.substr(0, m.value.length - 1);
            }
            else {
                return m.value.substr(1, m.value.length - 2);
            }
        };
        WebSQLStorage.prototype.getOrderByColumnsWithoutDuplicates = function (orderByColumns) {
            return this.filterDuplicateOrderByColumns(orderByColumns).join(", ");
        };
        WebSQLStorage.prototype.filterDuplicateOrderByColumns = function (orderByColumns) {
            var result = new Array();
            var usedColumns = {};
            orderByColumns.forEach(function (col) {
                var trimmed = col.trim();
                if (trimmed !== "") {
                    var invariant = trimmed
                        .replace(new RegExp("\b((ASC)|(DESC))$", "im"), "")
                        .replace('"', "")
                        .replace("[", "")
                        .replace("]", "")
                        .trim()
                        .toLowerCase();
                    if (usedColumns[invariant] !== true) {
                        result.push(trimmed);
                        usedColumns[invariant] = true;
                    }
                }
            });
            return result;
        };
        WebSQLStorage.MaxQueryParameters = 500;
        WebSQLStorage.ForceCreateOrUpdateAllMethod = CreateOrUpdateAllMethod.Auto;
        return WebSQLStorage;
    }());
    exports.WebSQLStorage = WebSQLStorage;
    exports.webSQLStorageInstance = new WebSQLStorage();
    var Entity = (function () {
        function Entity(storage, info, moduleKey) {
            var _this = this;
            this.storage = storage;
            this.info = info;
            this.moduleKey = moduleKey;
            this.getBinary = function (attrName, id, valueMaybe) {
                if (valueMaybe.hasContent()) {
                    return valueMaybe;
                }
                return _this.storage.getBinary(_this.info, attrName, id);
            };
        }
        Entity.prototype.getStorage = function () {
            return this.storage;
        };
        Entity.prototype.getInfo = function () {
            return this.info;
        };
        Entity.prototype.create = function (source) {
            return this.storage.create(this.info, source);
        };
        Entity.prototype.createOrUpdate = function (source) {
            return this.storage.createOrUpdate(this.info, source);
        };
        Entity.prototype.createOrUpdateAll = function (sourceList) {
            return this.storage.createOrUpdateAll(this.info, sourceList);
        };
        Entity.prototype.update = function (source) {
            return this.storage.update(this.info, source);
        };
        Entity.prototype.get = function (id) {
            return this.storage.get(this.info, id);
        };
        Entity.prototype.delete = function (id) {
            return this.storage.delete(this.info, id);
        };
        Entity.prototype.deleteAll = function () {
            return this.storage.deleteAll(this.info);
        };
        return Entity;
    }());
    exports.Entity = Entity;
    function validateRecordForCreateOrUpdate(info, record, operation) {
        var values = info.getAllAttributesFromRecord(record).toArray();
        for (var i = 0; i < info.attributes.length; i++) {
            var attr = info.attributes[i];
            validateValueForCreateOrUpdate(values[i], attr, "".concat(operation, " '").concat(info.name, ".").concat(attr.name, "'"));
        }
    }
    function validateValueForCreateOrUpdate(dbValue, typeInfo, operation) {
        if (typeInfo.type === Interfaces_1.ClientDB.DBDataType.TEXT) {
            if (dbValue === null) {
                return;
            }
            var attrValue = dbValue;
            var lengthDiff = attrValue.length - typeInfo.length;
            if (lengthDiff > 0) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to ".concat(operation, " because it exceeds the maximum allowed length by ").concat(lengthDiff, " characters."));
            }
        }
        else if (typeInfo.type === Interfaces_1.ClientDB.DBDataType.DECIMAL) {
            var attrValue = dbValue;
            var lengthDiff = attrValue.split(".")[0].length - (typeInfo.length - typeInfo.decimals);
            if (lengthDiff > 0) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to ".concat(operation, " because it exceeds the maximum allowed length by ").concat(lengthDiff, " characters."));
            }
        }
    }
    function GetDBDataTypeLabel(dbDataType) {
        switch (dbDataType) {
            case Interfaces_1.ClientDB.DBDataType.TEXT:
                return "Text";
            case Interfaces_1.ClientDB.DBDataType.BINARY_DATA:
                return "Binary Data";
            case Interfaces_1.ClientDB.DBDataType.BOOLEAN:
                return "Boolean";
            case Interfaces_1.ClientDB.DBDataType.INTEGER:
                return "Integer";
            case Interfaces_1.ClientDB.DBDataType.LONGINTEGER:
                return "Long Integer";
            case Interfaces_1.ClientDB.DBDataType.DECIMAL:
                return "Decimal";
            case Interfaces_1.ClientDB.DBDataType.DATE_TIME:
                return "DateTime";
            case Interfaces_1.ClientDB.DBDataType.DATE:
                return "Date";
            case Interfaces_1.ClientDB.DBDataType.TIME:
                return "Time";
            default:
                return "Unknown";
        }
    }
    var QueryArgumentsList = (function () {
        function QueryArgumentsList(skipConversion) {
            this.skipConversion = skipConversion;
            this.argumentList = [];
            this.existingArguments = {};
        }
        QueryArgumentsList.prototype.add = function (argName, argType, argValue, length, decimals, isEntityReference) {
            if (this.existingArguments[argName]) {
                return;
            }
            this.existingArguments[argName] = true;
            if (argValue === undefined) {
                this.argumentList.push(null);
            }
            else {
                var dbValue = void 0;
                if (this.skipConversion) {
                    dbValue = argValue;
                }
                else {
                    dbValue = DataConversion_1.LocalStorageConverter.serializeToDB(argValue, {
                        type: argType,
                        length: length,
                        decimals: decimals,
                        isEntityReference: isEntityReference,
                    });
                }
                this.argumentList.push(dbValue);
            }
        };
        QueryArgumentsList.prototype.toArray = function () {
            return this.argumentList;
        };
        return QueryArgumentsList;
    }());
    exports.QueryArgumentsList = QueryArgumentsList;
});
//# sourceMappingURL=Entities.js.map;
define('OutSystems/ClientRuntime/ErrorHandling',["require", "exports", "./ApplicationInfo", "./Exceptions", "./Logger", "./Navigation", "./StorageProvider"], function (require, exports, ApplicationInfo, Exceptions, Logger, Navigation, StorageProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSpecialHandleErrorResult = exports.ignoreError = exports.defaultErrorHandler = exports.handleError = exports.navigateToAppOffline = exports.navigateToIncompatibleProducer = exports.navigateToErrorPage = exports.ErrorHandlingStorage = exports.IGNORED_ERROR_RESULT = exports.UNHANDLED_ERROR_RESULT = exports.ERROR_PAGE_HTML = void 0;
    exports.ERROR_PAGE_HTML = "_error.html";
    exports.UNHANDLED_ERROR_RESULT = { errorCode: "UNHANDLED" };
    exports.IGNORED_ERROR_RESULT = { errorCode: "IGNORED" };
    var ERROR_HANDLING_MODULE_NAME = "ErrorHandling";
    exports.ErrorHandlingStorage = {
        errorPageMessage: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Session, "ErrorPageMessage", ""),
        errorPageExtraMessage: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Session, "ErrorPageExtraMessage", ""),
        errorPageExceptionInfo: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Session, "ErrorPageExceptionInfo", null),
    };
    function navigateToErrorPage(error, message, extraMessage, callContext) {
        if (message === void 0) { message = ""; }
        if (extraMessage === void 0) { extraMessage = ""; }
        if (!Navigation.hasPendingReload()) {
            if (error) {
                Logger.error(null, error);
            }
            if (Navigation.isValidContext(callContext)) {
                var errorScreenLocation = Navigation.VersionedURL.getVersionedUrl(exports.ERROR_PAGE_HTML);
                exports.ErrorHandlingStorage.errorPageMessage.set(message);
                exports.ErrorHandlingStorage.errorPageExtraMessage.set(extraMessage);
                if (error) {
                    exports.ErrorHandlingStorage.errorPageExceptionInfo.set(Exceptions.getExceptionInfo(error));
                }
                else {
                    exports.ErrorHandlingStorage.errorPageExceptionInfo.remove();
                }
                Navigation.changeWindowLocation(errorScreenLocation);
            }
        }
    }
    exports.navigateToErrorPage = navigateToErrorPage;
    function navigateToIncompatibleProducer(error, callContext) {
        var errorPageConfig = ApplicationInfo.getErrorPageConfig();
        var message = errorPageConfig && errorPageConfig.messages && errorPageConfig.messages.incompatibleProducer;
        navigateToErrorPage(error, message || error.message, undefined, callContext);
    }
    exports.navigateToIncompatibleProducer = navigateToIncompatibleProducer;
    function navigateToAppOffline(callContext) {
        var errorPageConfig = ApplicationInfo.getErrorPageConfig();
        var message = errorPageConfig && errorPageConfig.messages && errorPageConfig.messages.appOffline;
        navigateToErrorPage(undefined, message || "This application is temporarily unavailable. Try reloading or contact the administrator.", undefined, callContext);
    }
    exports.navigateToAppOffline = navigateToAppOffline;
    function handleError(error, callContext) {
        Logger.trace(ERROR_HANDLING_MODULE_NAME, "Error thrown by the application: " + error);
        if (Exceptions.isApplicationOffline(error)) {
            navigateToAppOffline(callContext);
        }
        else if (Exceptions.isInstanceOf(error, Exceptions.Exceptions.IncompatibleProducerException)) {
            navigateToIncompatibleProducer(error, callContext);
        }
        else {
            navigateToErrorPage(error, undefined, undefined, callContext);
        }
    }
    exports.handleError = handleError;
    function defaultErrorHandler(error, callContext, handleErrorCall, ignoreErrorCall) {
        if (handleErrorCall === void 0) { handleErrorCall = function (error, callContext) { return handleError(error, callContext); }; }
        if (ignoreErrorCall === void 0) { ignoreErrorCall = function (error, callContext) { return ignoreError(error, callContext); }; }
        Logger.trace("ErrorHandling", Exceptions.getMessage(error));
        if (!ignoreErrorCall(error, callContext)) {
            handleErrorCall(error, callContext);
            return exports.UNHANDLED_ERROR_RESULT;
        }
        return exports.IGNORED_ERROR_RESULT;
    }
    exports.defaultErrorHandler = defaultErrorHandler;
    function ignoreError(error, callContext) {
        if (Exceptions.isInstanceOf(error, Exceptions.Exceptions.IgnorableSystemException)) {
            return true;
        }
        if (Exceptions.isApplicationOffline(error)) {
            navigateToAppOffline(callContext);
            return true;
        }
        return false;
    }
    exports.ignoreError = ignoreError;
    function isSpecialHandleErrorResult(target) {
        return target === exports.UNHANDLED_ERROR_RESULT || target === exports.IGNORED_ERROR_RESULT;
    }
    exports.isSpecialHandleErrorResult = isSpecialHandleErrorResult;
});
//# sourceMappingURL=ErrorHandling.js.map;
define('OutSystems/ClientRuntime/FeedbackMessageService',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.closeFeedbackMessage = exports.showFeedbackMessage = exports.setEnabled = exports.registerFeedbackMessageService = void 0;
    var feedbackMessageService;
    var onServiceRegistered;
    var isServiceEnabled = true;
    function registerFeedbackMessageService(service) {
        feedbackMessageService = service;
        if (onServiceRegistered) {
            onServiceRegistered();
            onServiceRegistered = null;
        }
    }
    exports.registerFeedbackMessageService = registerFeedbackMessageService;
    function setEnabled(enabled) {
        isServiceEnabled = enabled;
    }
    exports.setEnabled = setEnabled;
    function showFeedbackMessage(message, messageType, encodeHTML, extraCssClasses, closeOnClick, onClick) {
        if (encodeHTML === void 0) { encodeHTML = true; }
        if (extraCssClasses === void 0) { extraCssClasses = ""; }
        if (closeOnClick === void 0) { closeOnClick = true; }
        if (!isServiceEnabled) {
            return;
        }
        var show = function () {
            return feedbackMessageService.showMessage(message, messageType, encodeHTML, extraCssClasses, closeOnClick, onClick);
        };
        if (feedbackMessageService) {
            show();
        }
        else {
            onServiceRegistered = show;
        }
    }
    exports.showFeedbackMessage = showFeedbackMessage;
    function closeFeedbackMessage() {
        if (!isServiceEnabled) {
            return;
        }
        var close = function () { return feedbackMessageService.closeMessage(); };
        if (feedbackMessageService) {
            close();
        }
        else {
            onServiceRegistered = null;
        }
    }
    exports.closeFeedbackMessage = closeFeedbackMessage;
});
//# sourceMappingURL=FeedbackMessageService.js.map;
define('OutSystems/ClientRuntime/modules/PubSub/Publisher',["require", "exports", "../../Logger"], function (require, exports, Logger) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NULL_ARGUMENT_HANDLER_ERROR_MESSAGE = "Argument 'handler' cannot be null or undefined";
    var Publisher = (function () {
        function Publisher(moduleName, context) {
            this.moduleName = moduleName;
            this.context = context;
            this.subscribers = [];
        }
        Publisher.prototype.subscribe = function (handler, context) {
            if (!handler) {
                throw new Error(NULL_ARGUMENT_HANDLER_ERROR_MESSAGE);
            }
            for (var i = 0; i < this.subscribers.length; i++) {
                if (this.subscribers[i] === handler) {
                    return false;
                }
            }
            this.subscribers.push(handler);
            Logger.trace(this.moduleName, "Subscribing handler for ".concat(context));
            return true;
        };
        Publisher.prototype.unsubscribe = function (handler, context) {
            if (!handler) {
                throw new Error(NULL_ARGUMENT_HANDLER_ERROR_MESSAGE);
            }
            for (var i = 0; i < this.subscribers.length; i++) {
                if (this.subscribers[i] === handler) {
                    this.subscribers.splice(i, 1);
                    Logger.trace(this.moduleName, "Unsubscribing handler for ".concat(context));
                    return true;
                }
            }
            return false;
        };
        Publisher.prototype.publish = function (message) {
            for (var _i = 0, _a = this.subscribers; _i < _a.length; _i++) {
                var handler = _a[_i];
                handler(message);
            }
            Logger.trace(this.moduleName, "Notifying subscribers for ".concat(this.context));
        };
        return Publisher;
    }());
    exports.default = Publisher;
});
//# sourceMappingURL=Publisher.js.map;
define('OutSystems/ClientRuntime/modules/ClientVariables/LocalStorageSerializer',["require", "exports", "../../DataTypes"], function (require, exports, DataTypes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deserialize = exports.serialize = void 0;
    var BOOLEAN_TRUE_SERIALIZED = "true";
    var BOOLEAN_FALSE_SERIALIZED = "false";
    function unsupportedTypeMessage(type) {
        return "Unsupported data type (".concat(type, ") for client variable");
    }
    function isValueMatchingType(value, type) {
        switch (type) {
            case DataTypes_1.DataTypes.Integer:
                return DataTypes_1.TypeValidations.isValidInteger(value);
            case DataTypes_1.DataTypes.LongInteger:
                return DataTypes_1.TypeValidations.isValidLongInteger(value);
            case DataTypes_1.DataTypes.Decimal:
            case DataTypes_1.DataTypes.Currency:
                return DataTypes_1.TypeValidations.isValidDecimal(value);
            case DataTypes_1.DataTypes.Boolean:
                return DataTypes_1.TypeValidations.isBoolean(value);
            case DataTypes_1.DataTypes.Text:
            case DataTypes_1.DataTypes.PhoneNumber:
            case DataTypes_1.DataTypes.Email:
                return DataTypes_1.TypeValidations.isText(value);
            case DataTypes_1.DataTypes.Date:
                return DataTypes_1.TypeValidations.isValidDate(value);
            case DataTypes_1.DataTypes.DateTime:
                return DataTypes_1.TypeValidations.isValidDateTime(value);
            case DataTypes_1.DataTypes.Time:
                return DataTypes_1.TypeValidations.isValidTime(value);
            default:
                var typeName = (0, DataTypes_1.mapDataTypeToName)(type);
                var formattedErrorMessage = unsupportedTypeMessage(typeName);
                throw new TypeError(formattedErrorMessage);
        }
    }
    function serialize(value, type) {
        if (value === undefined || value === null) {
            throw new TypeError("Value ".concat(value, " is not a valid value for a client variable."));
        }
        if (!isValueMatchingType(value, type)) {
            var typeName = (0, DataTypes_1.mapDataTypeToName)(type);
            throw new TypeError("Value ".concat(value, " is not a valid value for a client variable of the specified type (").concat(typeName, ")."));
        }
        switch (type) {
            case DataTypes_1.DataTypes.Integer:
            case DataTypes_1.DataTypes.LongInteger:
            case DataTypes_1.DataTypes.Decimal:
            case DataTypes_1.DataTypes.Currency:
                return value.toString();
            case DataTypes_1.DataTypes.Boolean:
                return value ? BOOLEAN_TRUE_SERIALIZED : BOOLEAN_FALSE_SERIALIZED;
            case DataTypes_1.DataTypes.Text:
            case DataTypes_1.DataTypes.PhoneNumber:
            case DataTypes_1.DataTypes.Email:
                return value;
            case DataTypes_1.DataTypes.Date:
                return value.toISODate();
            case DataTypes_1.DataTypes.DateTime:
                return value.toString();
            case DataTypes_1.DataTypes.Time:
                return value.toISOTime();
            default:
                throw new TypeError(unsupportedTypeMessage("".concat(type)));
        }
    }
    exports.serialize = serialize;
    function deserialize(value, type) {
        switch (type) {
            case DataTypes_1.DataTypes.Integer:
                var integer = Number(value);
                return !(DataTypes_1.TypeValidations.isValidInteger(integer) && DataTypes_1.TypeValidations.isWithinIntegerRange(integer))
                    ? DataTypes_1.Constants.DEFAULT_INTEGER
                    : integer;
            case DataTypes_1.DataTypes.LongInteger:
                if (!value) {
                    return DataTypes_1.Constants.DEFAULT_LONGINTEGER;
                }
                var longInteger = DataTypes_1.LongInteger.fromString(value);
                return !DataTypes_1.TypeValidations.isValidLongInteger(longInteger) ? DataTypes_1.Constants.DEFAULT_LONGINTEGER : longInteger;
            case DataTypes_1.DataTypes.Decimal:
                if (!value) {
                    return DataTypes_1.Constants.DEFAULT_DECIMAL;
                }
                var decimal = new DataTypes_1.Decimal(value);
                return !(DataTypes_1.TypeValidations.isValidDecimal(decimal) && DataTypes_1.TypeValidations.isWithinDecimalRange(decimal))
                    ? DataTypes_1.Constants.DEFAULT_DECIMAL
                    : decimal;
            case DataTypes_1.DataTypes.Currency:
                if (!value) {
                    return DataTypes_1.Constants.DEFAULT_CURRENCY;
                }
                var currency = new DataTypes_1.Decimal(value);
                return !(DataTypes_1.TypeValidations.isValidDecimal(currency) && DataTypes_1.TypeValidations.isWithinDecimalRange(currency))
                    ? DataTypes_1.Constants.DEFAULT_CURRENCY
                    : currency;
            case DataTypes_1.DataTypes.Boolean:
                if (value === BOOLEAN_TRUE_SERIALIZED) {
                    return true;
                }
                else if (value === BOOLEAN_FALSE_SERIALIZED) {
                    return false;
                }
                else {
                    return DataTypes_1.Constants.DEFAULT_BOOLEAN;
                }
            case DataTypes_1.DataTypes.Text:
                return !DataTypes_1.TypeValidations.isText(value) ? DataTypes_1.Constants.DEFAULT_TEXT : value;
            case DataTypes_1.DataTypes.PhoneNumber:
                return !DataTypes_1.TypeValidations.isText(value) ? DataTypes_1.Constants.DEFAULT_PHONENUMBER : value;
            case DataTypes_1.DataTypes.Email:
                return !DataTypes_1.TypeValidations.isText(value) ? DataTypes_1.Constants.DEFAULT_EMAIL : value;
            case DataTypes_1.DataTypes.Date:
                var date = DataTypes_1.DateTime.fromISODate(value);
                return !DataTypes_1.TypeValidations.isValidDate(date) ? DataTypes_1.Constants.DEFAULT_DATE : date;
            case DataTypes_1.DataTypes.DateTime:
                var dateTime = DataTypes_1.DateTime.fromISODateTime(value);
                return !DataTypes_1.TypeValidations.isValidDateTime(dateTime) ? DataTypes_1.Constants.DEFAULT_DATETIME : dateTime;
            case DataTypes_1.DataTypes.Time:
                var time = DataTypes_1.DateTime.fromISOTime(value);
                return !DataTypes_1.TypeValidations.isValidTime(time) ? DataTypes_1.Constants.DEFAULT_TIME : time;
            case DataTypes_1.DataTypes.Record:
                throw new TypeError(unsupportedTypeMessage("Record"));
            case DataTypes_1.DataTypes.RecordList:
                throw new TypeError(unsupportedTypeMessage("List"));
            case DataTypes_1.DataTypes.BinaryData:
                throw new TypeError(unsupportedTypeMessage("Binary Data"));
            case DataTypes_1.DataTypes.Object:
                throw new TypeError(unsupportedTypeMessage("Object"));
            default:
                throw new TypeError(unsupportedTypeMessage("Unknown: ".concat(value)));
        }
    }
    exports.deserialize = deserialize;
});
//# sourceMappingURL=LocalStorageSerializer.js.map;
define('OutSystems/ClientRuntime/modules/ClientVariables/LocalStorageClientVariablesService',["require", "exports", "../../DataTypes", "../../Logger", "../../RegExpHelper", "../../RolesInfo", "../PubSub/Publisher", "../Storage/StorageNaming", "./LocalStorageSerializer"], function (require, exports, DataTypes_1, Logger, RegExpHelper_1, RolesInfo_1, Publisher_1, StorageNaming_1, LocalStorageSerializer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CLIENT_VARIABLES_MODULE_NAME = "Client Variables";
    var NULL_ARGUMENT_HANDLER_ERROR_MESSAGE = "Argument 'handler' cannot be null or undefined";
    var SESSION_USER_ID = "$SESSION_USER_ID";
    function isNullOrUndefined(value) {
        return value === undefined || value === null;
    }
    var LocalStorageClientVariablesService = (function () {
        function LocalStorageClientVariablesService(namespace) {
            this.namespace = namespace;
            this.fullKeyMatcher = null;
            this.publisher = new Publisher_1.default(CLIENT_VARIABLES_MODULE_NAME, namespace);
            this.fullKeyMatcher = new RegExp("^".concat((0, RegExpHelper_1.escape)(StorageNaming_1.OS_STORAGE_PREFIX)).concat((0, RegExpHelper_1.escape)(this.namespace), "\\$[^$]*\\$ClientVars\\$"));
            this.checkSessionExpires();
            this.innerSetVariable(SESSION_USER_ID, "", DataTypes_1.DataTypes.Integer, (0, RolesInfo_1.getUserId)());
        }
        LocalStorageClientVariablesService.prototype.subscribe = function (handler, context) {
            return this.publisher.subscribe(handler, context);
        };
        LocalStorageClientVariablesService.prototype.unsubscribe = function (handler, context) {
            return this.publisher.unsubscribe(handler, context);
        };
        LocalStorageClientVariablesService.prototype.getFullKey = function (key, module) {
            return "".concat(StorageNaming_1.OS_STORAGE_PREFIX).concat(this.namespace, "$").concat(module, "$ClientVars$").concat(key);
        };
        LocalStorageClientVariablesService.prototype.getVariable = function (key, module, type, defaultValue) {
            this.checkSessionExpires();
            return this.innerGetVariable(key, module, type, defaultValue);
        };
        LocalStorageClientVariablesService.prototype.innerGetVariable = function (key, module, type, defaultValue) {
            var savedValue = window.localStorage.getItem(this.getFullKey(key, module));
            Logger.trace(CLIENT_VARIABLES_MODULE_NAME, "Reading Client Variable ".concat(key, " of module ").concat(module, " for ").concat(this.namespace));
            if (isNullOrUndefined(savedValue)) {
                return isNullOrUndefined(defaultValue) ? (0, DataTypes_1.defaultForType)(type) : defaultValue;
            }
            return (0, LocalStorageSerializer_1.deserialize)(savedValue, type);
        };
        LocalStorageClientVariablesService.prototype.setVariable = function (key, module, type, value) {
            this.checkSessionExpires();
            this.innerSetVariable(key, module, type, value);
            this.publisher.publish({ key: key, module: module, value: value });
        };
        LocalStorageClientVariablesService.prototype.innerSetVariable = function (key, module, type, value) {
            window.localStorage.setItem(this.getFullKey(key, module), (0, LocalStorageSerializer_1.serialize)(value, type));
            Logger.trace(CLIENT_VARIABLES_MODULE_NAME, "Set Client Variable ".concat(key, " of module ").concat(module, " for ").concat(this.namespace));
        };
        LocalStorageClientVariablesService.prototype.removeAllVariables = function () {
            var allVariableKeys = [];
            for (var i = 0; i < window.localStorage.length; i++) {
                var key = window.localStorage.key(i);
                if (this.fullKeyMatcher.test(key)) {
                    allVariableKeys.push(key);
                }
            }
            if (allVariableKeys.length > 0) {
                for (var _i = 0, allVariableKeys_1 = allVariableKeys; _i < allVariableKeys_1.length; _i++) {
                    var key = allVariableKeys_1[_i];
                    window.localStorage.removeItem(key);
                }
                this.publisher.publish();
            }
        };
        LocalStorageClientVariablesService.prototype.checkSessionExpires = function () {
            var userId = this.innerGetVariable(SESSION_USER_ID, "", DataTypes_1.DataTypes.Integer);
            if ((0, RolesInfo_1.getUserId)() !== userId) {
                if (userId !== 0) {
                    Logger.trace(CLIENT_VARIABLES_MODULE_NAME, "Removing all Client Variables for user provider ".concat(this.namespace));
                    this.removeAllVariables();
                }
                this.innerSetVariable(SESSION_USER_ID, "", DataTypes_1.DataTypes.Integer, (0, RolesInfo_1.getUserId)());
            }
        };
        return LocalStorageClientVariablesService;
    }());
    exports.default = LocalStorageClientVariablesService;
});
//# sourceMappingURL=LocalStorageClientVariablesService.js.map;
define('OutSystems/ClientRuntime/modules/Database/IDatabase',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instanceOfIDatabase = void 0;
    function instanceOfIDatabase(object) {
        return ("name" in object &&
            "registerInitializer" in object &&
            "initialize" in object &&
            "initializerCleanup" in object &&
            "testConnection" in object &&
            "close" in object &&
            "executeReadTransaction" in object &&
            "executeTransaction" in object &&
            "executeUpgradeTransaction" in object);
    }
    exports.instanceOfIDatabase = instanceOfIDatabase;
});
//# sourceMappingURL=IDatabase.js.map;
define('OutSystems/ClientRuntime/modules/Database/Common/Database',["require", "exports", "tslib", "../../../Exceptions"], function (require, exports, tslib_1, Exceptions_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Database = (function () {
        function Database(databaseName) {
            this.databaseName = databaseName;
            this.isInitialized = false;
            this.allInitializers = [];
            this.initializersToRun = [];
        }
        Object.defineProperty(Database.prototype, "name", {
            get: function () {
                return this.databaseName;
            },
            enumerable: false,
            configurable: true
        });
        Database.prototype.registerInitializer = function (initializer) {
            if (this.isInitialized) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Cannot register a database initializer on the already initialized database '".concat(this.name, "'"));
            }
            this.allInitializers.push(initializer);
        };
        Database.prototype.initialize = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.isInitialized) {
                                throw new Exceptions_1.Exceptions.DataBaseException("", "Cannot initialize the already initialized database '".concat(this.name, "'"));
                            }
                            this.markInitialized();
                            return [4, this.identifyNeededInitializers()];
                        case 1:
                            _a.sent();
                            return [4, this.runNeededInitializers()];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Database.prototype.initializerCleanup = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.isInitialized) {
                                throw new Exceptions_1.Exceptions.DataBaseException("", "Cannot perform database initializer cleanup on the non-initialized database '".concat(this.name, "'"));
                            }
                            return [4, this.cleanupNeededInitializers()];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        Database.prototype.identifyNeededInitializers = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.allInitializers && this.allInitializers.length > 0)) return [3, 2];
                            return [4, this.executeReadTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var _i, _a, initializer;
                                    return tslib_1.__generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                _i = 0, _a = this.allInitializers;
                                                _b.label = 1;
                                            case 1:
                                                if (!(_i < _a.length)) return [3, 4];
                                                initializer = _a[_i];
                                                return [4, initializer.isNeeded(tx)];
                                            case 2:
                                                if (_b.sent()) {
                                                    this.initializersToRun.push(initializer);
                                                }
                                                _b.label = 3;
                                            case 3:
                                                _i++;
                                                return [3, 1];
                                            case 4: return [2];
                                        }
                                    });
                                }); })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.releaseUnneededInitializers();
                            return [2];
                    }
                });
            });
        };
        Database.prototype.runNeededInitializers = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.initializersToRun.length > 0)) return [3, 2];
                            return [4, this.executeUpgradeTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var _i, _a, initializer;
                                    return tslib_1.__generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                _i = 0, _a = this.initializersToRun;
                                                _b.label = 1;
                                            case 1:
                                                if (!(_i < _a.length)) return [3, 4];
                                                initializer = _a[_i];
                                                return [4, initializer.run(tx)];
                                            case 2:
                                                _b.sent();
                                                _b.label = 3;
                                            case 3:
                                                _i++;
                                                return [3, 1];
                                            case 4: return [2];
                                        }
                                    });
                                }); })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2];
                    }
                });
            });
        };
        Database.prototype.cleanupNeededInitializers = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.initializersToRun.length > 0)) return [3, 2];
                            return [4, this.executeUpgradeTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var _i, _a, initializer;
                                    return tslib_1.__generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                _i = 0, _a = this.initializersToRun;
                                                _b.label = 1;
                                            case 1:
                                                if (!(_i < _a.length)) return [3, 4];
                                                initializer = _a[_i];
                                                if (!initializer.cleanup) return [3, 3];
                                                return [4, initializer.cleanup(tx)];
                                            case 2:
                                                _b.sent();
                                                _b.label = 3;
                                            case 3:
                                                _i++;
                                                return [3, 1];
                                            case 4: return [2];
                                        }
                                    });
                                }); })];
                        case 1:
                            _a.sent();
                            this.releaseNeededInitializers();
                            _a.label = 2;
                        case 2: return [2];
                    }
                });
            });
        };
        Database.prototype.markInitialized = function () {
            this.isInitialized = true;
        };
        Database.prototype.releaseUnneededInitializers = function () {
            this.allInitializers = [];
        };
        Database.prototype.releaseNeededInitializers = function () {
            this.initializersToRun = [];
        };
        return Database;
    }());
    exports.default = Database;
});
//# sourceMappingURL=Database.js.map;
define('OutSystems/ClientRuntime/modules/Database/TableInfoUtils',["require", "exports", "../../DataTypes"], function (require, exports, DataTypes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasNullIdentifier = exports.getIdentifierValue = exports.getIdentifierAttribute = exports.getIdentifierColumnNames = exports.getIdentifierColumns = exports.getIdentifierColumn = exports.getMatchingColumn = exports.formatObjectName = exports.METADATA_TABLE_NAME = exports.BACKUP_TABLE_PREFIX = void 0;
    exports.BACKUP_TABLE_PREFIX = "BACKUP_";
    exports.METADATA_TABLE_NAME = "OSSYS_ENTITY";
    function formatObjectName(objectName) {
        return objectName ? objectName.toUpperCase() : objectName;
    }
    exports.formatObjectName = formatObjectName;
    function getMatchingColumn(table, attribute) {
        return table.attributes.filter(function (col) { return col.name === attribute.name; })[0] || null;
    }
    exports.getMatchingColumn = getMatchingColumn;
    function getIdentifierColumn(table) {
        return getIdentifierColumns(table)[0] || null;
    }
    exports.getIdentifierColumn = getIdentifierColumn;
    function getIdentifierColumns(table) {
        return table.attributes.filter(function (column) { return column.isPrimaryKey; });
    }
    exports.getIdentifierColumns = getIdentifierColumns;
    function getIdentifierColumnNames(table) {
        var tableComposedKey = getIdentifierColumns(table);
        return tableComposedKey.length > 0 ? tableComposedKey.map(function (attr) { return attr.columnName; }) : null;
    }
    exports.getIdentifierColumnNames = getIdentifierColumnNames;
    function getIdentifierAttribute(info, recordOrType) {
        var idColumn = getIdentifierColumn(info);
        if (!idColumn) {
            return null;
        }
        return recordOrType.getAttributes().filter(function (attr) { return attr.name === idColumn.name; })[0] || null;
    }
    exports.getIdentifierAttribute = getIdentifierAttribute;
    function getIdentifierValue(info, record) {
        var idColumn = getIdentifierColumn(info);
        if (!idColumn) {
            return null;
        }
        var idAttr = record.getAttributes().filter(function (attr) { return attr.name === idColumn.name; })[0];
        return idAttr ? record[idAttr.attrName] : null;
    }
    exports.getIdentifierValue = getIdentifierValue;
    function hasNullIdentifier(info, record) {
        var idColumn = getIdentifierColumn(info);
        if (!idColumn) {
            return true;
        }
        var idAttr = record.getAttributes().filter(function (attr) { return attr.name === idColumn.name; })[0];
        return idAttr ? (0, DataTypes_1.equals)(record[idAttr.attrName], (0, DataTypes_1.defaultForType)(idAttr.dataType)) : true;
    }
    exports.hasNullIdentifier = hasNullIdentifier;
});
//# sourceMappingURL=TableInfoUtils.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/IndexedDBTransactionWithoutObjectStores',["require", "exports", "tslib", "../../../Logger", "../TableInfoUtils"], function (require, exports, tslib_1, Logger, TableInfoUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IndexedDBTransactionWithoutObjectStores = (function () {
        function IndexedDBTransactionWithoutObjectStores(allowTraces, database) {
            this.allowTraces = allowTraces;
            this.database = database;
            if (this.allowTraces) {
                Logger.trace(this, "Starting transaction ".concat(this.transactionId, " over ").concat(database.objectStoreNames.length, " store(s)"));
            }
        }
        IndexedDBTransactionWithoutObjectStores.prototype.createTable = function (table) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.trace("Creating table '".concat(table.tableName, "'"));
                var primaryColumns = TableInfoUtils.getIdentifierColumnNames(table);
                var store = _this.database.createObjectStore(table.tableName, {
                    autoIncrement: !primaryColumns,
                    keyPath: primaryColumns,
                });
                _this.trace("Creating columns for '".concat(table.tableName, "' table"));
                for (var i = 0; i < table.attributes.length; i++) {
                    _this.trace("Creating column '".concat(table.attributes[i].name, "'"));
                    store.createIndex(table.attributes[i].columnName, table.attributes[i].columnName);
                }
                resolve();
            });
        };
        IndexedDBTransactionWithoutObjectStores.prototype.deleteTableIfExists = function (table) {
            var _this = this;
            var tableName;
            if (typeof table === "string") {
                tableName = table;
            }
            else {
                tableName = table.tableName;
            }
            return new Promise(function (resolve, reject) {
                _this.trace("Deleting table '".concat(tableName, "'"));
                if (!_this.database.objectStoreNames.contains(tableName)) {
                    _this.trace("Table '".concat(tableName, "' does not exist"));
                    return resolve();
                }
                try {
                    _this.database.deleteObjectStore(tableName);
                    _this.trace("Table '".concat(tableName, "' deleted successfuly"));
                }
                catch (error) {
                    _this.trace("Error deleting table '".concat(tableName, "'"), error);
                    return reject(error);
                }
                resolve();
            });
        };
        IndexedDBTransactionWithoutObjectStores.prototype.existsTable = function (table) {
            var tableName = typeof table === "string" ? table : table.tableName;
            return Promise.resolve(this.database.objectStoreNames.contains(tableName));
        };
        IndexedDBTransactionWithoutObjectStores.prototype.renameTable = function (tableName, newTableName) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.addColumn = function (table, column) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.existsColumn = function (tableName, columnName) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    throw new Error("You can't execute this method on a database without object stores.");
                });
            });
        };
        IndexedDBTransactionWithoutObjectStores.prototype.getRecord = function (table, key) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.insertRecord = function (table, record) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.updateRecord = function (table, record) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.upsertRecord = function (table, record) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.upsertAllRecords = function (table, records) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.removeRecord = function (table, key) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.removeAllRecords = function (table) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.findRecords = function (table, criteria) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.getAllRecords = function (table) {
            throw new Error("You can't execute this method on a database without object stores.");
        };
        IndexedDBTransactionWithoutObjectStores.prototype.trace = function (message, error) {
            if (this.allowTraces) {
                Logger.trace(this, "".concat(message, " on transaction ").concat(this.transactionId).concat(error ? ": ".concat(error.message) : ""));
            }
        };
        return IndexedDBTransactionWithoutObjectStores;
    }());
    exports.default = IndexedDBTransactionWithoutObjectStores;
});
//# sourceMappingURL=IndexedDBTransactionWithoutObjectStores.js.map;
define('OutSystems/ClientRuntime/modules/Database/EntityInfoUtils',["require", "exports", "../../Exceptions", "../../RegExpHelper"], function (require, exports, Exceptions_1, RegExpHelper) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDynamicSortList = void 0;
    function getEntityNameFromMatch(m) {
        if (m.value.charAt(m.value.length - 1) === ".") {
            return m.value.substr(0, m.value.length - 1);
        }
        else {
            return m.value.substr(1, m.value.length - 2);
        }
    }
    function replaceEntityNameInOrderBy(m, entityNames) {
        var entityName = getEntityNameFromMatch(m);
        var result = entityNames.some(function (currEntity) { return currEntity.toLowerCase() === entityName.toLowerCase(); })
            ? entityName
            : "";
        if (result === "") {
            throw new Exceptions_1.Exceptions.DataBaseException("", "'".concat(entityName, "' found in 'Order By' parameter is an invalid Entity"));
        }
        if (m.value.charAt(m.value.length - 1) === ".") {
            return result + ".";
        }
        else {
            return result;
        }
    }
    function getDynamicSortList(paramValue, entityNames) {
        var ret = null;
        var cleanValue = paramValue.trim();
        if (cleanValue !== "") {
            var matches = RegExpHelper.matches(cleanValue, "((((\\{\\w+\\})|(\\w+)).)?((\\[\\w+\\])|(\\w+))(( )+(desc|asc))?)(( )*,( )*(((\\{\\w+\\})|(\\w+)).)?((\\[\\w+\\])|(\\w+))(( )+(desc|asc))?)*", true);
            if (matches.length !== 1 || matches[0].value !== cleanValue) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Invalid syntax in 'Order By' parameter.");
            }
        }
        else {
            return [];
        }
        var meReplaceEntityName = function (match) {
            return replaceEntityNameInOrderBy(match, entityNames);
        };
        var meReplaceAttributeName = function (match) {
            return match.value.substr(1, match.value.length - 2);
        };
        ret = RegExpHelper.replace(cleanValue, "(\\{\\w+\\}|\\w+\\.)", false, meReplaceEntityName);
        ret = RegExpHelper.replace(ret, "(\\[\\w+\\])", false, meReplaceAttributeName);
        var sortsList = ret.split(/, ?/);
        return sortsList.map(function (sort) {
            var parts = sort.trim().split(" ");
            var ascending = parts.length === 2 ? parts[1].toLowerCase() === "asc" : true;
            var attrParts = parts[0].split(".");
            return {
                attributeParts: attrParts,
                isAscending: ascending,
            };
        });
    }
    exports.getDynamicSortList = getDynamicSortList;
});
//# sourceMappingURL=EntityInfoUtils.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/IndexedDBUtils',["require", "exports", "tslib", "../../../DataTypes", "../../../Exceptions", "../EntityInfoUtils"], function (require, exports, tslib_1, DataTypes_1, Exceptions_1, EntityInfoUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDynamicSortsObjGenerator = exports.loadBinaryDataContent = exports.markEventAsHandled = void 0;
    function markEventAsHandled(event) {
        event.stopPropagation();
        event.preventDefault();
    }
    exports.markEventAsHandled = markEventAsHandled;
    function loadBinaryDataContent(dataToLoad) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var i, listItem;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(dataToLoad instanceof DataTypes_1.List)) return [3, 5];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < dataToLoad.length)) return [3, 4];
                        listItem = dataToLoad.getItem(i);
                        return [4, loadItemContent(listItem)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3, 1];
                    case 4: return [3, 7];
                    case 5:
                        if (!(dataToLoad instanceof DataTypes_1.GenericRecord)) return [3, 7];
                        return [4, loadItemContent(dataToLoad)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: return [2];
                }
            });
        });
    }
    exports.loadBinaryDataContent = loadBinaryDataContent;
    function loadItemContent(listItem) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var itemAttributes, loadContentOperations;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        itemAttributes = listItem.getAttributes();
                        loadContentOperations = itemAttributes.map(function (attribute) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var itemData, itemBinaryData;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        itemData = listItem[attribute.attrName];
                                        if (!(attribute.dataType === DataTypes_1.DataTypes.Record)) return [3, 2];
                                        return [4, loadItemContent(itemData)];
                                    case 1:
                                        _a.sent();
                                        return [3, 4];
                                    case 2:
                                        if (!(attribute.dataType === DataTypes_1.DataTypes.BinaryData)) return [3, 4];
                                        itemBinaryData = itemData;
                                        return [4, itemBinaryData.loadContent()];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [2];
                                }
                            });
                        }); });
                        return [4, Promise.all(loadContentOperations)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    }
    function toRuntimeName(name) {
        return name.charAt(0).toLowerCase() + name.substr(1) + "Attr";
    }
    function getDynamicSortsObjGenerator(paramValue, entityNames) {
        var sorts = EntityInfoUtils.getDynamicSortList(paramValue, entityNames);
        return function (element) {
            return sorts.map(function (sort) {
                var value = element;
                var _loop_1 = function (i) {
                    var prop = toRuntimeName(sort.attributeParts[i]).toLowerCase();
                    var attr = value.getAttributes().filter(function (attr) { return attr.attrName.toLowerCase() === prop; });
                    if (attr.length === 0) {
                        throw new Exceptions_1.Exceptions.DataBaseException("", "Invalid attribute in 'Order By' parameter: ".concat(sort.attributeParts.join(".")));
                    }
                    value = value[attr[0].attrName];
                };
                for (var i = 0; i < sort.attributeParts.length; i++) {
                    _loop_1(i);
                }
                return {
                    value: value,
                    isAscending: sort.isAscending,
                };
            });
        };
    }
    exports.getDynamicSortsObjGenerator = getDynamicSortsObjGenerator;
});
//# sourceMappingURL=IndexedDBUtils.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/IndexedDBTransaction',["require", "exports", "tslib", "../../../Logger", "../TableInfoUtils", "./IndexedDBTransactionWithoutObjectStores", "./IndexedDBUtils"], function (require, exports, tslib_1, Logger, TableInfoUtils, IndexedDBTransactionWithoutObjectStores_1, IndexedDBUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var TRANSACTION_ID_MAX = 1000000000000;
    var IndexedDBTransaction = (function (_super) {
        tslib_1.__extends(IndexedDBTransaction, _super);
        function IndexedDBTransaction(allowTraces, transaction, database) {
            var _this = _super.call(this, allowTraces, database) || this;
            _this.transaction = transaction;
            IndexedDBTransaction.lastTransactionId = (IndexedDBTransaction.lastTransactionId + 1) % TRANSACTION_ID_MAX;
            _this.transactionId = IndexedDBTransaction.lastTransactionId + 1;
            return _this;
        }
        Object.defineProperty(IndexedDBTransaction.prototype, "onComplete", {
            set: function (handler) {
                var _this = this;
                this.transaction.oncomplete = function () {
                    if (_this.allowTraces) {
                        Logger.trace(_this, "Committing transaction ".concat(_this.transactionId));
                    }
                    return handler();
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(IndexedDBTransaction.prototype, "onAbort", {
            set: function (handler) {
                var _this = this;
                this.transaction.onabort = function () {
                    if (_this.allowTraces) {
                        Logger.trace(_this, "Aborting transaction ".concat(_this.transactionId, ": ").concat(_this.transaction.error));
                    }
                    return handler(_this.transaction.error);
                };
            },
            enumerable: false,
            configurable: true
        });
        IndexedDBTransaction.prototype.executeQuery = function (body) {
            return body(this.transaction);
        };
        IndexedDBTransaction.prototype.renameTable = function (tableName, newTableName) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var store;
                return tslib_1.__generator(this, function (_a) {
                    store = this.transaction.objectStore(tableName);
                    store.name = newTableName;
                    return [2];
                });
            });
        };
        IndexedDBTransaction.prototype.getRecord = function (table, key) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Getting record with keys '".concat(key, "' from table '").concat(table.tableName, "'"));
                var store = _this.transaction.objectStore(table.tableName);
                var getRequest = store.get(IndexedDBTransaction.wrapKeyIfNeeded(key, table));
                getRequest.onsuccess = function () {
                    _this.trace("Retrieved record with keys '".concat(key, "' from table '").concat(table.tableName, "' successfully"));
                    resolve((getRequest.result || null));
                };
                getRequest.onerror = function (evt) {
                    _this.trace("Error retrieving record with keys '".concat(key, "' from table '").concat(table.tableName, "'"), _this.transaction.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(_this.transaction.error);
                };
            });
        };
        IndexedDBTransaction.prototype.removeRecord = function (table, key) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Deleting record with key '".concat(key, "' from table '").concat(table.tableName, "'"));
                var store = _this.transaction.objectStore(table.tableName);
                var deleteRequest = store.delete(IndexedDBTransaction.wrapKeyIfNeeded(key, table));
                deleteRequest.onsuccess = function () {
                    _this.trace("Deleted record with key '".concat(key, "' from table '").concat(table.tableName, "' successfully"));
                    resolve();
                };
                deleteRequest.onerror = function (evt) {
                    _this.trace("Error deleting record with key '".concat(key, "' from table '").concat(table.tableName, "'"), deleteRequest.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(deleteRequest.error);
                };
            });
        };
        IndexedDBTransaction.prototype.removeAllRecords = function (table) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Deleting all records from table '".concat(table.tableName, "'"));
                var store = _this.transaction.objectStore(table.tableName);
                var clearRequest = store.clear();
                clearRequest.onsuccess = function () {
                    _this.trace("Deleted all records from table '".concat(table.tableName, "' successfully"));
                    resolve();
                };
                clearRequest.onerror = function (evt) {
                    _this.trace("Error deleting all records from table '".concat(table.tableName, "'"), clearRequest.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(clearRequest.error);
                };
            });
        };
        IndexedDBTransaction.prototype.insertRecord = function (table, record) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Inserting record on table '".concat(table.tableName, "'"));
                var addResult = _this.transaction.objectStore(table.tableName).add(record);
                addResult.onsuccess = function () {
                    _this.trace("Inserted record on table '".concat(table.tableName, "' successfully"));
                    resolve(IndexedDBTransaction.unwrapKeyIfNeeded(addResult));
                };
                addResult.onerror = function (evt) {
                    _this.trace("Error inserting record on table '".concat(table.tableName, "'"), addResult.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(addResult.error);
                };
            });
        };
        IndexedDBTransaction.prototype.upsertRecord = function (table, record) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Adding/Updating record on table '".concat(table.tableName, "'"));
                var putResult = _this.transaction.objectStore(table.tableName).put(record);
                putResult.onsuccess = function () {
                    _this.trace("Added/Updated record on table '".concat(table.tableName, "' successfully"));
                    resolve(IndexedDBTransaction.unwrapKeyIfNeeded(putResult));
                };
                putResult.onerror = function (evt) {
                    _this.trace("Error adding/updating record on table '".concat(table.tableName, "'"), putResult.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(putResult.error);
                };
            });
        };
        IndexedDBTransaction.prototype.upsertAllRecords = function (table, records) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _i, records_1, record, error_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.trace("Adding/updating ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "'"));
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            _i = 0, records_1 = records;
                            _a.label = 2;
                        case 2:
                            if (!(_i < records_1.length)) return [3, 5];
                            record = records_1[_i];
                            return [4, this.upsertRecord(table, record)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            _i++;
                            return [3, 2];
                        case 5:
                            this.trace("Added/updated ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "' successfully"));
                            return [3, 7];
                        case 6:
                            error_1 = _a.sent();
                            this.trace("Error adding/updating ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "'"), error_1);
                            throw error_1;
                        case 7: return [2];
                    }
                });
            });
        };
        IndexedDBTransaction.prototype.updateRecord = function (table, record) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            var primaryColumns = TableInfoUtils.getIdentifierColumnNames(table);
                            if (primaryColumns.length === 0) {
                                var error = new Error("Cannot perform an update on table '".concat(table.tableName, "' since it has no primary key column"));
                                _this.trace(error.message);
                                return reject(error);
                            }
                            _this.trace("Checking if record exists on table '".concat(table.tableName, "'"));
                            var getResult = _this.transaction
                                .objectStore(table.tableName)
                                .get(primaryColumns.map(function (name) { return record[name]; }));
                            getResult.onsuccess = function () {
                                try {
                                    if (!getResult.result) {
                                        var error = new Error("Record to update does not exist on table '".concat(table.tableName, "'"));
                                        _this.trace(error.message);
                                        return reject(error);
                                    }
                                    _this.trace("Updating record on table '".concat(table.tableName, "'"));
                                    var putResult_1 = _this.transaction.objectStore(table.tableName).put(record);
                                    putResult_1.onsuccess = function () {
                                        _this.trace("Updated record on table '".concat(table.tableName, "' successfully"));
                                        resolve();
                                    };
                                    putResult_1.onerror = function (evt) {
                                        _this.trace("Error updating record on table '".concat(table.tableName, "'"), putResult_1.error);
                                        (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                                        reject(putResult_1.error);
                                    };
                                }
                                catch (error) {
                                    _this.trace("Error updating record on table '".concat(table.tableName, "'"), error);
                                    reject(error);
                                }
                            };
                            getResult.onerror = function (evt) {
                                _this.trace("Error checking if record exists on table '".concat(table.tableName, "'"), getResult.error);
                                (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                                reject(getResult.error);
                            };
                        })];
                });
            });
        };
        IndexedDBTransaction.prototype.addColumn = function (table, column) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var allRecords, _i, allRecords_1, record;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, new Promise(function (resolve, reject) {
                                _this.trace("Adding column '".concat(Logger.serializeObjectForLog(column), "' on table '").concat(table.tableName, "'"));
                                try {
                                    _this.transaction.objectStore(table.tableName).createIndex(column.columnName, column.columnName);
                                    resolve();
                                }
                                catch (error) {
                                    _this.trace("Error adding column '".concat(Logger.serializeObjectForLog(column), "' on table '").concat(table.tableName, "'"), error);
                                    reject(error);
                                }
                            })];
                        case 1:
                            _a.sent();
                            return [4, this.getAllRecords(table)];
                        case 2:
                            allRecords = _a.sent();
                            _i = 0, allRecords_1 = allRecords;
                            _a.label = 3;
                        case 3:
                            if (!(_i < allRecords_1.length)) return [3, 6];
                            record = allRecords_1[_i];
                            record[column.columnName] = column.serializedDefault;
                            return [4, this.upsertRecord(table, record)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            _i++;
                            return [3, 3];
                        case 6: return [2];
                    }
                });
            });
        };
        IndexedDBTransaction.prototype.existsColumn = function (tableName, columnName) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            _this.trace("Checking if column '".concat(columnName, "' exists on table '").concat(tableName, "'"));
                            try {
                                var exists = _this.transaction.objectStoreNames.contains(tableName) &&
                                    _this.transaction.objectStore(tableName).indexNames.contains(columnName);
                                resolve(exists);
                            }
                            catch (error) {
                                _this.trace("Error checking if column '".concat(columnName, "' exists on table '").concat(tableName, "'"), error);
                                reject(error);
                            }
                        })];
                });
            });
        };
        IndexedDBTransaction.prototype.findRecords = function (table, criteria) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Searching for all records on table '".concat(table.tableName, "' that match the specified criteria."));
                var result = [];
                var hasPrimaryKey = TableInfoUtils.getIdentifierColumns(table).length > 0 ? true : false;
                var store = _this.transaction.objectStore(table.tableName);
                var cursorRequest = store.openCursor();
                cursorRequest.onsuccess = function () {
                    var cursor = cursorRequest.result;
                    if (cursor) {
                        var record_1 = cursor.value;
                        if (!hasPrimaryKey) {
                            record_1 = tslib_1.__assign(tslib_1.__assign({}, record_1), { $KEY: cursor.primaryKey });
                        }
                        var isMatch = Object.keys(criteria).reduce(function (previousValue, key) {
                            return previousValue &&
                                criteria.hasOwnProperty(key) &&
                                record_1[TableInfoUtils.formatObjectName(key)] === criteria[key];
                        }, true);
                        if (isMatch) {
                            result.push(record_1);
                        }
                        cursor.continue();
                    }
                    else {
                        _this.trace("Search on table '".concat(table.tableName, "' found ").concat(result.length, " record(s) matching the specified criteria."));
                        resolve(result);
                    }
                };
                cursorRequest.onerror = function (evt) {
                    _this.trace("Error searching for records on table '".concat(table.tableName, "'"), cursorRequest.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(cursorRequest.error);
                };
            });
        };
        IndexedDBTransaction.prototype.getAllRecords = function (table) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Getting all records from table '".concat(table.tableName, "'"));
                var store = _this.transaction.objectStore(table.tableName);
                var getAllRequest = store.getAll();
                getAllRequest.onsuccess = function () {
                    _this.trace("Retrieved all the records from table '".concat(table.tableName, "'"));
                    resolve(getAllRequest.result);
                };
                getAllRequest.onerror = function (evt) {
                    _this.trace("Error retrieving all the records from table '".concat(table.tableName, "'"), getAllRequest.error);
                    (0, IndexedDBUtils_1.markEventAsHandled)(evt);
                    reject(getAllRequest.error);
                };
            });
        };
        IndexedDBTransaction.wrapKeyIfNeeded = function (key, table) {
            var hasPrimaryKey = TableInfoUtils.getIdentifierColumns(table).length > 0;
            if (hasPrimaryKey) {
                return key instanceof Array ? key : [key];
            }
            else {
                return key;
            }
        };
        IndexedDBTransaction.unwrapKeyIfNeeded = function (request) {
            return request.result instanceof Array
                ? request.result[0]
                : request.result;
        };
        IndexedDBTransaction.lastTransactionId = 0;
        return IndexedDBTransaction;
    }(IndexedDBTransactionWithoutObjectStores_1.default));
    exports.default = IndexedDBTransaction;
});
//# sourceMappingURL=IndexedDBTransaction.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/IndexedDBDatabase',["require", "exports", "tslib", "../../../Exceptions", "../../../Logger", "../../Common/BrowserUtils", "../Common/Database", "./IndexedDBTransaction", "./IndexedDBTransactionWithoutObjectStores", "./IndexedDBUtils"], function (require, exports, tslib_1, Exceptions_1, Logger, BrowserUtils_1, Database_1, IndexedDBTransaction_1, IndexedDBTransactionWithoutObjectStores_1, IndexedDBUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var COULD_NOT_OPEN_DATABASE_MSG = "Could not open database";
    var IndexedDBDatabase = (function (_super) {
        tslib_1.__extends(IndexedDBDatabase, _super);
        function IndexedDBDatabase(databaseName, databaseImplementation, onNewDatabaseVersionDetected) {
            var _this = _super.call(this, databaseName) || this;
            _this.databaseImplementation = databaseImplementation;
            _this.onNewDatabaseVersionDetected = onNewDatabaseVersionDetected;
            _this.setOnVersionChangeEvent();
            return _this;
        }
        IndexedDBDatabase.asSafeDbName = function (databaseName) {
            return databaseName || "";
        };
        IndexedDBDatabase.executeTransactionPromiseWithRetry = function (promiseBody_1) {
            return tslib_1.__awaiter(this, arguments, void 0, function (promiseBody, maxExecuteCount) {
                var execute, executeCount, result, e_1, err;
                if (maxExecuteCount === void 0) { maxExecuteCount = 3; }
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            execute = true;
                            executeCount = 0;
                            _a.label = 1;
                        case 1:
                            if (!execute) return [3, 6];
                            executeCount++;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, new Promise(promiseBody)];
                        case 3:
                            result = _a.sent();
                            execute = false;
                            return [3, 5];
                        case 4:
                            e_1 = _a.sent();
                            err = e_1;
                            if (!/the transaction is inactive or finished/i.test(err.message) || executeCount >= maxExecuteCount) {
                                throw e_1;
                            }
                            return [3, 5];
                        case 5: return [3, 1];
                        case 6: return [2, result];
                    }
                });
            });
        };
        IndexedDBDatabase.open = function (databaseName, onNewDatabaseVersionDetected) {
            var _this = this;
            databaseName = this.asSafeDbName(databaseName);
            return new Promise(function (resolve, reject) {
                if (!_this.cache[databaseName]) {
                    if (typeof window === "undefined") {
                        return reject(new Exceptions_1.Exceptions.SystemException("Database is only available in the browser/web view"));
                    }
                    if (!("indexedDB" in window)) {
                        Logger.trace(IndexedDBDatabase, "This browser doesn't support IndexedDB");
                        return reject(new Exceptions_1.Exceptions.SystemException("This browser doesn't support IndexedDB"));
                    }
                    if ((0, BrowserUtils_1.isSafari)(navigator.userAgent) && (0, BrowserUtils_1.windowInsideIframe)(window)) {
                        var errorMessage = "Your app requires native access to a Local Storage database that is not available in your browser while using an iframe.\nPlease test your app in your mobile device or use Google Chrome";
                        alert(errorMessage);
                        return reject(new Exceptions_1.Exceptions.SystemException(errorMessage));
                    }
                    Logger.trace(IndexedDBDatabase, "Opening database '".concat(databaseName, "' on IndexedDB"));
                    var database_1 = window.indexedDB.open(databaseName);
                    database_1.onsuccess = function () {
                        Logger.trace(IndexedDBDatabase, "Database '".concat(databaseName, "' opened successfully with version '").concat(database_1.result.version, "'"));
                        var db = database_1.result;
                        _this.cache[databaseName] = new IndexedDBDatabase(databaseName, db, onNewDatabaseVersionDetected);
                        resolve(_this.cache[databaseName]);
                    };
                    database_1.onerror = function () {
                        Logger.trace(IndexedDBDatabase, "Error opening database '".concat(databaseName, "'"));
                        reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(databaseName, "'")));
                    };
                }
                else {
                    resolve(_this.cache[databaseName]);
                }
            });
        };
        IndexedDBDatabase.prototype.setOnVersionChangeEvent = function () {
            var _this = this;
            this.databaseImplementation.onversionchange = function () {
                _this.databaseImplementation.close();
                if (_this.onNewDatabaseVersionDetected) {
                    _this.onNewDatabaseVersionDetected();
                }
            };
        };
        IndexedDBDatabase.prototype.close = function () {
            Logger.trace(this, "Closing database ".concat(this.name, " with version '").concat(this.databaseImplementation.version, "'"));
            this.databaseImplementation.close();
            delete IndexedDBDatabase.cache[this.name];
            return Promise.resolve();
        };
        IndexedDBDatabase.prototype.testConnection = function () {
            return Promise.resolve();
        };
        IndexedDBDatabase.prototype.executeQuery = function (body, allowTraces, affectedTables) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.executeReadTransaction(function (abstractTransaction) { return abstractTransaction.executeQuery(body); }, allowTraces, affectedTables);
        };
        IndexedDBDatabase.prototype.executeTransaction = function (body, allowTraces, affectedTables) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteDMLTransaction(body, allowTraces, "readwrite", affectedTables);
        };
        IndexedDBDatabase.prototype.executeReadTransaction = function (body, allowTraces, affectedTables) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteDMLTransaction(body, allowTraces, "readonly", affectedTables);
        };
        IndexedDBDatabase.prototype.innerExecuteDMLTransaction = function (body, allowTraces, mode, affectedTables) {
            if (this.databaseImplementation.objectStoreNames.length === 0) {
                return this.innerExecuteIDBTransactionWithoutObjectStores(body, allowTraces);
            }
            else {
                return this.innerExecuteIDBTransaction(body, allowTraces, mode, affectedTables);
            }
        };
        IndexedDBDatabase.prototype.innerExecuteIDBTransaction = function (body, allowTraces, mode, affectedTables) {
            var _this = this;
            var txBody = function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var result, caughtError, storeArray, i, idbTx, tx, error_1;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            result = null;
                            caughtError = null;
                            storeArray = affectedTables ? affectedTables.map(function (t) { return t.tableName; }) : [];
                            if (storeArray.length === 0) {
                                for (i = 0; i < this.databaseImplementation.objectStoreNames.length; i++) {
                                    storeArray.push(this.databaseImplementation.objectStoreNames.item(i));
                                }
                            }
                            idbTx = this.databaseImplementation.transaction(storeArray, mode);
                            tx = new IndexedDBTransaction_1.default(allowTraces, idbTx, this.databaseImplementation);
                            tx.onComplete = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4, (0, IndexedDBUtils_1.loadBinaryDataContent)(result)];
                                        case 1:
                                            _a.sent();
                                            resolve(result);
                                            return [2];
                                    }
                                });
                            }); };
                            tx.onAbort = function (error) { return reject(caughtError || error); };
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4, body(tx)];
                        case 2:
                            result = _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            caughtError = error_1;
                            idbTx === null || idbTx === void 0 ? void 0 : idbTx.abort();
                            return [3, 4];
                        case 4: return [2];
                    }
                });
            }); };
            return IndexedDBDatabase.executeTransactionPromiseWithRetry(txBody);
        };
        IndexedDBDatabase.prototype.innerExecuteIDBTransactionWithoutObjectStores = function (body, allowTraces) {
            var tx = new IndexedDBTransactionWithoutObjectStores_1.default(allowTraces, this.databaseImplementation);
            return body(tx);
        };
        IndexedDBDatabase.prototype.executeUpgradeTransaction = function (body_1) {
            return tslib_1.__awaiter(this, arguments, void 0, function (body, allowTraces) {
                var _this = this;
                if (allowTraces === void 0) { allowTraces = true; }
                return tslib_1.__generator(this, function (_a) {
                    return [2, new Promise(function (resolve, reject) {
                            var result = null;
                            var caughtError = null;
                            var version = _this.databaseImplementation.version;
                            _this.databaseImplementation.close();
                            var openRequest = window.indexedDB.open(_this.name, version + 1);
                            openRequest.onsuccess = function () {
                                _this.trace("Database '".concat(_this.name, "' opened successfully with version '").concat(version + 1, "'"), allowTraces);
                                _this.databaseImplementation = openRequest.result;
                                _this.setOnVersionChangeEvent();
                                return resolve(result);
                            };
                            openRequest.onerror = function () {
                                _this.trace("Error opening '".concat(_this.name, "' database with version '").concat(version + 1, "'"), allowTraces);
                                return reject(caughtError || openRequest.error);
                            };
                            openRequest.onupgradeneeded = function () {
                                _this.trace("Upgrading database '".concat(_this.name, "' with version '").concat(version + 1, "'"), allowTraces);
                                _this.databaseImplementation = openRequest.result;
                                var tx = new IndexedDBTransaction_1.default(allowTraces, openRequest.transaction, openRequest.result);
                                tx.onAbort = function (error) { return (caughtError = caughtError || error); };
                                body(tx)
                                    .then(function (bodyResult) { return (result = bodyResult); })
                                    .catch(function (error) {
                                    caughtError = error;
                                    openRequest.transaction.abort();
                                });
                            };
                        })];
                });
            });
        };
        IndexedDBDatabase.prototype.trace = function (msg, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            if (allowTraces) {
                Logger.trace(this, msg);
            }
        };
        IndexedDBDatabase.cache = {};
        return IndexedDBDatabase;
    }(Database_1.default));
    exports.default = IndexedDBDatabase;
});
//# sourceMappingURL=IndexedDBDatabase.js.map;
define('OutSystems/ClientRuntime/modules/Database/Metadata/MetadataTableInfo',["require", "exports", "../AutoNumber", "../DBDataType", "../TableInfoUtils"], function (require, exports, AutoNumber_1, DBDataType_1, TableInfoUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var METADATA_TABLE_INFO = {
        tableName: TableInfoUtils_1.METADATA_TABLE_NAME,
        idIsAutoNumber: AutoNumber_1.default.No,
        attributes: [
            { name: "Key", columnName: "KEY", type: DBDataType_1.default.TEXT, isPrimaryKey: true },
            { name: "ModuleKey", columnName: "MODULEKEY", type: DBDataType_1.default.TEXT, isPrimaryKey: true },
            { name: "UpgradeStatus", columnName: "UPGRADESTATUS", type: DBDataType_1.default.INTEGER },
            { name: "Name", columnName: "NAME", type: DBDataType_1.default.TEXT },
            { name: "TableName", columnName: "TABLENAME", type: DBDataType_1.default.TEXT },
            { name: "Hash", columnName: "HASH", type: DBDataType_1.default.TEXT },
            { name: "ExtraInfo", columnName: "EXTRAINFO", type: DBDataType_1.default.TEXT },
        ],
    };
    exports.default = METADATA_TABLE_INFO;
});
//# sourceMappingURL=MetadataTableInfo.js.map;
define('OutSystems/ClientRuntime/modules/Database/Metadata/MetadataBackupTableInfo',["require", "exports", "tslib", "../TableInfoUtils", "./MetadataTableInfo"], function (require, exports, tslib_1, TableInfoUtils_1, MetadataTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var METADATA_BACKUP_TABLE_INFO = tslib_1.__assign(tslib_1.__assign({}, MetadataTableInfo_1.default), { tableName: "".concat(TableInfoUtils_1.BACKUP_TABLE_PREFIX).concat(TableInfoUtils_1.METADATA_TABLE_NAME) });
    exports.default = METADATA_BACKUP_TABLE_INFO;
});
//# sourceMappingURL=MetadataBackupTableInfo.js.map;
define('OutSystems/ClientRuntime/modules/Database/Metadata/MetadataTableInitializer',["require", "exports", "tslib", "../../../Logger", "./MetadataBackupTableInfo", "./MetadataTableInfo"], function (require, exports, tslib_1, Logger, MetadataBackupTableInfo_1, MetadataTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MetadataTableInitializer = {
        isNeeded: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, tx.existsTable(MetadataTableInfo_1.default)];
                    case 1: return [2, !(_a.sent())];
                }
            });
        }); },
        run: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.trace(this, "Running initializer for entity meta info table.");
                        return [4, tx.createTable(MetadataTableInfo_1.default)];
                    case 1:
                        _a.sent();
                        return [4, tx.createTable(MetadataBackupTableInfo_1.default)];
                    case 2:
                        _a.sent();
                        Logger.trace(this, "Initializer for entity meta info table ran successfully.");
                        return [2];
                }
            });
        }); },
    };
    exports.default = MetadataTableInitializer;
});
//# sourceMappingURL=MetadataTableInitializer.js.map;
define('OutSystems/ClientRuntime/modules/Database/Metadata/EntityUpgradeStatus',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EntityUpgradeStatus;
    (function (EntityUpgradeStatus) {
        EntityUpgradeStatus[EntityUpgradeStatus["Unchanged"] = 0] = "Unchanged";
        EntityUpgradeStatus[EntityUpgradeStatus["Deleted"] = 1] = "Deleted";
        EntityUpgradeStatus[EntityUpgradeStatus["Recreated"] = 2] = "Recreated";
        EntityUpgradeStatus[EntityUpgradeStatus["New"] = 3] = "New";
    })(EntityUpgradeStatus || (EntityUpgradeStatus = {}));
    exports.default = EntityUpgradeStatus;
});
//# sourceMappingURL=EntityUpgradeStatus.js.map;
define('OutSystems/ClientRuntime/modules/Database/Common/ValueConstraintValidation',["require", "exports", "../../../Exceptions", "../DBDataType", "../TableInfoUtils"], function (require, exports, Exceptions_1, DBDataType_1, TableInfoUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateValueForCreateOrUpdate = exports.validateRecordForCreateOrUpdate = void 0;
    function validateRecordForCreateOrUpdate(info, record, operation) {
        for (var _i = 0, _a = record.getAttributes(); _i < _a.length; _i++) {
            var attr = _a[_i];
            validateValueForCreateOrUpdate(record[attr.attrName], TableInfoUtils.getMatchingColumn(info, attr), "".concat(operation, " '").concat(info.tableName, ".").concat(attr.name, "'"));
        }
    }
    exports.validateRecordForCreateOrUpdate = validateRecordForCreateOrUpdate;
    function validateValueForCreateOrUpdate(value, columnInfo, operation) {
        if (columnInfo.type === DBDataType_1.default.TEXT) {
            if (!value) {
                return;
            }
            var attrValue = value;
            var lengthDiff = attrValue.length - columnInfo.length;
            if (lengthDiff > 0) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to ".concat(operation, " because it exceeds the maximum allowed length by ").concat(lengthDiff, " characters."));
            }
        }
        else if (columnInfo.type === DBDataType_1.default.DECIMAL) {
            var attrValue = value;
            var lengthDiff = attrValue.trunc().abs().toString().length - (columnInfo.length - columnInfo.decimals);
            if (lengthDiff > 0) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to ".concat(operation, " because it exceeds the maximum allowed length by ").concat(lengthDiff, " characters."));
            }
        }
    }
    exports.validateValueForCreateOrUpdate = validateValueForCreateOrUpdate;
});
//# sourceMappingURL=ValueConstraintValidation.js.map;
define('OutSystems/ClientRuntime/modules/Database/Common/EntityModelUtils',["require", "exports", "tslib", "../../../DataConversion", "../../../DataTypes", "../../../Exceptions", "../../../Logger", "../AutoNumber", "../DatabaseTypeUtils", "../DBDataType", "../Metadata/EntityUpgradeStatus", "../Metadata/MetadataBackupTableInfo", "../Metadata/MetadataTableInfo", "../TableInfoUtils", "./ValueConstraintValidation"], function (require, exports, tslib_1, DataConversion_1, DataTypes_1, Exceptions_1, Logger, AutoNumber_1, DatabaseTypeUtils_1, DBDataType_1, EntityUpgradeStatus_1, MetadataBackupTableInfo_1, MetadataTableInfo_1, TableInfoUtils, ValueConstraintValidation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recreateTable = exports.backupDeletedTables = exports.dropBackupTables = exports.dropInconsistentTables = exports.recoverBackupTables = exports.createOrUpgradeTable = exports.loadStoredMetadata = exports.getFirstItem = void 0;
    function trace(message) {
        Logger.trace("EntityModelUtils", message);
    }
    function getFirstItem(array) {
        return array[0];
    }
    exports.getFirstItem = getFirstItem;
    function loadStoredMetadata(transaction, moduleKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var metadata;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, transaction.findRecords(MetadataTableInfo_1.default, { MODULEKEY: moduleKey })];
                    case 1:
                        metadata = _a.sent();
                        return [2, metadata];
                }
            });
        });
    }
    exports.loadStoredMetadata = loadStoredMetadata;
    function createOrUpgradeTable(transaction, info, metadata, serializer) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var hash, extraInfo;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        trace("Checking the status of table ".concat(info.tableName, " (").concat(info.name, ")"));
                        extraInfo = {};
                        if (metadata) {
                            hash = metadata.HASH;
                            extraInfo = JSON.parse((_a = metadata.EXTRAINFO) !== null && _a !== void 0 ? _a : "{}");
                        }
                        if (!!hash) return [3, 3];
                        trace("Table ".concat(info.tableName, " (").concat(info.name, ") does not exist and will be created"));
                        return [4, createTable(transaction, info, serializer)];
                    case 1:
                        _b.sent();
                        return [4, insertTableMetadata(transaction, info)];
                    case 2:
                        _b.sent();
                        return [3, 4];
                    case 3:
                        if (hash !== info.hash) {
                            if (requiresFullUpgrade(info, extraInfo)) {
                                trace("Table ".concat(info.tableName, " (").concat(info.name, ") exists and will be fully upgraded"));
                                return [2, recreateTable(transaction, info, extraInfo, serializer)];
                            }
                            else {
                                trace("Table ".concat(info.tableName, " (").concat(info.name, ") exists and will be incrementally upgraded"));
                                return [2, upgradeTable(transaction, info, extraInfo, serializer)];
                            }
                        }
                        else {
                            trace("Table ".concat(info.tableName, " (").concat(info.name, ") exists and is up to date"));
                        }
                        _b.label = 4;
                    case 4: return [2];
                }
            });
        });
    }
    exports.createOrUpgradeTable = createOrUpgradeTable;
    function recoverBackupTables(transaction, entityInfos, moduleKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2, doForEachTable(transaction, function (tableName) {
                        trace("Recovering table ".concat(tableName, " from backup"));
                        var filtered = entityInfos.filter(function (value) { return value.tableName === tableName; });
                        return function (transaction) {
                            return recoverBackupTable(transaction, tableName, filtered.length === 1 ? filtered[0] : null, moduleKey);
                        };
                    }, moduleKey, function (record) { return record.UPGRADESTATUS !== EntityUpgradeStatus_1.default.Unchanged; })];
            });
        });
    }
    exports.recoverBackupTables = recoverBackupTables;
    function recoverBackupTable(transaction, tableName, info, moduleKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var hasBackupTable;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, dropTableIfExists(transaction, tableName)];
                    case 1:
                        _a.sent();
                        return [4, transaction.existsTable(getBackupTableName(tableName))];
                    case 2:
                        hasBackupTable = _a.sent();
                        if (!hasBackupTable) return [3, 4];
                        return [4, renameTableAndSetStatus(transaction, getBackupTableName(tableName), tableName, tableName, EntityUpgradeStatus_1.default.Unchanged)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4, copyMetadata(transaction, tableName, true)];
                    case 5:
                        _a.sent();
                        return [2];
                }
            });
        });
    }
    function dropInconsistentTables(transaction, entityInfos, moduleKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2, doForEachTable(transaction, function (tableName) {
                        trace("Dropping inconsistent table ".concat(tableName, " (same key, different physical table name)"));
                        return function (transaction) { return dropInconsistentTable(transaction, tableName); };
                    }, moduleKey, function (record) {
                        var isUnchanged = record.UPGRADESTATUS === EntityUpgradeStatus_1.default.Unchanged;
                        var keyExists = entityInfos.some(function (info) { return info.key === record.KEY; });
                        var tableNameNotExists = !entityInfos.some(function (info) { return info.tableName === record.TABLENAME; });
                        var inconsistentOnEntityInfos = entityInfos.length === 0 ? true : keyExists && tableNameNotExists;
                        return isUnchanged && inconsistentOnEntityInfos;
                    })];
            });
        });
    }
    exports.dropInconsistentTables = dropInconsistentTables;
    function dropInconsistentTable(transaction, tableName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var inconsistentMetadataRecord, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, dropTableIfExists(transaction, tableName)];
                    case 1:
                        _b.sent();
                        _a = getFirstItem;
                        return [4, transaction.findRecords(MetadataTableInfo_1.default, { TABLENAME: tableName })];
                    case 2:
                        inconsistentMetadataRecord = _a.apply(void 0, [_b.sent()]);
                        if (!inconsistentMetadataRecord) return [3, 4];
                        return [4, transaction.removeRecord(MetadataTableInfo_1.default, [
                                inconsistentMetadataRecord.KEY,
                                inconsistentMetadataRecord.MODULEKEY,
                            ])];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2];
                }
            });
        });
    }
    function dropBackupTables(transaction, moduleKey) {
        return doForEachTable(transaction, function (tableName) {
            trace("Dropping backup table for ".concat(tableName));
            return function (transaction) { return dropBackupTable(transaction, tableName); };
        }, moduleKey, function (record) { return record.UPGRADESTATUS !== EntityUpgradeStatus_1.default.Unchanged; });
    }
    exports.dropBackupTables = dropBackupTables;
    function backupDeletedTables(transaction, entityInfos, moduleKey) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2, doForEachTable(transaction, function (tableName) {
                        trace("Backing up table ".concat(tableName, " before deletion"));
                        return function (transaction) { return backupTable(transaction, tableName, EntityUpgradeStatus_1.default.Deleted); };
                    }, moduleKey, function (record) {
                        return record.UPGRADESTATUS === EntityUpgradeStatus_1.default.Unchanged &&
                            !entityInfos.some(function (info) { return info.tableName === record.TABLENAME; });
                    })];
            });
        });
    }
    exports.backupDeletedTables = backupDeletedTables;
    function doForEachTable(transaction, action, moduleKey, criteria) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var allModuleTables, desiredTables, _i, allModuleTables_1, table, _a, desiredTables_1, table;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, transaction.findRecords(MetadataTableInfo_1.default, { MODULEKEY: moduleKey })];
                    case 1:
                        allModuleTables = (_b.sent());
                        desiredTables = [];
                        if (criteria) {
                            for (_i = 0, allModuleTables_1 = allModuleTables; _i < allModuleTables_1.length; _i++) {
                                table = allModuleTables_1[_i];
                                if (criteria(table)) {
                                    desiredTables.push(table);
                                }
                            }
                        }
                        else {
                            desiredTables = allModuleTables;
                        }
                        _a = 0, desiredTables_1 = desiredTables;
                        _b.label = 2;
                    case 2:
                        if (!(_a < desiredTables_1.length)) return [3, 5];
                        table = desiredTables_1[_a];
                        return [4, action(table.TABLENAME)(transaction)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        _a++;
                        return [3, 2];
                    case 5: return [2];
                }
            });
        });
    }
    function backupTable(transaction, tableName, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trace("Backing up table '".concat(tableName, "'"));
                        return [4, copyMetadata(transaction, tableName, false)];
                    case 1:
                        _a.sent();
                        return [4, dropTableIfExists(transaction, getBackupTableName(tableName))];
                    case 2:
                        _a.sent();
                        return [2, renameTableAndSetStatus(transaction, tableName, getBackupTableName(tableName), tableName, reason)];
                }
            });
        });
    }
    function dropTableIfExists(transaction, tableName) {
        return transaction.deleteTableIfExists(tableName);
    }
    function dropBackupTable(transaction, tableName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var metadata, _a, backupMetadata, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4, dropTableIfExists(transaction, getBackupTableName(tableName))];
                    case 1:
                        _c.sent();
                        _a = getFirstItem;
                        return [4, transaction.findRecords(MetadataTableInfo_1.default, { TABLENAME: tableName })];
                    case 2:
                        metadata = _a.apply(void 0, [_c.sent()]);
                        if (!metadata) return [3, 6];
                        if (!(metadata.UPGRADESTATUS === EntityUpgradeStatus_1.default.Deleted)) return [3, 4];
                        return [4, transaction.removeRecord(MetadataTableInfo_1.default, [metadata.KEY, metadata.MODULEKEY])];
                    case 3:
                        _c.sent();
                        return [3, 6];
                    case 4:
                        metadata.UPGRADESTATUS = EntityUpgradeStatus_1.default.Unchanged;
                        return [4, transaction.updateRecord(MetadataTableInfo_1.default, metadata)];
                    case 5:
                        _c.sent();
                        _c.label = 6;
                    case 6:
                        _b = getFirstItem;
                        return [4, transaction.findRecords(MetadataBackupTableInfo_1.default, { TABLENAME: tableName })];
                    case 7:
                        backupMetadata = _b.apply(void 0, [_c.sent()]);
                        if (!backupMetadata) return [3, 9];
                        return [4, transaction.removeRecord(MetadataBackupTableInfo_1.default, [backupMetadata.KEY, backupMetadata.MODULEKEY])];
                    case 8:
                        _c.sent();
                        _c.label = 9;
                    case 9: return [2];
                }
            });
        });
    }
    function renameTableAndSetStatus(transaction, currentTableName, newTableName, originalTableName, upgradeStatus) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trace("Renaming table '".concat(currentTableName, "' to '").concat(newTableName, "' and setting status to ").concat(EntityUpgradeStatus_1.default[upgradeStatus]));
                        return [4, renameTable(transaction, currentTableName, newTableName)];
                    case 1:
                        _a.sent();
                        return [2, setTableUpgradeStatus(transaction, originalTableName, upgradeStatus)];
                }
            });
        });
    }
    function renameTable(transaction, currentTableName, newTableName) {
        return transaction.renameTable(currentTableName, newTableName);
    }
    function setTableUpgradeStatus(transaction, tableName, upgradeStatus) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var metadata, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = getFirstItem;
                        return [4, transaction.findRecords(MetadataTableInfo_1.default, { TABLENAME: tableName })];
                    case 1:
                        metadata = _a.apply(void 0, [_b.sent()]);
                        metadata.UPGRADESTATUS = upgradeStatus;
                        return [2, transaction.updateRecord(MetadataTableInfo_1.default, metadata)];
                }
            });
        });
    }
    function getBackupTableName(tableName) {
        return "".concat(TableInfoUtils.BACKUP_TABLE_PREFIX).concat(tableName);
    }
    function createTable(transaction, info, serializer) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                trace("Creating table ".concat(info.tableName, " (").concat(info.name, ")"));
                return [2, transaction.createTable(tslib_1.__assign(tslib_1.__assign({}, info), { attributes: tslib_1.__spreadArray([], info.attributes.map(function (attribute) {
                            var _a;
                            return tslib_1.__assign(tslib_1.__assign({}, attribute), { serializedDefault: serializer.serialize((_a = attribute.default) !== null && _a !== void 0 ? _a : (0, DatabaseTypeUtils_1.typeDefaultValue)(attribute.type), attribute) });
                        }), true) }))];
            });
        });
    }
    function insertTableMetadata(transaction, info) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var metadataRecord;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadataRecord = makeMetadataRecord(info);
                        metadataRecord.UPGRADESTATUS = EntityUpgradeStatus_1.default.New;
                        trace("Creating metadata for table ".concat(info.tableName, " (").concat(info.name, ")"));
                        return [4, transaction.insertRecord(MetadataTableInfo_1.default, metadataRecord)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    }
    function updateTableMetadata(transaction, info) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentMetadata, metadataRecord;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        trace("Updating metadata for table ".concat(info.tableName, " (").concat(info.name, ")"));
                        return [4, transaction.getRecord(MetadataTableInfo_1.default, [
                                info.key,
                                info.moduleKey,
                            ])];
                    case 1:
                        currentMetadata = (_a.sent());
                        metadataRecord = makeMetadataRecord(info);
                        metadataRecord.UPGRADESTATUS = currentMetadata.UPGRADESTATUS;
                        metadataRecord.LASTIDENTIFIER = currentMetadata.LASTIDENTIFIER;
                        return [4, transaction.updateRecord(MetadataTableInfo_1.default, metadataRecord)];
                    case 2:
                        _a.sent();
                        return [2];
                }
            });
        });
    }
    function recreateTable(transaction, info, metadata, serializer) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dbRecords, _i, dbRecords_1, dbRecord, newDbRecord, error_1, errorMessage;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 9, , 10]);
                        return [4, transaction.getAllRecords(info)];
                    case 1:
                        dbRecords = _a.sent();
                        return [4, backupTable(transaction, info.tableName, EntityUpgradeStatus_1.default.Recreated)];
                    case 2:
                        _a.sent();
                        return [4, createTable(transaction, info, serializer)];
                    case 3:
                        _a.sent();
                        _i = 0, dbRecords_1 = dbRecords;
                        _a.label = 4;
                    case 4:
                        if (!(_i < dbRecords_1.length)) return [3, 7];
                        dbRecord = dbRecords_1[_i];
                        newDbRecord = upgradeDbRecord(dbRecord, info, metadata, serializer);
                        return [4, transaction.insertRecord(info, newDbRecord)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        _i++;
                        return [3, 4];
                    case 7: return [4, updateTableMetadata(transaction, info)];
                    case 8:
                        _a.sent();
                        return [3, 10];
                    case 9:
                        error_1 = _a.sent();
                        errorMessage = "Unable to upgrade the definition of entity '".concat(info.name, "':\n").concat((0, Exceptions_1.getMessage)(error_1));
                        trace(errorMessage);
                        throw new Exceptions_1.Exceptions.DataBaseException("", errorMessage);
                    case 10: return [2];
                }
            });
        });
    }
    exports.recreateTable = recreateTable;
    function upgradeTable(transaction, info, metadataExtraInfo, serializer) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var newAttributes, _i, newAttributes_1, attribute, serializedDefault;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        newAttributes = info.attributes.filter(function (attr) {
                            return !Object.keys(metadataExtraInfo.attrs).some(function (metadataAttrName) { return metadataAttrName === attr.columnName; });
                        });
                        trace("Upgrading table ".concat(info.tableName, " (").concat(info.name, ") with new attributes (").concat((function () {
                            return JSON.stringify(newAttributes);
                        })(), ") and new hash (").concat(info.hash, ")"));
                        _i = 0, newAttributes_1 = newAttributes;
                        _b.label = 1;
                    case 1:
                        if (!(_i < newAttributes_1.length)) return [3, 4];
                        attribute = newAttributes_1[_i];
                        serializedDefault = serializer.serialize((_a = attribute.default) !== null && _a !== void 0 ? _a : (0, DatabaseTypeUtils_1.typeDefaultValue)(attribute.type), attribute);
                        return [4, transaction.addColumn(info, tslib_1.__assign(tslib_1.__assign({}, attribute), { serializedDefault: serializedDefault }))];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [4, updateTableMetadata(transaction, info)];
                    case 5:
                        _b.sent();
                        return [2];
                }
            });
        });
    }
    function upgradeDbRecord(dbRecord, info, extraInfo, serializer) {
        var newDbRecord = {};
        for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
            var attr = _a[_i];
            try {
                var attrName = attr.columnName;
                var oldValue = dbRecord[attrName];
                newDbRecord[attrName] = convertRecordAttribute(oldValue, attr, extraInfo, serializer);
            }
            catch (error) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to upgrade attribute '".concat(attr.name, "' data type to '").concat((0, DatabaseTypeUtils_1.typeDisplayName)(attr.type), "':\n").concat((0, Exceptions_1.getMessage)(error)));
            }
        }
        fillWithDefaults(newDbRecord, info, serializer);
        return newDbRecord;
    }
    function fillWithDefaults(dbRecord, info, serializer) {
        for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
            var expectedAttr = _a[_i];
            var attrName = expectedAttr.columnName;
            if (dbRecord[attrName] === undefined) {
                var defaultValue = expectedAttr.default === undefined ? (0, DatabaseTypeUtils_1.typeDefaultValue)(expectedAttr.type) : expectedAttr.default;
                dbRecord[attrName] = serializer.serialize(defaultValue, expectedAttr);
            }
        }
    }
    function convertRecordAttribute(attrValue, attr, extraInfo, serializer) {
        var extraInfoAttr = extraInfo.attrs[attr.columnName];
        if (extraInfoAttr) {
            return upgradeDbValue(attrValue, extraInfoAttr, attr, serializer);
        }
        return attrValue;
    }
    function upgradeDbValue(dbValue, fromInfo, toInfo, serializer) {
        if (serializer.isConversionNeeded(fromInfo, toInfo)) {
            var originalValue = serializer.deserialize(dbValue, fromInfo);
            var newModelDataType = (0, DatabaseTypeUtils_1.convertToModelDataType)(toInfo.type);
            var operation = createOperationLabel(fromInfo, toInfo);
            if (DataConversion_1.JSConversions.isConvertibleTo(originalValue, newModelDataType)) {
                var convertedValue = DataConversion_1.JSConversions.convertTo(originalValue, newModelDataType);
                (0, ValueConstraintValidation_1.validateValueForCreateOrUpdate)(convertedValue, toInfo, operation);
                var dbConvertedValue = serializer.serialize(convertedValue, toInfo);
                return dbConvertedValue;
            }
            else {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to ".concat(operation, "."));
            }
        }
        else {
            return dbValue;
        }
    }
    function createOperationLabel(fromInfo, toInfo) {
        var fromTypeLabel = DataTypes_1.DataTypes[(0, DatabaseTypeUtils_1.convertToModelDataType)(fromInfo.type)];
        var toTypeLabel = DataTypes_1.DataTypes[(0, DatabaseTypeUtils_1.convertToModelDataType)(toInfo.type)];
        return "convert column '".concat(toInfo.name, "' from type ").concat(fromTypeLabel, " to ").concat(toTypeLabel);
    }
    function requiresFullUpgrade(info, metadata) {
        if (metadata.idIsAutoNumber !== info.idIsAutoNumber) {
            return true;
        }
        var attrInfos = getAttributeInfoSummary(info, metadata);
        return attrInfos.some(function (attrInfo) {
            if (!attrInfo.entityAttr) {
                return true;
            }
            if (!attrInfo.metadataAttr) {
                return attrInfo.entityAttr.isPrimaryKey;
            }
            return columnDefinitionHasChanged(attrInfo.entityAttr, attrInfo.metadataAttr);
        });
    }
    function getAttributeInfoSummary(info, metadata) {
        var pairedInfo = {};
        for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
            var einfoAttr = _a[_i];
            var attrName = einfoAttr.columnName;
            pairedInfo[attrName] = {};
            pairedInfo[attrName].entityAttr = einfoAttr;
        }
        for (var _b = 0, _c = Object.keys(metadata.attrs); _b < _c.length; _b++) {
            var attr = _c[_b];
            pairedInfo[attr] = pairedInfo[attr] || {};
            pairedInfo[attr].metadataAttr = metadata.attrs[attr];
        }
        return Object.keys(pairedInfo).map(function (attrName) { return pairedInfo[attrName]; });
    }
    function columnDefinitionHasChanged(info, metadata) {
        return typeDefinitionHasChanged(info, metadata) || !metadata.isPrimaryKey !== !info.isPrimaryKey;
    }
    function typeDefinitionHasChanged(info, metadata) {
        return (info.type !== metadata.type ||
            metadata.length !== info.length ||
            metadata.decimals !== info.decimals ||
            (!!metadata.isEntityReference !== !!info.isEntityReference && !info.isPrimaryKey));
    }
    function copyMetadata(transaction, tableName, isRollback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sourceTable, targetTable, oldTargetToDelete, _a, sourceToBackup, _b, newSourceToDelete, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        sourceTable = isRollback ? MetadataBackupTableInfo_1.default : MetadataTableInfo_1.default;
                        targetTable = isRollback ? MetadataTableInfo_1.default : MetadataBackupTableInfo_1.default;
                        _a = getFirstItem;
                        return [4, transaction.findRecords(targetTable, { TABLENAME: tableName })];
                    case 1:
                        oldTargetToDelete = _a.apply(void 0, [_d.sent()]);
                        if (!oldTargetToDelete) return [3, 3];
                        return [4, transaction.removeRecord(targetTable, [oldTargetToDelete.KEY, oldTargetToDelete.MODULEKEY])];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3:
                        _b = getFirstItem;
                        return [4, transaction.findRecords(sourceTable, { TABLENAME: tableName })];
                    case 4:
                        sourceToBackup = _b.apply(void 0, [_d.sent()]);
                        if (!sourceToBackup) return [3, 6];
                        return [4, transaction.insertRecord(targetTable, sourceToBackup)];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6:
                        if (!isRollback) return [3, 9];
                        _c = getFirstItem;
                        return [4, transaction.findRecords(sourceTable, { TABLENAME: tableName })];
                    case 7:
                        newSourceToDelete = _c.apply(void 0, [_d.sent()]);
                        if (!newSourceToDelete) return [3, 9];
                        return [4, transaction.removeRecord(sourceTable, [newSourceToDelete.KEY, newSourceToDelete.MODULEKEY])];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9: return [2];
                }
            });
        });
    }
    function makeMetadataRecord(entityInfo) {
        var extraInfoMetadata = makeExtraInfoMetadata(entityInfo);
        var identifierColumn = TableInfoUtils.getIdentifierColumn(entityInfo);
        var autoNumberDefault = (identifierColumn === null || identifierColumn === void 0 ? void 0 : identifierColumn.type) === DBDataType_1.default.INTEGER ? 0 : "0";
        return {
            KEY: entityInfo.key,
            MODULEKEY: entityInfo.moduleKey,
            UPGRADESTATUS: EntityUpgradeStatus_1.default.Unchanged,
            NAME: entityInfo.name,
            TABLENAME: entityInfo.tableName,
            HASH: entityInfo.hash,
            LASTIDENTIFIER: identifierColumn && entityInfo.idIsAutoNumber !== AutoNumber_1.default.No ? autoNumberDefault : undefined,
            EXTRAINFO: JSON.stringify(extraInfoMetadata),
        };
    }
    function makeExtraInfoMetadata(entityInfo) {
        var attributesMetadataRecord = {};
        entityInfo.attributes.map(function (attr) {
            attributesMetadataRecord[attr.columnName] = {
                type: attr.type,
                isPrimaryKey: attr.isPrimaryKey,
                length: attr.length,
                decimals: attr.decimals,
                isEntityReference: attr.isEntityReference,
            };
        });
        return {
            v: 2,
            idIsAutoNumber: entityInfo.idIsAutoNumber,
            attrs: attributesMetadataRecord,
        };
    }
});
//# sourceMappingURL=EntityModelUtils.js.map;
define('OutSystems/ClientRuntime/modules/Database/Common/EntityModelInitializer',["require", "exports", "tslib", "../../../Logger", "../Metadata/EntityUpgradeStatus", "../Metadata/MetadataTableInfo", "./EntityModelUtils"], function (require, exports, tslib_1, Logger, EntityUpgradeStatus_1, MetadataTableInfo_1, EntityModelUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EntityModelInitializer = (function () {
        function EntityModelInitializer(entityInfos, serializer) {
            this.entityInfos = entityInfos;
            this.serializer = serializer;
        }
        EntityModelInitializer.prototype.isNeeded = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var existsMetadataTable, moduleKey, storedMetadata, _loop_1, _i, _a, entity, state_1, _loop_2, this_1, _b, storedMetadata_1, storedEntity, state_2;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!this.hasEntityInfos()) return [3, 3];
                            return [4, transaction.existsTable(MetadataTableInfo_1.default)];
                        case 1:
                            existsMetadataTable = _c.sent();
                            if (!existsMetadataTable) {
                                return [2, true];
                            }
                            moduleKey = EntityModelUtils.getFirstItem(this.entityInfos).moduleKey;
                            return [4, EntityModelUtils.loadStoredMetadata(transaction, moduleKey)];
                        case 2:
                            storedMetadata = _c.sent();
                            _loop_1 = function (entity) {
                                var entityStored = EntityModelUtils.getFirstItem(storedMetadata.filter(function (m) { return m.KEY === entity.key; }));
                                if (!entityStored ||
                                    entityStored.HASH !== entity.hash ||
                                    entityStored.UPGRADESTATUS !== EntityUpgradeStatus_1.default.Unchanged ||
                                    entityStored.TABLENAME !== entity.tableName) {
                                    return { value: true };
                                }
                            };
                            for (_i = 0, _a = this.entityInfos; _i < _a.length; _i++) {
                                entity = _a[_i];
                                state_1 = _loop_1(entity);
                                if (typeof state_1 === "object")
                                    return [2, state_1.value];
                            }
                            _loop_2 = function (storedEntity) {
                                if (!this_1.entityInfos.some(function (m) { return m.key === storedEntity.KEY; })) {
                                    return { value: true };
                                }
                            };
                            this_1 = this;
                            for (_b = 0, storedMetadata_1 = storedMetadata; _b < storedMetadata_1.length; _b++) {
                                storedEntity = storedMetadata_1[_b];
                                state_2 = _loop_2(storedEntity);
                                if (typeof state_2 === "object")
                                    return [2, state_2.value];
                            }
                            _c.label = 3;
                        case 3: return [2, false];
                    }
                });
            });
        };
        EntityModelInitializer.prototype.run = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var moduleKey, storedMetadata, _loop_3, this_2, _i, _a, entityInfo;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.hasEntityInfos()) {
                                return [2];
                            }
                            moduleKey = EntityModelUtils.getFirstItem(this.entityInfos).moduleKey;
                            this.trace("Running initializer for entities of module '".concat(moduleKey, "'."));
                            return [4, EntityModelUtils.recoverBackupTables(transaction, this.entityInfos, moduleKey)];
                        case 1:
                            _b.sent();
                            if (!(this.entityInfos.length > 0)) return [3, 3];
                            return [4, EntityModelUtils.dropInconsistentTables(transaction, this.entityInfos, moduleKey)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3: return [4, EntityModelUtils.backupDeletedTables(transaction, this.entityInfos, moduleKey)];
                        case 4:
                            _b.sent();
                            return [4, EntityModelUtils.loadStoredMetadata(transaction, moduleKey)];
                        case 5:
                            storedMetadata = _b.sent();
                            _loop_3 = function (entityInfo) {
                                var tableInfo, tableMetadata;
                                return tslib_1.__generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            tableInfo = entityInfo;
                                            tableMetadata = EntityModelUtils.getFirstItem(storedMetadata.filter(function (m) { return m.KEY === tableInfo.key; }));
                                            return [4, EntityModelUtils.createOrUpgradeTable(transaction, tableInfo, tableMetadata, this_2.serializer)];
                                        case 1:
                                            _c.sent();
                                            return [2];
                                    }
                                });
                            };
                            this_2 = this;
                            _i = 0, _a = this.entityInfos;
                            _b.label = 6;
                        case 6:
                            if (!(_i < _a.length)) return [3, 9];
                            entityInfo = _a[_i];
                            return [5, _loop_3(entityInfo)];
                        case 7:
                            _b.sent();
                            _b.label = 8;
                        case 8:
                            _i++;
                            return [3, 6];
                        case 9:
                            this.trace("Initializer for entities of module '".concat(moduleKey, "' ran successfully."));
                            return [2];
                    }
                });
            });
        };
        EntityModelInitializer.prototype.cleanup = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var moduleKey;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.hasEntityInfos()) {
                                return [2];
                            }
                            moduleKey = EntityModelUtils.getFirstItem(this.entityInfos).moduleKey;
                            this.trace("Running initializer cleanup for entities of module '".concat(moduleKey, "'."));
                            return [4, EntityModelUtils.dropBackupTables(transaction, moduleKey)];
                        case 1:
                            _a.sent();
                            this.trace("Initializer cleanup for entities of module '".concat(moduleKey, "' ran successfully."));
                            return [2];
                    }
                });
            });
        };
        EntityModelInitializer.prototype.hasEntityInfos = function () {
            return this.entityInfos && this.entityInfos.length > 0;
        };
        EntityModelInitializer.prototype.trace = function (message) {
            Logger.trace(this, message);
        };
        return EntityModelInitializer;
    }());
    exports.default = EntityModelInitializer;
});
//# sourceMappingURL=EntityModelInitializer.js.map;
define('OutSystems/ClientRuntime/modules/Database/Common/EntityService',["require", "exports", "tslib", "../../../DataTypes", "../../../Exceptions", "../../../Logger", "../Metadata/MetadataTableInfo", "../Metadata/MetadataTableInitializer", "../TableInfoUtils", "./EntityModelInitializer", "./ValueConstraintValidation"], function (require, exports, tslib_1, DataTypes_1, Exceptions_1, Logger, MetadataTableInfo_1, MetadataTableInitializer_1, TableInfoUtils, EntityModelInitializer_1, ValueConstraintValidation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EntityIdOutputTypeFactory = new DataTypes_1.BasicTypeKeyedTypeFactory("Id", "idOut");
    var EntityRecordOutputTypeFactory = new DataTypes_1.ComplexTypeKeyedTypeFactory("Record", "recordOut");
    var EntityService = (function () {
        function EntityService(serializer) {
            this._serializer = serializer;
        }
        Object.defineProperty(EntityService.prototype, "database", {
            get: function () {
                return this._database;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(EntityService.prototype, "serializer", {
            get: function () {
                return this._serializer;
            },
            enumerable: false,
            configurable: true
        });
        EntityService.prototype.setDatabase = function (database) {
            Logger.trace(this, "Registering initializer for entity meta info table.");
            this._database = database;
            this._database.registerInitializer(MetadataTableInitializer_1.default);
        };
        EntityService.prototype.getDatabase = function () {
            var _this = this;
            if (!this.databasePromise) {
                this.databasePromise = new Promise(function (resolve) {
                    _this.releaseDatabaseForUse = function () { return resolve(_this.database); };
                });
            }
            return this.databasePromise;
        };
        EntityService.prototype.registerInitializer = function (entityInfos) {
            if (entityInfos && entityInfos.length > 0) {
                Logger.trace(this, "Registering initializer for entities of module '".concat(entityInfos[0].moduleKey, "'."));
                var initializer = new EntityModelInitializer_1.default(entityInfos, this.serializer);
                this.database.registerInitializer(initializer);
            }
        };
        EntityService.prototype.setReady = function () {
            Logger.trace(this, "Releasing the database as ready for use.");
            if (this.databasePromise) {
                this.releaseDatabaseForUse();
            }
            else {
                this.databasePromise = Promise.resolve(this.database);
            }
        };
        EntityService.wrap = function (recordToWrap, wrappingType) {
            var recordAttr = wrappingType.getAttributes()[0];
            var result = new wrappingType();
            result[recordAttr.attrName] = recordToWrap;
            return result;
        };
        EntityService.unwrap = function (wrappingRecord) {
            var recordAttr = wrappingRecord.getAttributes()[0];
            return wrappingRecord[recordAttr.attrName];
        };
        EntityService.getWrappedType = function (wrappingType) {
            var recordAttr = wrappingType.getAttributes()[0];
            return recordAttr.complexType;
        };
        EntityService.prototype.create = function (info, wrappingRecord) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, record, recordId, error_1, pkAttr, result;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            record = EntityService.unwrap(wrappingRecord);
                            (0, ValueConstraintValidation_1.validateRecordForCreateOrUpdate)(info, record, "create");
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeTransaction(function (tx) { return _this.innerCreate(tx, info, record); }, true, [
                                    MetadataTableInfo_1.default,
                                    info,
                                ])];
                        case 3:
                            recordId = _a.sent();
                            return [3, 5];
                        case 4:
                            error_1 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_1.message, error_1.stack);
                        case 5:
                            if (recordId === null) {
                                return [2, null];
                            }
                            pkAttr = TableInfoUtils.getIdentifierAttribute(info, record);
                            result = new (EntityIdOutputTypeFactory.getType(pkAttr.dataType))();
                            result.idOut = recordId;
                            return [2, result];
                    }
                });
            });
        };
        EntityService.prototype.innerCreate = function (transaction, info, record) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var recordId, pkCol;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.insertRecord(info, this.serializer.serialize(record, info))];
                        case 1:
                            recordId = _a.sent();
                            pkCol = TableInfoUtils.getIdentifierColumn(info);
                            if (!pkCol) {
                                return [2, null];
                            }
                            return [2, this.serializer.deserialize(recordId, pkCol)];
                    }
                });
            });
        };
        EntityService.prototype.update = function (info, wrappingRecord) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, record, error_2;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            record = EntityService.unwrap(wrappingRecord);
                            (0, ValueConstraintValidation_1.validateRecordForCreateOrUpdate)(info, record, "update");
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeTransaction(function (tx) { return _this.innerUpdate(tx, info, record); }, true, [
                                    MetadataTableInfo_1.default,
                                    info,
                                ])];
                        case 3:
                            _a.sent();
                            return [3, 5];
                        case 4:
                            error_2 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_2.message, error_2.stack);
                        case 5: return [2];
                    }
                });
            });
        };
        EntityService.prototype.innerUpdate = function (transaction, info, record) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    return [2, transaction.updateRecord(info, this.serializer.serialize(record, info))];
                });
            });
        };
        EntityService.prototype.createOrUpdate = function (info, wrappingRecord) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, record, recordId, error_3, idAttr, result;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            record = EntityService.unwrap(wrappingRecord);
                            (0, ValueConstraintValidation_1.validateRecordForCreateOrUpdate)(info, record, "create or update");
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeTransaction(function (tx) { return _this.innerCreateOrUpdate(tx, info, record); }, true, [MetadataTableInfo_1.default, info])];
                        case 3:
                            recordId = _a.sent();
                            return [3, 5];
                        case 4:
                            error_3 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_3.message, error_3.stack);
                        case 5:
                            idAttr = TableInfoUtils.getIdentifierAttribute(info, record);
                            result = new (EntityIdOutputTypeFactory.getType(idAttr.dataType))();
                            result.idOut = recordId;
                            return [2, result];
                    }
                });
            });
        };
        EntityService.prototype.innerCreateOrUpdate = function (transaction, info, record) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var recordId, pkCol;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.upsertRecord(info, this.serializer.serialize(record, info))];
                        case 1:
                            recordId = _a.sent();
                            pkCol = TableInfoUtils.getIdentifierColumn(info);
                            if (!pkCol) {
                                return [2, null];
                            }
                            return [2, this.serializer.deserialize(recordId, pkCol)];
                    }
                });
            });
        };
        EntityService.prototype.createOrUpdateAll = function (info, list) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, records, i, wrappingRecord, record, error_4;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            records = [];
                            for (i = 0; i < list.length; i++) {
                                wrappingRecord = list.getItem(i);
                                record = EntityService.unwrap(wrappingRecord);
                                (0, ValueConstraintValidation_1.validateRecordForCreateOrUpdate)(info, record, "create or update");
                                records.push(record);
                            }
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                    return [2, this.innerCreateOrUpdateAll(tx, info, records)];
                                }); }); }, true, [
                                    MetadataTableInfo_1.default,
                                    info,
                                ])];
                        case 3:
                            _a.sent();
                            return [3, 5];
                        case 4:
                            error_4 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_4.message, error_4.stack);
                        case 5: return [2];
                    }
                });
            });
        };
        EntityService.prototype.innerCreateOrUpdateAll = function (transaction, info, records) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    return [2, transaction.upsertAllRecords(info, records.map(function (record) { return _this.serializer.serialize(record, info); }))];
                });
            });
        };
        EntityService.prototype.get = function (info, id) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, record, error_5, result;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            record = null;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeReadTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                    return [2, this.innerGet(tx, info, id)];
                                }); }); }, true, [
                                    info,
                                ])];
                        case 3:
                            record = _a.sent();
                            return [3, 5];
                        case 4:
                            error_5 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_5.message, error_5.stack);
                        case 5:
                            if (!record) {
                                throw new Exceptions_1.Exceptions.DataBaseException("", "".concat(info.tableName, " with id ").concat(id, " was not found"));
                            }
                            else {
                                result = new (EntityRecordOutputTypeFactory.getType(info.implicitAnonymousType))();
                                result.recordOut = EntityService.wrap(record, info.implicitAnonymousType);
                                return [2, result];
                            }
                            return [2];
                    }
                });
            });
        };
        EntityService.prototype.innerGet = function (transaction, info, id) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var idCol, record;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            idCol = TableInfoUtils.getIdentifierColumn(info);
                            return [4, transaction.getRecord(info, this.serializer.serialize(id, idCol))];
                        case 1:
                            record = _a.sent();
                            if (!record) {
                                return [2, null];
                            }
                            else {
                                return [2, this.serializer.deserialize(record, info, EntityService.getWrappedType(info.implicitAnonymousType))];
                            }
                            return [2];
                    }
                });
            });
        };
        EntityService.prototype.delete = function (info, id) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, error_6;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeTransaction(function (tx) { return _this.innerDelete(tx, info, id); }, true, [
                                    MetadataTableInfo_1.default,
                                    info,
                                ])];
                        case 3:
                            _a.sent();
                            return [3, 5];
                        case 4:
                            error_6 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_6.message, error_6.stack);
                        case 5: return [2];
                    }
                });
            });
        };
        EntityService.prototype.innerDelete = function (transaction, info, id) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var idCol;
                return tslib_1.__generator(this, function (_a) {
                    idCol = TableInfoUtils.getIdentifierColumn(info);
                    return [2, transaction.removeRecord(info, this.serializer.serialize(id, idCol))];
                });
            });
        };
        EntityService.prototype.deleteAll = function (info) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var db, error_7;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            db = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, db.executeTransaction(function (tx) { return _this.innerDeleteAll(tx, info); }, true, [
                                    MetadataTableInfo_1.default,
                                    info,
                                ])];
                        case 3:
                            _a.sent();
                            return [3, 5];
                        case 4:
                            error_7 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_7.message, error_7.stack);
                        case 5: return [2];
                    }
                });
            });
        };
        EntityService.prototype.innerDeleteAll = function (transaction, info) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    return [2, transaction.removeAllRecords(info)];
                });
            });
        };
        return EntityService;
    }());
    exports.default = EntityService;
});
//# sourceMappingURL=EntityService.js.map;
define('OutSystems/ClientRuntime/modules/Database/Common/Serializer',["require", "exports", "../../../DataTypes", "../../../Exceptions", "../../../Logger", "../../../Settings", "../AutoNumber", "../DatabaseTypeUtils", "../DBDataType", "../TableInfoUtils"], function (require, exports, DataTypes_1, Exceptions_1, Logger, Settings_1, AutoNumber_1, DatabaseTypeUtils_1, DBDataType_1, TableInfoUtils) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NULLDATE_IN_DB = "1900-01-01 00:00:00";
    var MASK_4_ZEROES = "0000";
    var MASK_2_ZEROES = "00";
    var Serializer = (function () {
        function Serializer() {
            var _this = this;
            this.serializers = new Map();
            this.deserializers = new Map();
            this.serializers.set(DBDataType_1.default.BINARY_DATA, function (value, typeInfo) {
                return _this.serializeBinaryData(value, typeInfo);
            });
            this.serializers.set(DBDataType_1.default.BOOLEAN, function (value, typeInfo) { return _this.serializeBoolean(value, typeInfo); });
            this.serializers.set(DBDataType_1.default.DATE, function (value, typeInfo) { return _this.serializeDate(value, typeInfo); });
            this.serializers.set(DBDataType_1.default.DATE_TIME, function (value, typeInfo) {
                return _this.serializeDateTime(value, typeInfo);
            });
            this.serializers.set(DBDataType_1.default.DECIMAL, function (value, typeInfo) { return _this.serializeDecimal(value, typeInfo); });
            this.serializers.set(DBDataType_1.default.INTEGER, function (value, typeInfo) { return _this.serializeInteger(value, typeInfo); });
            this.serializers.set(DBDataType_1.default.LONGINTEGER, function (value, typeInfo) {
                return _this.serializeLongInteger(value, typeInfo);
            });
            this.serializers.set(DBDataType_1.default.TEXT, function (value, typeInfo) { return _this.serializeText(value, typeInfo); });
            this.serializers.set(DBDataType_1.default.TIME, function (value, typeInfo) { return _this.serializeTime(value, typeInfo); });
            this.deserializers.set(DBDataType_1.default.BINARY_DATA, function (value, typeInfo) {
                return _this.deserializeBinaryData(value, typeInfo);
            });
            this.deserializers.set(DBDataType_1.default.BOOLEAN, function (value, typeInfo) {
                return _this.deserializeBoolean(value, typeInfo);
            });
            this.deserializers.set(DBDataType_1.default.DATE, function (value, typeInfo) { return _this.deserializeDate(value, typeInfo); });
            this.deserializers.set(DBDataType_1.default.DATE_TIME, function (value, typeInfo) {
                return _this.deserializeDateTime(value, typeInfo);
            });
            this.deserializers.set(DBDataType_1.default.DECIMAL, function (value, typeInfo) {
                return _this.deserializeDecimal(value, typeInfo);
            });
            this.deserializers.set(DBDataType_1.default.INTEGER, function (value, typeInfo) {
                return _this.deserializeInteger(value, typeInfo);
            });
            this.deserializers.set(DBDataType_1.default.LONGINTEGER, function (value, typeInfo) {
                return _this.deserializeLongInteger(value, typeInfo);
            });
            this.deserializers.set(DBDataType_1.default.TEXT, function (value, typeInfo) { return _this.deserializeText(value, typeInfo); });
            this.deserializers.set(DBDataType_1.default.TIME, function (value, typeInfo) { return _this.deserializeTime(value, typeInfo); });
        }
        Object.defineProperty(Serializer, "NULLDATE_IN_DB", {
            get: function () {
                return NULLDATE_IN_DB;
            },
            enumerable: false,
            configurable: true
        });
        Serializer.maskValue = function (value, mask) {
            var maskLength = mask.length;
            var strValue = value.toString();
            return mask.substr(0, Math.max(0, maskLength - strValue.length)) + strValue;
        };
        Serializer.maskFourZeroes = function (value) {
            return Serializer.maskValue(value, MASK_4_ZEROES);
        };
        Serializer.maskTwoZeroes = function (value) {
            return Serializer.maskValue(value, MASK_2_ZEROES);
        };
        Serializer.prototype.serialize = function (value, info, autoNumber) {
            if (autoNumber === void 0) { autoNumber = AutoNumber_1.default.No; }
            if (value instanceof DataTypes_1.GenericRecord) {
                return this.serializeRecord(value, info);
            }
            else {
                return this.serializeBasicType(value, info, autoNumber);
            }
        };
        Serializer.prototype.serializeRecord = function (record, info) {
            var _this = this;
            Logger.trace(this, "Starting to serialize a record");
            var databaseRecord = {};
            record.getAttributes().forEach(function (attribute) {
                var columnInfo = TableInfoUtils.getMatchingColumn(info, attribute);
                databaseRecord[columnInfo.columnName] = _this.serializeBasicType(record[attribute.attrName], columnInfo, columnInfo.isPrimaryKey ? info.idIsAutoNumber : AutoNumber_1.default.No);
            });
            Logger.trace(this, "Finished serializing a record");
            return databaseRecord;
        };
        Serializer.prototype.serializeInteger = function (value, typeInfo) {
            return value !== null && value !== void 0 ? value : 0;
        };
        Serializer.prototype.serializeText = function (value, typeInfo) {
            return value !== null && value !== void 0 ? value : "";
        };
        Serializer.prototype.serializeBoolean = function (value, typeInfo) {
            return value ? 1 : 0;
        };
        Serializer.prototype.serializeLongInteger = function (value, typeInfo) {
            return value ? value.toString() : "0";
        };
        Serializer.prototype.serializeDecimal = function (value, typeInfo) {
            return !typeInfo.decimals ? value.toString() : value.toFixed(typeInfo.decimals);
        };
        Serializer.prototype.serializeDate = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return value.toISODate();
            }
            else {
                var nativeDate = value.toNative();
                return (Serializer.maskFourZeroes(nativeDate.getFullYear()) +
                    "-" +
                    Serializer.maskTwoZeroes(nativeDate.getMonth() + 1) +
                    "-" +
                    Serializer.maskTwoZeroes(nativeDate.getDate()));
            }
        };
        Serializer.prototype.serializeTime = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return value.toISOTime();
            }
            else {
                var nativeTime = value.toNative();
                return (Serializer.maskTwoZeroes(nativeTime.getHours()) +
                    ":" +
                    Serializer.maskTwoZeroes(nativeTime.getMinutes()) +
                    ":" +
                    Serializer.maskTwoZeroes(nativeTime.getSeconds()));
            }
        };
        Serializer.prototype.serializeDateTime = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return value.toDBDateTime();
            }
            else {
                if (value.eq(DataTypes_1.DateTime.defaultValue)) {
                    return NULLDATE_IN_DB;
                }
                var nativeDateTime = value.toNative();
                return (Serializer.maskFourZeroes(nativeDateTime.getUTCFullYear()) +
                    "-" +
                    Serializer.maskTwoZeroes(nativeDateTime.getUTCMonth() + 1) +
                    "-" +
                    Serializer.maskTwoZeroes(nativeDateTime.getUTCDate()) +
                    " " +
                    Serializer.maskTwoZeroes(nativeDateTime.getUTCHours()) +
                    ":" +
                    Serializer.maskTwoZeroes(nativeDateTime.getUTCMinutes()) +
                    ":" +
                    Serializer.maskTwoZeroes(nativeDateTime.getUTCSeconds()));
            }
        };
        Serializer.prototype.innerSerializeBasicType = function (value, columnInfo, autoNumber) {
            return undefined;
        };
        Serializer.prototype.serializeBasicType = function (value, columnInfo, autoNumber) {
            Logger.trace(this, "Serializing a value of type ".concat(columnInfo.type));
            if (!this.serializers.has(columnInfo.type)) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to serialize ".concat(columnInfo.type, " to a database value."));
            }
            var innerValue = this.innerSerializeBasicType(value, columnInfo, autoNumber);
            if (innerValue !== undefined) {
                return innerValue;
            }
            var serializer = this.serializers.get(columnInfo.type);
            return serializer(value, columnInfo);
        };
        Serializer.prototype.deserialize = function (value, info, complexType) {
            if (complexType) {
                return this.deserializeRecord(value, info, complexType);
            }
            else {
                return this.deserializeBasicType(value, info);
            }
        };
        Serializer.prototype.deserializeRecord = function (record, info, complexType) {
            var _this = this;
            var result = new complexType();
            complexType.getAttributes().forEach(function (attribute) {
                var columnInfo = TableInfoUtils.getMatchingColumn(info, attribute);
                result[attribute.attrName] = _this.deserializeBasicType(record[columnInfo.columnName], columnInfo);
            });
            return result;
        };
        Serializer.prototype.deserializeInteger = function (value, typeInfo) {
            return value;
        };
        Serializer.prototype.deserializeLongInteger = function (value, typeInfo) {
            return DataTypes_1.LongInteger.fromValue(value);
        };
        Serializer.prototype.deserializeDecimal = function (value, typeInfo) {
            return new DataTypes_1.Decimal(value);
        };
        Serializer.prototype.deserializeText = function (value, typeInfo) {
            return value;
        };
        Serializer.prototype.deserializeBoolean = function (value, typeInfo) {
            return value !== 0;
        };
        Serializer.prototype.deserializeDateTime = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return DataTypes_1.DateTime.fromDBDateTime(value);
            }
            else {
                if (value === NULLDATE_IN_DB) {
                    return DataTypes_1.DateTime.defaultValue;
                }
                var DateTimeDbParseRegExp = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;
                var dtParts = DateTimeDbParseRegExp.exec(value);
                var nativeDateTime = new Date();
                nativeDateTime.setUTCFullYear(parseInt(dtParts[1], 10), parseInt(dtParts[2], 10) - 1, parseInt(dtParts[3], 10));
                nativeDateTime.setUTCHours(parseInt(dtParts[4], 10) || 0, parseInt(dtParts[5], 10) || 0, parseInt(dtParts[6], 10) || 0, 0);
                return new DataTypes_1.DateTime(nativeDateTime);
            }
        };
        Serializer.prototype.deserializeDate = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return DataTypes_1.DateTime.fromISODate(value);
            }
            else {
                var DateDbParseRegExp = /^(\d{4})-(\d{2})-(\d{2})$/;
                var dateParts = DateDbParseRegExp.exec(value);
                var nativeDate = new Date();
                nativeDate.setFullYear(parseInt(dateParts[1], 10), parseInt(dateParts[2], 10) - 1, parseInt(dateParts[3], 10));
                nativeDate.setHours(0, 0, 0, 0);
                return new DataTypes_1.DateTime(nativeDate);
            }
        };
        Serializer.prototype.deserializeTime = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return DataTypes_1.DateTime.fromISOTime(value);
            }
            else {
                var TimeDbParseRegExp = /^(\d{2}):(\d{2}):(\d{2})$/;
                var TimeParts = TimeDbParseRegExp.exec(value);
                var nativeTime = new Date();
                nativeTime.setFullYear(1900, 0, 1);
                nativeTime.setHours(parseInt(TimeParts[1], 10) || 0, parseInt(TimeParts[2], 10) || 0, parseInt(TimeParts[3], 10) || 0, 0);
                return new DataTypes_1.DateTime(nativeTime);
            }
        };
        Serializer.prototype.innerDeserializeBasicType = function (value, typeInfo) {
            return undefined;
        };
        Serializer.prototype.deserializeBasicType = function (value, typeInfo) {
            if (!this.deserializers.has(typeInfo.type)) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Unable to deserialize ".concat(typeInfo, " to a runtime value."));
            }
            var innerValue = this.innerDeserializeBasicType(value, typeInfo);
            if (innerValue !== undefined) {
                return innerValue;
            }
            if (value === null) {
                return (0, DatabaseTypeUtils_1.typeDefaultValue)(typeInfo.type);
            }
            var deserializer = this.deserializers.get(typeInfo.type);
            return deserializer(value, typeInfo);
        };
        return Serializer;
    }());
    exports.default = Serializer;
});
//# sourceMappingURL=Serializer.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/IndexedDBSerializer',["require", "exports", "tslib", "../../../DataTypes", "../Common/Serializer", "../DBDataType"], function (require, exports, tslib_1, DataTypes_1, Serializer_1, DBDataType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IndexedDBSerializer = (function (_super) {
        tslib_1.__extends(IndexedDBSerializer, _super);
        function IndexedDBSerializer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IndexedDBSerializer.prototype.serializeBinaryData = function (value, typeInfo) {
            return value.toArrayBuffer() || null;
        };
        IndexedDBSerializer.prototype.deserializeBinaryData = function (value, typeInfo) {
            var blob = value instanceof ArrayBuffer ? new Blob([value]) : value;
            return new DataTypes_1.BinaryData(blob);
        };
        IndexedDBSerializer.prototype.isConversionNeeded = function (from, to) {
            if (this.isConversionNeededBetweenDBDataTypes(from.type, to.type)) {
                return true;
            }
            if (!!from.isEntityReference !== !!to.isEntityReference) {
                return true;
            }
            if (from.length !== undefined) {
                if (from.decimals !== undefined) {
                    return from.length - from.decimals > to.length - to.decimals;
                }
                return from.length > to.length;
            }
            return false;
        };
        IndexedDBSerializer.prototype.isConversionNeededBetweenDBDataTypes = function (from, to) {
            if (from === undefined) {
                return true;
            }
            if (from === to) {
                return false;
            }
            switch (from) {
                case DBDataType_1.default.BOOLEAN:
                    return to !== DBDataType_1.default.INTEGER;
                case DBDataType_1.default.LONGINTEGER:
                    return to !== DBDataType_1.default.TEXT;
                default:
                    return true;
            }
        };
        return IndexedDBSerializer;
    }(Serializer_1.default));
    exports.default = IndexedDBSerializer;
});
//# sourceMappingURL=IndexedDBSerializer.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/Upgrader/IndexedDBMetadataV2Upgrader',["require", "exports", "tslib", "../../../../Exceptions", "../../../../Logger", "../../Common/EntityModelUtils", "../../DatabaseTypeUtils", "../../Metadata/EntityUpgradeStatus", "../../Metadata/MetadataTableInfo"], function (require, exports, tslib_1, Exceptions_1, Logger, EntityModelUtils, DatabaseTypeUtils_1, EntityUpgradeStatus_1, MetadataTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IndexedDBMetadataV2Upgrader = (function () {
        function IndexedDBMetadataV2Upgrader(entityInfos, serializer) {
            this.entityInfos = entityInfos;
            this.serializer = serializer;
            this.VERSION = 2;
        }
        IndexedDBMetadataV2Upgrader.prototype.isNeeded = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var existsMetadataTable, moduleKey, storedMetadata, _loop_1, this_1, _i, _a, entity, state_1;
                var _b, _c;
                return tslib_1.__generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            if (!this.hasEntityInfos()) return [3, 3];
                            return [4, transaction.existsTable(MetadataTableInfo_1.default)];
                        case 1:
                            existsMetadataTable = _d.sent();
                            if (!existsMetadataTable) {
                                return [2, false];
                            }
                            moduleKey = EntityModelUtils.getFirstItem(this.entityInfos).moduleKey;
                            return [4, EntityModelUtils.loadStoredMetadata(transaction, moduleKey)];
                        case 2:
                            storedMetadata = _d.sent();
                            _loop_1 = function (entity) {
                                var entityStored = EntityModelUtils.getFirstItem(storedMetadata.filter(function (m) { return m.KEY === entity.key; }));
                                if (entityStored && ((_c = JSON.parse((_b = entityStored.EXTRAINFO) !== null && _b !== void 0 ? _b : "{}").v) !== null && _c !== void 0 ? _c : 0) < this_1.VERSION) {
                                    return { value: true };
                                }
                            };
                            this_1 = this;
                            for (_i = 0, _a = this.entityInfos; _i < _a.length; _i++) {
                                entity = _a[_i];
                                state_1 = _loop_1(entity);
                                if (typeof state_1 === "object")
                                    return [2, state_1.value];
                            }
                            _d.label = 3;
                        case 3: return [2, false];
                    }
                });
            });
        };
        IndexedDBMetadataV2Upgrader.prototype.run = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var moduleKey, storedMetadata, _loop_2, this_2, _i, _a, entityInfo;
                var _b;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!this.hasEntityInfos()) {
                                return [2];
                            }
                            moduleKey = EntityModelUtils.getFirstItem(this.entityInfos).moduleKey;
                            return [4, EntityModelUtils.loadStoredMetadata(transaction, moduleKey)];
                        case 1:
                            storedMetadata = _c.sent();
                            _loop_2 = function (entityInfo) {
                                var tableMetadata, extraInfo, shouldRecreate, shouldUpgrade;
                                return tslib_1.__generator(this, function (_d) {
                                    switch (_d.label) {
                                        case 0:
                                            this_2.trace("Running initializer for entities of module '".concat(moduleKey, "'."));
                                            tableMetadata = EntityModelUtils.getFirstItem(storedMetadata.filter(function (m) { return m.KEY === entityInfo.key; }));
                                            extraInfo = {};
                                            shouldRecreate = true;
                                            shouldUpgrade = true;
                                            if (tableMetadata) {
                                                extraInfo = JSON.parse((_b = tableMetadata.EXTRAINFO) !== null && _b !== void 0 ? _b : "{}");
                                                shouldRecreate = tableMetadata.UPGRADESTATUS === EntityUpgradeStatus_1.default.Unchanged;
                                                shouldUpgrade = tableMetadata.UPGRADESTATUS === EntityUpgradeStatus_1.default.Recreated;
                                            }
                                            if (!shouldRecreate) return [3, 2];
                                            this_2.trace("Table ".concat(entityInfo.tableName, " (").concat(entityInfo.name, ") exists and will be fully upgraded"));
                                            return [4, EntityModelUtils.recreateTable(transaction, entityInfo, extraInfo, this_2.serializer)];
                                        case 1:
                                            _d.sent();
                                            return [3, 3];
                                        case 2:
                                            this_2.trace("Table ".concat(entityInfo.tableName, " (").concat(entityInfo.name, ") exists and will be skipped"));
                                            _d.label = 3;
                                        case 3:
                                            if (!((shouldUpgrade || shouldRecreate) && entityInfo.attributes.some(function (attr) { return attr.isEntityReference; }))) return [3, 5];
                                            this_2.trace("Table ".concat(entityInfo.tableName, " (").concat(entityInfo.name, ") exists and have its defaults upgraded"));
                                            return [4, this_2.upgradeDefaults(transaction, entityInfo, extraInfo, this_2.serializer)];
                                        case 4:
                                            _d.sent();
                                            return [3, 6];
                                        case 5:
                                            this_2.trace("Table ".concat(entityInfo.tableName, " (").concat(entityInfo.name, ") wasn't upgraded"));
                                            _d.label = 6;
                                        case 6: return [2];
                                    }
                                });
                            };
                            this_2 = this;
                            _i = 0, _a = this.entityInfos;
                            _c.label = 2;
                        case 2:
                            if (!(_i < _a.length)) return [3, 5];
                            entityInfo = _a[_i];
                            return [5, _loop_2(entityInfo)];
                        case 3:
                            _c.sent();
                            _c.label = 4;
                        case 4:
                            _i++;
                            return [3, 2];
                        case 5: return [2];
                    }
                });
            });
        };
        IndexedDBMetadataV2Upgrader.prototype.cleanup = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var moduleKey;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.hasEntityInfos()) {
                                return [2];
                            }
                            moduleKey = EntityModelUtils.getFirstItem(this.entityInfos).moduleKey;
                            this.trace("Running initializer cleanup for entities of module '".concat(moduleKey, "'."));
                            return [4, EntityModelUtils.dropBackupTables(transaction, moduleKey)];
                        case 1:
                            _a.sent();
                            this.trace("Initializer cleanup for entities of module '".concat(moduleKey, "' ran successfully."));
                            return [2];
                    }
                });
            });
        };
        IndexedDBMetadataV2Upgrader.prototype.upgradeDefaults = function (transaction, info, metadata, serializer) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var dbRecords, _i, dbRecords_1, dbRecord, error_1, errorMessage;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 3, , 4]);
                            return [4, transaction.getAllRecords(info)];
                        case 1:
                            dbRecords = _a.sent();
                            for (_i = 0, dbRecords_1 = dbRecords; _i < dbRecords_1.length; _i++) {
                                dbRecord = dbRecords_1[_i];
                                this.fillWithDefaultsIfNull(dbRecord, info, serializer);
                            }
                            return [4, transaction.upsertAllRecords(info, dbRecords)];
                        case 2:
                            _a.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _a.sent();
                            errorMessage = "Unable to upgrade the definition of entity '".concat(info.name, "':\n").concat((0, Exceptions_1.getMessage)(error_1));
                            this.trace(errorMessage);
                            throw new Exceptions_1.Exceptions.DataBaseException("", errorMessage);
                        case 4: return [2];
                    }
                });
            });
        };
        IndexedDBMetadataV2Upgrader.prototype.fillWithDefaultsIfNull = function (dbRecord, info, serializer) {
            for (var _i = 0, _a = info.attributes; _i < _a.length; _i++) {
                var expectedAttr = _a[_i];
                var attrName = expectedAttr.columnName;
                if (expectedAttr.isEntityReference && dbRecord[attrName] === null) {
                    var defaultValue = expectedAttr.default === undefined ? (0, DatabaseTypeUtils_1.typeDefaultValue)(expectedAttr.type) : expectedAttr.default;
                    dbRecord[attrName] = serializer.serialize(defaultValue, expectedAttr);
                }
            }
        };
        IndexedDBMetadataV2Upgrader.prototype.hasEntityInfos = function () {
            return this.entityInfos && this.entityInfos.length > 0;
        };
        IndexedDBMetadataV2Upgrader.prototype.trace = function (message) {
            Logger.trace(this, message);
        };
        return IndexedDBMetadataV2Upgrader;
    }());
    exports.default = IndexedDBMetadataV2Upgrader;
});
//# sourceMappingURL=IndexedDBMetadataV2Upgrader.js.map;
define('OutSystems/ClientRuntime/modules/Database/IndexedDB/IndexedDBEntityService',["require", "exports", "tslib", "../../../DataTypes", "../../../Exceptions", "../../../Logger", "../AutoNumber", "../Common/EntityService", "../Metadata/MetadataTableInfo", "../TableInfoUtils", "./IndexedDBSerializer", "./Upgrader/IndexedDBMetadataV2Upgrader"], function (require, exports, tslib_1, DataTypes_1, Exceptions_1, Logger, AutoNumber_1, EntityService_1, MetadataTableInfo_1, TableInfoUtils, IndexedDBSerializer_1, IndexedDBMetadataV2Upgrader_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var IndexedDBEntityService = (function (_super) {
        tslib_1.__extends(IndexedDBEntityService, _super);
        function IndexedDBEntityService() {
            return _super.call(this, new IndexedDBSerializer_1.default()) || this;
        }
        IndexedDBEntityService.prototype.executeAggregate = function (body, affectedTables) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var database, error_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            database = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, database.executeQuery(body, true, affectedTables)];
                        case 3: return [2, _a.sent()];
                        case 4:
                            error_1 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_1.message, error_1.stack);
                        case 5: return [2];
                    }
                });
            });
        };
        IndexedDBEntityService.prototype.innerCreate = function (transaction, info, record) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var metaDataRecord, pkAttr, dbRecord, identifier;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getMetadataRecord(transaction, info)];
                        case 1:
                            metaDataRecord = (_a.sent());
                            pkAttr = TableInfoUtils.getIdentifierAttribute(info, record);
                            dbRecord = record.clone();
                            if (!(info.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty)) return [3, 3];
                            identifier = this.getRecordIdAndUpdateLastIdentifier(metaDataRecord, info, record);
                            return [4, this.updateMetadataTable(transaction, metaDataRecord)];
                        case 2:
                            _a.sent();
                            dbRecord[pkAttr.attrName] = identifier;
                            _a.label = 3;
                        case 3: return [4, transaction.insertRecord(info, this.serializer.serialize(dbRecord, info))];
                        case 4:
                            _a.sent();
                            if (!pkAttr) {
                                return [2, null];
                            }
                            return [2, dbRecord[pkAttr.attrName]];
                    }
                });
            });
        };
        IndexedDBEntityService.prototype.getRecordIdAndUpdateLastIdentifier = function (metaDataRecord, info, record) {
            var pkCol = TableInfoUtils.getIdentifierColumn(info);
            var pkAttr = TableInfoUtils.getIdentifierAttribute(info, record);
            var identifierValue = TableInfoUtils.getIdentifierValue(info, record);
            if (info.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty) {
                var lastRecordId = metaDataRecord.LASTIDENTIFIER !== undefined
                    ? this.serializer.deserialize(metaDataRecord.LASTIDENTIFIER, pkCol)
                    : (0, DataTypes_1.defaultForType)(pkAttr.dataType);
                if ((0, DataTypes_1.equals)(identifierValue, (0, DataTypes_1.defaultForType)(pkAttr.dataType))) {
                    if (lastRecordId instanceof DataTypes_1.LongInteger) {
                        lastRecordId = lastRecordId.add(1);
                    }
                    else if (typeof lastRecordId === "number") {
                        lastRecordId = lastRecordId + 1;
                    }
                    identifierValue = lastRecordId;
                    metaDataRecord.LASTIDENTIFIER = this.serializer.serialize(identifierValue, pkCol);
                }
                else if ((0, DataTypes_1.compare)(identifierValue, lastRecordId) > 0) {
                    metaDataRecord.LASTIDENTIFIER = this.serializer.serialize(identifierValue, pkCol);
                }
            }
            return identifierValue;
        };
        IndexedDBEntityService.prototype.innerCreateOrUpdate = function (transaction, info, record) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var dbRecord, metaDataRecord, recordId, pkAttr, insertedRecordId, pkCol;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dbRecord = record.clone();
                            if (!(info.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty)) return [3, 3];
                            return [4, this.getMetadataRecord(transaction, info)];
                        case 1:
                            metaDataRecord = (_a.sent());
                            recordId = this.getRecordIdAndUpdateLastIdentifier(metaDataRecord, info, record);
                            return [4, this.updateMetadataTable(transaction, metaDataRecord)];
                        case 2:
                            _a.sent();
                            pkAttr = TableInfoUtils.getIdentifierAttribute(info, record);
                            dbRecord[pkAttr.attrName] = recordId;
                            _a.label = 3;
                        case 3: return [4, transaction.upsertRecord(info, this.serializer.serialize(dbRecord, info))];
                        case 4:
                            insertedRecordId = _a.sent();
                            pkCol = TableInfoUtils.getIdentifierColumn(info);
                            if (!pkCol) {
                                return [2, null];
                            }
                            return [2, this.serializer.deserialize(insertedRecordId, pkCol)];
                    }
                });
            });
        };
        IndexedDBEntityService.prototype.innerCreateOrUpdateAll = function (transaction, info, records) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var metaDataRecord, pkAttr, serializedRecords;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getMetadataRecord(transaction, info)];
                        case 1:
                            metaDataRecord = (_a.sent());
                            serializedRecords = records.map(function (record) {
                                pkAttr = pkAttr !== null && pkAttr !== void 0 ? pkAttr : TableInfoUtils.getIdentifierAttribute(info, record);
                                var dbRecord = record.clone();
                                if (info.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty) {
                                    var newRecordId = _this.getRecordIdAndUpdateLastIdentifier(metaDataRecord, info, record);
                                    dbRecord[pkAttr.attrName] = newRecordId;
                                }
                                return _this.serializer.serialize(dbRecord, info);
                            });
                            return [4, this.updateMetadataTable(transaction, metaDataRecord)];
                        case 2:
                            _a.sent();
                            return [2, transaction.upsertAllRecords(info, serializedRecords)];
                    }
                });
            });
        };
        IndexedDBEntityService.prototype.registerInitializer = function (entityInfos) {
            _super.prototype.registerInitializer.call(this, entityInfos);
            if (entityInfos && entityInfos.length > 0) {
                Logger.trace(this, "Registering V2 upgrader for entities of module '".concat(entityInfos[0].moduleKey, "'."));
                var initializer = new IndexedDBMetadataV2Upgrader_1.default(entityInfos, this.serializer);
                this.database.registerInitializer(initializer);
            }
        };
        IndexedDBEntityService.prototype.getMetadataRecord = function (transaction, info) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var metadataRecord;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.getRecord(MetadataTableInfo_1.default, [info.key, info.moduleKey])];
                        case 1:
                            metadataRecord = _a.sent();
                            if (!metadataRecord) {
                                throw new Error("Unable to fetch record with key ".concat(info.key, " and moduleKey ").concat(info.moduleKey, " from \n                metadata table ").concat(MetadataTableInfo_1.default.tableName, "."));
                            }
                            return [2, metadataRecord];
                    }
                });
            });
        };
        IndexedDBEntityService.prototype.updateMetadataTable = function (transaction, metaDataRecord) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    if (metaDataRecord.LASTIDENTIFIER !== undefined) {
                        return [2, transaction.updateRecord(MetadataTableInfo_1.default, metaDataRecord)];
                    }
                    return [2];
                });
            });
        };
        return IndexedDBEntityService;
    }(EntityService_1.default));
    exports.default = IndexedDBEntityService;
});
//# sourceMappingURL=IndexedDBEntityService.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/WebSQLTransactionMode',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WebSQLTransactionMode;
    (function (WebSQLTransactionMode) {
        WebSQLTransactionMode[WebSQLTransactionMode["Read"] = 0] = "Read";
        WebSQLTransactionMode[WebSQLTransactionMode["Write"] = 1] = "Write";
        WebSQLTransactionMode[WebSQLTransactionMode["Upgrade"] = 2] = "Upgrade";
    })(WebSQLTransactionMode || (WebSQLTransactionMode = {}));
    exports.default = WebSQLTransactionMode;
});
//# sourceMappingURL=WebSQLTransactionMode.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/WebSQLTransaction',["require", "exports", "tslib", "../../../Logger", "../AutoNumber", "../DBDataType", "../TableInfoUtils", "./WebSQLTransactionMode"], function (require, exports, tslib_1, Logger, AutoNumber_1, DBDataType_1, TableInfoUtils, WebSQLTransactionMode_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NEWLINE = "\r\n";
    var sqlTypeMap = new Map();
    sqlTypeMap.set(DBDataType_1.default.BINARY_DATA, "BLOB");
    sqlTypeMap.set(DBDataType_1.default.BOOLEAN, "BOOLEAN");
    sqlTypeMap.set(DBDataType_1.default.DATE, "DATE");
    sqlTypeMap.set(DBDataType_1.default.DATE_TIME, "DATETIME");
    sqlTypeMap.set(DBDataType_1.default.DECIMAL, "REAL");
    sqlTypeMap.set(DBDataType_1.default.INTEGER, "INTEGER");
    sqlTypeMap.set(DBDataType_1.default.LONGINTEGER, "BIGINT");
    sqlTypeMap.set(DBDataType_1.default.TEXT, "TEXT");
    sqlTypeMap.set(DBDataType_1.default.TIME, "TIME");
    function getType(type) {
        var _a;
        return (_a = sqlTypeMap.get(type)) !== null && _a !== void 0 ? _a : "";
    }
    var TRANSACTION_ID_MAX = 1000000000000;
    var WRITE_TRANSACTION_REQUIRED_ERROR = "The transaction is read-only";
    var UPGRADE_TRANSACTION_REQUIRED_ERROR = "The database is not running a version change transaction";
    var WebSQLTransaction = (function () {
        function WebSQLTransaction(allowTraces, transaction, mode) {
            this.allowTraces = allowTraces;
            this.transaction = transaction;
            this.mode = mode;
            WebSQLTransaction.lastTransactionId = (WebSQLTransaction.lastTransactionId + 1) % TRANSACTION_ID_MAX;
            this._transactionId = WebSQLTransaction.lastTransactionId + 1;
            if (this.allowTraces) {
                Logger.trace(this, "Starting transaction ".concat(this.transactionId));
            }
        }
        Object.defineProperty(WebSQLTransaction.prototype, "transactionId", {
            get: function () {
                return this._transactionId;
            },
            enumerable: false,
            configurable: true
        });
        WebSQLTransaction.prototype.executeQuery = function (body) {
            return body(this.transaction);
        };
        WebSQLTransaction.prototype.getColumnDeclaration = function (table, column) {
            var typeWithOptions = "".concat(getType(column.type));
            var primaryKeyDeclaration;
            if (column.isPrimaryKey) {
                if (table.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty || table.idIsAutoNumber === AutoNumber_1.default.Yes) {
                    if (column.type === DBDataType_1.default.LONGINTEGER) {
                        typeWithOptions = "".concat(getType(DBDataType_1.default.INTEGER));
                    }
                    typeWithOptions += " PRIMARY KEY AUTOINCREMENT NOT NULL";
                    return { declaration: "\"".concat(column.columnName, "\" ").concat(typeWithOptions) };
                }
                primaryKeyDeclaration = "\"".concat(column.columnName, "\"");
            }
            if (column.length) {
                typeWithOptions += "(".concat(column.length).concat(column.decimals ? "," + column.decimals : "", ")");
            }
            if (column.serializedDefault !== undefined) {
                var defaultValue = column.serializedDefault;
                if (typeof defaultValue === "string") {
                    defaultValue = "'".concat(defaultValue.replace("'", "''"), "'");
                }
                typeWithOptions += " DEFAULT ".concat(defaultValue);
            }
            return { declaration: "\"".concat(column.columnName, "\" ").concat(typeWithOptions), primaryKeyDeclaration: primaryKeyDeclaration };
        };
        WebSQLTransaction.prototype.createTable = function (table) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Creating table '".concat(table.tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Upgrade) {
                    var error = new Error(UPGRADE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error creating table '".concat(table.tableName, "': ").concat(error.message), error);
                    return reject(error);
                }
                var successCallback = function (transaction, resultSet) {
                    _this.trace("Table '".concat(table.tableName, "' created with success"));
                    resolve();
                };
                var errorCallback = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error creating table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                var columnDeclarations = table.attributes.map(function (attribute) { return _this.getColumnDeclaration(table, attribute); });
                var primaryKeyDeclarations = columnDeclarations
                    .filter(function (declaration) { return !!declaration.primaryKeyDeclaration; })
                    .map(function (declaration) { return declaration.primaryKeyDeclaration; });
                var tableDeclaration = columnDeclarations.map(function (declaration) { return declaration.declaration; });
                if (primaryKeyDeclarations.length > 0) {
                    tableDeclaration.push("PRIMARY KEY (".concat(primaryKeyDeclarations.join(","), ")"));
                }
                _this.transaction.executeSql("CREATE TABLE \"".concat(table.tableName, "\" (").concat(tableDeclaration.join(","), ")"), null, successCallback, errorCallback);
            });
        };
        WebSQLTransaction.prototype.deleteTableIfExists = function (table) {
            var _this = this;
            var tableName;
            if (typeof table === "string") {
                tableName = table;
            }
            else {
                tableName = table.tableName;
            }
            return new Promise(function (resolve, reject) {
                _this.trace("Deleting table '".concat(tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Upgrade) {
                    var error = new Error(UPGRADE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error deleting table '".concat(tableName, "'"), error);
                    return reject(error);
                }
                var successCallback = function (transaction, resultSet) {
                    _this.trace("Table '".concat(tableName, "' deleted with success"));
                    resolve();
                };
                var errorCallback = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error deleting table '".concat(tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("DROP TABLE IF EXISTS \"".concat(tableName, "\""), null, successCallback, errorCallback);
            });
        };
        WebSQLTransaction.prototype.renameTable = function (tableName, newTableName) {
            var _this = this;
            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var error, successCallback, errorCallback;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    this.trace("Renaming table '".concat(tableName, "'"));
                    if (this.mode < WebSQLTransactionMode_1.default.Upgrade) {
                        error = new Error(UPGRADE_TRANSACTION_REQUIRED_ERROR);
                        this.trace("Error renaming table '".concat(tableName, "'"), error);
                        return [2, reject(error)];
                    }
                    successCallback = function (transaction, resultSet) {
                        _this.trace("Table '".concat(tableName, "' renamed to '").concat(newTableName, "' with success"));
                        resolve();
                    };
                    errorCallback = function (transaction, sqlError) {
                        var error = new Error(sqlError.message.toString());
                        _this.trace("Error renaming table '".concat(tableName, "'"), error);
                        reject(error);
                        return false;
                    };
                    this.transaction.executeSql("ALTER TABLE \"".concat(tableName, "\" RENAME TO \"").concat(newTableName, "\""), null, successCallback, errorCallback);
                    return [2];
                });
            }); });
        };
        WebSQLTransaction.prototype.existsTable = function (table) {
            var _this = this;
            var tableName;
            if (typeof table === "string") {
                tableName = table;
            }
            else {
                tableName = table.tableName;
            }
            return new Promise(function (resolve, reject) {
                _this.trace("Checking if table '".concat(tableName, "' exists"));
                var callback = function (transaction, resultSet) {
                    _this.trace("Table '".concat(tableName, "' checked with success"));
                    resolve(resultSet.rows.length > 0);
                };
                var callbackError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error checking if table '".concat(tableName, "' exists"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("SELECT * FROM sqlite_master WHERE type = 'table' AND UPPER(name) = UPPER(\"".concat(tableName, "\")"), null, callback, callbackError);
            });
        };
        WebSQLTransaction.prototype.addColumn = function (table, column) {
            var _this = this;
            return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var columnObjectSerialized, error, successCallback, errorCallback, addColumnSuccessCallback;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    columnObjectSerialized = Logger.serializeObjectForLog(column);
                    this.trace("Adding column '".concat(columnObjectSerialized, "' on table '").concat(table.tableName, "'"));
                    if (this.mode < WebSQLTransactionMode_1.default.Upgrade) {
                        error = new Error(UPGRADE_TRANSACTION_REQUIRED_ERROR);
                        this.trace("Error adding column '".concat(columnObjectSerialized, "'"), error);
                        return [2, reject(error)];
                    }
                    successCallback = function (transaction, resultSet) {
                        _this.trace("Column '".concat(columnObjectSerialized, "' added with success"));
                        resolve();
                    };
                    errorCallback = function (transaction, sqlError) {
                        var error = new Error(sqlError.message.toString());
                        _this.trace("Error adding column '".concat(columnObjectSerialized, "'"), error);
                        reject(error);
                        return false;
                    };
                    addColumnSuccessCallback = function (transaction, resultSet) {
                        transaction.executeSql("UPDATE \"".concat(table.tableName, "\" SET \"").concat(column.columnName, "\" = ?"), [column.serializedDefault], successCallback, errorCallback);
                    };
                    this.transaction.executeSql("ALTER TABLE \"".concat(table.tableName, "\" ADD ").concat(this.getColumnDeclaration(table, column).declaration), null, addColumnSuccessCallback, errorCallback);
                    return [2];
                });
            }); });
        };
        WebSQLTransaction.prototype.existsColumn = function (tableName, columnName) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.trace("Checking if column '".concat(columnName, "' exists on table '").concat(tableName, "'"));
                var callback = function () {
                    _this.trace("Column '".concat(columnName, "' exists on table '").concat(tableName, "'"));
                    resolve(true);
                };
                var callbackError = function () {
                    _this.trace("Column '".concat(columnName, "' does not exist on table '").concat(tableName, "'"));
                    resolve(false);
                    return false;
                };
                _this.transaction.executeSql("SELECT \"".concat(tableName, "\".\"").concat(columnName, "\" FROM \"").concat(tableName, "\" LIMIT 0"), null, callback, callbackError);
            });
        };
        WebSQLTransaction.prototype.getRecord = function (table, key) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Getting record with keys '".concat(key, "' from table '").concat(table.tableName, "'"));
                var wrappedKey = WebSQLTransaction.wrapKeyIfNeeded(key);
                var columnNames = table.attributes.map(function (att) { return "\"".concat(att.columnName, "\""); }).join(", ");
                var tableName = "\"".concat(table.tableName, "\"");
                var primaryKeys = table.attributes.filter(function (att) { return att.isPrimaryKey; });
                var argList = tslib_1.__spreadArray([], wrappedKey, true);
                var keysClause = primaryKeys.map(function (att) { return "\"".concat(att.columnName, "\" = ?"); }).join(" and ");
                var onSuccess = function (transaction, resultSet) {
                    _this.trace("Retrieved record with keys '".concat(key, "' from table '").concat(table.tableName, "' successfully"));
                    var dbResult = WebSQLTransaction.convertSQLResultSetToDatabaseRecord(table, resultSet);
                    resolve(dbResult.length > 0 ? dbResult[0] : null);
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error retrieving record with keys '".concat(key, "' from table '").concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("SELECT ".concat(columnNames, " FROM ").concat(tableName, " WHERE ").concat(keysClause), argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.insertRecord = function (table, record) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Inserting record on table '".concat(table.tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Write) {
                    var error = new Error(WRITE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error inserting record on table '".concat(table.tableName, "'"), error);
                    return reject(error);
                }
                var primaryKeys = table.attributes.filter(function (att) { return att.isPrimaryKey; });
                var columnNames = table.attributes.map(function (att) { return "\"".concat(att.columnName, "\""); }).join(", ");
                var placeholders = WebSQLTransaction.concatenateMultipleTimes("?", table.attributes.length, ", ");
                var tableName = "\"".concat(table.tableName, "\"");
                var argList = table.attributes.map(function (att) {
                    return record[att.columnName] === undefined ? null : record[att.columnName];
                });
                var onSuccess = function (transaction, resultSet) {
                    var _a, _b;
                    _this.trace("Inserted record on table '".concat(table.tableName, "' successfully"));
                    var id = null;
                    if (table.idIsAutoNumber === AutoNumber_1.default.No ||
                        (table.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty && record[(_a = primaryKeys[0]) === null || _a === void 0 ? void 0 : _a.columnName] !== null)) {
                        id = record[(_b = primaryKeys[0]) === null || _b === void 0 ? void 0 : _b.columnName];
                    }
                    else {
                        id = resultSet.insertId;
                    }
                    resolve(id);
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error inserting record on table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("INSERT INTO ".concat(tableName, " (").concat(columnNames, ") VALUES (").concat(placeholders, ")"), argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.updateRecord = function (table, record) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Updating record on table '".concat(table.tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Write) {
                    var error = new Error(WRITE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error updating record on table '".concat(table.tableName, "'"), error);
                    return reject(error);
                }
                var notKeyColumns = table.attributes.filter(function (att) { return !att.isPrimaryKey; });
                var primaryKeys = table.attributes.filter(function (att) { return att.isPrimaryKey; });
                var columnsToUpdate = notKeyColumns.map(function (att) { return "\"".concat(att.columnName, "\" = ?"); }).join(", ");
                var whereClause = primaryKeys.map(function (att) { return "\"".concat(att.columnName, "\" = ?"); }).join(" and ");
                var tableName = "\"".concat(table.tableName, "\"");
                var argList = [];
                notKeyColumns.forEach(function (att) { return argList.push(record[att.columnName]); });
                primaryKeys.forEach(function (att) { return argList.push(record[att.columnName]); });
                var onSuccess = function (transaction, resultSet) {
                    if (resultSet.rowsAffected === 0) {
                        _this.trace("Record to update does not exist on table '".concat(table.tableName, "'"));
                    }
                    else {
                        _this.trace("Updated record on table '".concat(table.tableName, "' successfully"));
                    }
                    resolve();
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error updating record on table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("UPDATE ".concat(tableName, " SET ").concat(columnsToUpdate, " WHERE ").concat(whereClause), argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.upsertRecord = function (table, record) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Adding/updating record on table '".concat(table.tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Write) {
                    var error = new Error(WRITE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error adding/updating record on table '".concat(table.tableName, "'"), error);
                    return reject(error);
                }
                var primaryKeys = table.attributes.filter(function (att) { return att.isPrimaryKey; });
                var columnNames = table.attributes.map(function (att) { return "\"".concat(att.columnName, "\""); }).join(", ");
                var placeholders = WebSQLTransaction.concatenateMultipleTimes("?", table.attributes.length, ", ");
                var tableName = "\"".concat(table.tableName, "\"");
                var argList = table.attributes.map(function (att) { return record[att.columnName]; });
                var onSuccess = function (transaction, resultSet) {
                    var _a, _b;
                    _this.trace("Added/updated record on table '".concat(table.tableName, "' successfully"));
                    var id = null;
                    if (table.idIsAutoNumber === AutoNumber_1.default.No ||
                        (table.idIsAutoNumber === AutoNumber_1.default.YesIfEmpty && record[(_a = primaryKeys[0]) === null || _a === void 0 ? void 0 : _a.columnName] !== null)) {
                        id = record[(_b = primaryKeys[0]) === null || _b === void 0 ? void 0 : _b.columnName];
                    }
                    else {
                        id = resultSet.insertId;
                    }
                    resolve(id);
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error adding/updating record on table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("INSERT OR REPLACE INTO ".concat(tableName, " (").concat(columnNames, ") VALUES (").concat(placeholders, ")"), argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.upsertAllRecords = function (table, records) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var error, hasBinaryData, error_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.trace("Adding/updating ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "'"));
                            if (this.mode < WebSQLTransactionMode_1.default.Write) {
                                error = new Error(WRITE_TRANSACTION_REQUIRED_ERROR);
                                this.trace("Error adding/updating records on table '".concat(table.tableName, "'"), error);
                                throw error;
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            hasBinaryData = table.attributes.some(function (attr) { return attr.type === DBDataType_1.default.BINARY_DATA; });
                            if (!hasBinaryData) return [3, 3];
                            return [4, this.innerUpsertAllSingle(table, records)];
                        case 2:
                            _a.sent();
                            return [3, 5];
                        case 3: return [4, this.innerUpsertAllBulk(table, records)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            this.trace("Added/updated ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "' successfully"));
                            return [3, 7];
                        case 6:
                            error_1 = _a.sent();
                            this.trace("Error adding/updating ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "'"), error_1);
                            throw error_1;
                        case 7: return [2];
                    }
                });
            });
        };
        WebSQLTransaction.prototype.innerUpsertAllSingle = function (table, records) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _i, records_1, record;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.trace("Adding/updating ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "' one by one"));
                            _i = 0, records_1 = records;
                            _a.label = 1;
                        case 1:
                            if (!(_i < records_1.length)) return [3, 4];
                            record = records_1[_i];
                            return [4, this.upsertRecord(table, record)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4: return [2];
                    }
                });
            });
        };
        WebSQLTransaction.prototype.innerUpsertAllBulk = function (table, records) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var chunkSize, commands, chunkCount, _loop_1, this_1, i, currentChunk, _i, commands_1, command;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            chunkSize = Math.floor(WebSQLTransaction.MaxQueryParameters / table.attributes.length);
                            if (chunkSize === 0) {
                                return [2, this.innerUpsertAllSingle(table, records)];
                            }
                            commands = [];
                            chunkCount = Math.ceil(records.length / chunkSize);
                            this.trace("Adding/updating ".concat(records === null || records === void 0 ? void 0 : records.length, " record(s) on table '").concat(table.tableName, "' in ").concat(chunkCount, " chunk(s) of ").concat(chunkSize, " record(s) each"));
                            _loop_1 = function (i) {
                                var argList = [];
                                var recordCount = 0;
                                var _loop_2 = function () {
                                    var idx = i * chunkSize + recordCount;
                                    if (idx === records.length) {
                                        return "break";
                                    }
                                    var record = records[idx];
                                    table.attributes.forEach(function (att) { return argList.push(record[att.columnName]); });
                                    recordCount++;
                                };
                                while (recordCount < chunkSize) {
                                    var state_1 = _loop_2();
                                    if (state_1 === "break")
                                        break;
                                }
                                var query = this_1.createUpsertBulkQuery(table, recordCount);
                                commands.push({ query: query, argList: argList });
                            };
                            this_1 = this;
                            for (i = 0; i < chunkCount; i++) {
                                _loop_1(i);
                            }
                            currentChunk = 0;
                            _i = 0, commands_1 = commands;
                            _a.label = 1;
                        case 1:
                            if (!(_i < commands_1.length)) return [3, 4];
                            command = commands_1[_i];
                            this.trace("Adding/updating chunk ".concat(++currentChunk, " of ").concat(chunkCount, " on table '").concat(table.tableName, "'"));
                            return [4, this.wrapExecuteSqlOnPromise(command, table)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3, 1];
                        case 4: return [2];
                    }
                });
            });
        };
        WebSQLTransaction.prototype.wrapExecuteSqlOnPromise = function (command, table) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var onSuccess = function (transaction, resultSet) {
                    _this.trace("Added/Updated bulk of records on table '".concat(table.tableName, "' successfully"));
                    resolve();
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error adding/updating bulk of records on table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql(command.query, command.argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.createUpsertBulkQuery = function (table, recordCount) {
            var columnNames = table.attributes.map(function (att) { return "\"".concat(att.columnName, "\""); }).join(", ");
            var tableName = "\"".concat(table.tableName, "\"");
            var placeholders = "(".concat(WebSQLTransaction.concatenateMultipleTimes("?", table.attributes.length, ", "), ")");
            var bulkPlaceholders = WebSQLTransaction.concatenateMultipleTimes(placeholders, recordCount, ", ");
            return "INSERT OR REPLACE INTO ".concat(tableName, " (").concat(columnNames, ") VALUES ").concat(bulkPlaceholders);
        };
        WebSQLTransaction.prototype.removeRecord = function (table, key) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Deleting record with key '".concat(key, "' from table '").concat(table.tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Write) {
                    var error = new Error(WRITE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error deleting record from table '".concat(table.tableName, "'"), error);
                    return reject(error);
                }
                var wrappedKey = WebSQLTransaction.wrapKeyIfNeeded(key);
                var tableName = "\"".concat(table.tableName, "\"");
                var primaryKeys = table.attributes.filter(function (att) { return att.isPrimaryKey; });
                var argList = tslib_1.__spreadArray([], wrappedKey, true);
                var keysClause = primaryKeys.map(function (att) { return "\"".concat(att.columnName, "\" = ?"); }).join(" AND ");
                var onSuccess = function (transaction, resultSet) {
                    _this.trace("Deleted record with key '".concat(key, "' from table '").concat(table.tableName, "' successfully"));
                    resolve();
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error deleting record with key '".concat(key, "' from table '").concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("DELETE FROM ".concat(tableName, " WHERE ").concat(keysClause === "" ? "ROWID = ?" : keysClause), argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.removeAllRecords = function (table) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Deleting all records from table '".concat(table.tableName, "'"));
                if (_this.mode < WebSQLTransactionMode_1.default.Write) {
                    var error = new Error(WRITE_TRANSACTION_REQUIRED_ERROR);
                    _this.trace("Error deleting all records from table '".concat(table.tableName, "'"), error);
                    return reject(error);
                }
                var tableName = "\"".concat(table.tableName, "\"");
                var onSuccess = function (transaction, resultSet) {
                    _this.trace("Deleted all records from table '".concat(table.tableName, "' successfully"));
                    resolve();
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error deleting all records from table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("DELETE FROM ".concat(tableName), null, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.findRecords = function (table, criteria) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Searching for all records on table '".concat(table.tableName, "' that match the specified criteria"));
                var hasPrimaryKey = TableInfoUtils.getIdentifierColumns(table).length > 0 ? true : false;
                var columnNames = (!hasPrimaryKey ? "\"rowid\" AS \"ROWID\", " : "") +
                    table.attributes.map(function (att) { return "\"".concat(att.columnName, "\""); }).join(", ");
                var tableName = "\"".concat(table.tableName, "\"");
                var criteriaClauses = "";
                var argList = [];
                for (var key in criteria) {
                    if (criteria.hasOwnProperty(key)) {
                        var logic = criteriaClauses.length > 0 ? " AND " : "";
                        criteriaClauses += "".concat(logic, "\"").concat(TableInfoUtils.formatObjectName(key), "\" = ?");
                        argList.push(criteria[key]);
                    }
                }
                var onSuccess = function (transaction, resultSet) {
                    _this.trace("Search on table '".concat(table.tableName, "' found ").concat(resultSet.rows.length, " record(s) matching the specified criteria"));
                    var dbResult = WebSQLTransaction.convertSQLResultSetToDatabaseRecord(table, resultSet);
                    resolve(dbResult);
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error searching for records on table '".concat(table.tableName, "'").concat(NEWLINE).concat(error), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("SELECT ".concat(columnNames, " FROM ").concat(tableName, " WHERE ").concat(criteriaClauses), argList, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.getAllRecords = function (table) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.trace("Getting all records on table '".concat(table.tableName, "'"));
                var hasPrimaryKey = TableInfoUtils.getIdentifierColumns(table).length > 0 ? true : false;
                var columnNames = (!hasPrimaryKey ? "\"rowid\" AS \"ROWID\", " : "") +
                    table.attributes.map(function (att) { return "\"".concat(att.columnName, "\""); }).join(", ");
                var tableName = "\"".concat(table.tableName, "\"");
                var onSuccess = function (transaction, resultSet) {
                    _this.trace("Retrieved all records from table '".concat(table.tableName, "' successfully"));
                    var dbResult = WebSQLTransaction.convertSQLResultSetToDatabaseRecord(table, resultSet);
                    resolve(dbResult);
                };
                var onError = function (transaction, sqlError) {
                    var error = new Error(sqlError.message.toString());
                    _this.trace("Error retrieving all records from table '".concat(table.tableName, "'"), error);
                    reject(error);
                    return false;
                };
                _this.transaction.executeSql("SELECT ".concat(columnNames, " FROM ").concat(tableName), null, onSuccess, onError);
            });
        };
        WebSQLTransaction.prototype.trace = function (message, error) {
            if (this.allowTraces) {
                Logger.trace(this, "".concat(message, " on transaction ").concat(this.transactionId).concat(error ? ": ".concat(error.message) : ""));
            }
        };
        WebSQLTransaction.wrapKeyIfNeeded = function (key) {
            return key instanceof Array ? key : [key];
        };
        WebSQLTransaction.convertSQLResultSetToDatabaseRecord = function (table, resultSet) {
            var hasPrimaryKey = TableInfoUtils.getIdentifierColumns(table).length > 0 ? true : false;
            var dbResult = [];
            if (resultSet.rows.length > 0) {
                var _loop_3 = function (j) {
                    var row = resultSet.rows.item(j);
                    var tempRecord = {};
                    if (!hasPrimaryKey) {
                        tempRecord["$KEY"] = row.ROWID;
                    }
                    table.attributes.map(function (att) {
                        tempRecord[att.columnName] = row[att.columnName];
                    });
                    dbResult.push(tempRecord);
                };
                for (var j = 0; j < resultSet.rows.length; j++) {
                    _loop_3(j);
                }
            }
            return dbResult;
        };
        WebSQLTransaction.concatenateMultipleTimes = function (repetition, numTimes, separator) {
            return Array.apply(null, new Array(numTimes))
                .map(function () { return repetition; })
                .join("".concat(separator));
        };
        WebSQLTransaction.MaxQueryParameters = 500;
        WebSQLTransaction.lastTransactionId = 0;
        return WebSQLTransaction;
    }());
    exports.default = WebSQLTransaction;
});
//# sourceMappingURL=WebSQLTransaction.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/WebSQLDatabase',["require", "exports", "tslib", "../../../Exceptions", "../../../Logger", "../../../NativeHelper", "../Common/Database", "./WebSQLTransaction", "./WebSQLTransactionMode"], function (require, exports, tslib_1, Exceptions_1, Logger, NativeHelper, Database_1, WebSQLTransaction_1, WebSQLTransactionMode_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var COULD_NOT_OPEN_DATABASE_MSG = "Could not open database";
    var CANARY_QUERY_ERROR = "Failed to execute canary query (probably due to zombie transaction)";
    var WebSQLDatabase = (function (_super) {
        tslib_1.__extends(WebSQLDatabase, _super);
        function WebSQLDatabase(databaseName, databaseImplementation) {
            var _this = _super.call(this, databaseName) || this;
            _this.databaseImplementation = databaseImplementation;
            return _this;
        }
        WebSQLDatabase.open = function (databaseName) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.cache[databaseName]) return [3, 2];
                            _a = this.cache;
                            _b = databaseName;
                            return [4, WebSQLDatabase.innerOpen(databaseName)];
                        case 1:
                            _a[_b] = _c.sent();
                            _c.label = 2;
                        case 2: return [2, this.cache[databaseName]];
                    }
                });
            });
        };
        WebSQLDatabase.innerOpen = function (databaseName) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    if (typeof window === "undefined") {
                        throw new Exceptions_1.Exceptions.SystemException("Database is only available in the browser/web view");
                    }
                    if (NativeHelper.isRunningOnNative()) {
                        return [2, WebSQLDatabase.openPluginDatabase(databaseName)];
                    }
                    else if (WebSQLDatabase.isWebSQLSupported()) {
                        return [2, WebSQLDatabase.openWebSQLDatabase(databaseName)];
                    }
                    else {
                        WebSQLDatabase.throwDatabaseRequiredError();
                    }
                    return [2];
                });
            });
        };
        WebSQLDatabase.openPluginDatabase = function (databaseName) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var w;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, NativeHelper.ensureNativeReady()];
                        case 1:
                            _a.sent();
                            w = window;
                            if (w.sqlitePlugin) {
                                Logger.trace(WebSQLDatabase, "Opening database '".concat(databaseName, "'"));
                                return [2, new Promise(function (resolve, reject) {
                                        try {
                                            w.sqlitePlugin.openDatabase({ name: databaseName, location: "default" }, function (database) {
                                                if (database) {
                                                    Logger.trace(WebSQLDatabase, "Database '".concat(databaseName, "' opened successfully"));
                                                    resolve(new WebSQLDatabase(databaseName, database));
                                                }
                                                else {
                                                    Logger.trace(WebSQLDatabase, "Error opening database '".concat(databaseName, "'"));
                                                    reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(databaseName, "'")));
                                                }
                                            }, function (sqlError) {
                                                Logger.trace(WebSQLDatabase, "Error opening database '".concat(databaseName, "' ") + sqlError.message);
                                                reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(databaseName, "': ").concat(sqlError.message.toString())));
                                            });
                                        }
                                        catch (error) {
                                            reject(new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(databaseName, "': ").concat(error.message.toString())));
                                        }
                                    })];
                            }
                            else {
                                throw new Exceptions_1.Exceptions.OpenDatabaseException("No database driver available");
                            }
                            return [2];
                    }
                });
            });
        };
        WebSQLDatabase.openWebSQLDatabase = function (databaseName) {
            var w = window;
            var database;
            try {
                Logger.trace(WebSQLDatabase, "Opening database '".concat(databaseName, "'"));
                database = w.openDatabase(databaseName, "1.0", databaseName, 5 * 1024 * 1024);
            }
            catch (error) {
                throw new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(databaseName, "': ").concat(error.message.toString()));
            }
            if (database) {
                Logger.trace(WebSQLDatabase, "Database '".concat(databaseName, "' opened successfully"));
                return new WebSQLDatabase(databaseName, database);
            }
            else {
                Logger.trace(WebSQLDatabase, "Error opening database '".concat(databaseName, "'"));
                throw new Exceptions_1.Exceptions.OpenDatabaseException("".concat(COULD_NOT_OPEN_DATABASE_MSG, " '").concat(databaseName, "'"));
            }
        };
        WebSQLDatabase.isWebSQLSupported = function () {
            var w = window;
            return !!w.openDatabase;
        };
        WebSQLDatabase.throwDatabaseRequiredError = function () {
            var w = window;
            var isChrome = !!w.chrome;
            var errorMessage = "Your app requires native access to a Local Storage database that is not available in your browser.\n\nPlease test your app in your mobile device" +
                (isChrome ? "" : ", or use Google Chrome web browser") +
                ".";
            alert(errorMessage);
            throw new Exceptions_1.Exceptions.SystemException(errorMessage);
        };
        WebSQLDatabase.prototype.testConnection = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var maxCanaryQueries, failCount;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            maxCanaryQueries = 5;
                            failCount = 0;
                            this.trace("Starting to test on database connections. Performing #".concat(maxCanaryQueries, " test queries."));
                            return [4, Promise.all(Array.apply(null, new Array(maxCanaryQueries)).map(function () {
                                    return new Promise(function (resolve) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                        var error_1;
                                        return tslib_1.__generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    _a.trys.push([0, 2, 3, 4]);
                                                    return [4, this.executeTransaction(function (transaction) {
                                                            return transaction.executeQuery(function (transaction) {
                                                                return new Promise(function (resolve, reject) {
                                                                    transaction.executeSql("SELECT 1", null, function () { return resolve(); }, function (_, error) {
                                                                        reject(new Error(error.message.toString()));
                                                                        return false;
                                                                    });
                                                                });
                                                            });
                                                        })];
                                                case 1:
                                                    _a.sent();
                                                    return [3, 4];
                                                case 2:
                                                    error_1 = _a.sent();
                                                    failCount++;
                                                    Logger.error("WebSQLDatabase", CANARY_QUERY_ERROR, error_1);
                                                    return [3, 4];
                                                case 3:
                                                    resolve();
                                                    return [7];
                                                case 4: return [2];
                                            }
                                        });
                                    }); });
                                }))];
                        case 1:
                            _a.sent();
                            this.trace("Finished tests on database connections. #".concat(maxCanaryQueries - failCount, " out of #").concat(maxCanaryQueries, " successful queries."));
                            return [2];
                    }
                });
            });
        };
        WebSQLDatabase.prototype.close = function () {
            this.databaseImplementation = null;
            delete WebSQLDatabase.cache[this.name];
            return Promise.resolve();
        };
        WebSQLDatabase.prototype.executeQuery = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.executeReadTransaction(function (abstractTransaction) { return abstractTransaction.executeQuery(body); }, allowTraces);
        };
        WebSQLDatabase.prototype.executeTransaction = function (body, allowTraces, affectedTables) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteTransaction(body, WebSQLTransactionMode_1.default.Write, allowTraces, affectedTables);
        };
        WebSQLDatabase.prototype.executeReadTransaction = function (body, allowTraces, affectedTables) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteTransaction(body, WebSQLTransactionMode_1.default.Read, allowTraces, affectedTables);
        };
        WebSQLDatabase.prototype.executeUpgradeTransaction = function (body, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            return this.innerExecuteTransaction(body, WebSQLTransactionMode_1.default.Upgrade, allowTraces);
        };
        WebSQLDatabase.prototype.innerExecuteTransaction = function (body, mode, allowTraces, _) {
            var _this = this;
            if (allowTraces === void 0) { allowTraces = true; }
            return new Promise(function (resolve, reject) {
                var tx;
                var result;
                var caughtError;
                _this.innerExecuteTransactionInMode(mode === WebSQLTransactionMode_1.default.Read, function (sqlTx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var error_2;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tx = new WebSQLTransaction_1.default(allowTraces, sqlTx, mode);
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4, body(tx)];
                            case 2:
                                result = _a.sent();
                                return [3, 4];
                            case 3:
                                error_2 = _a.sent();
                                caughtError = error_2;
                                sqlTx.executeSql("ABORT_TRANSACTION", null, function () { }, function () { return true; });
                                return [3, 4];
                            case 4: return [2];
                        }
                    });
                }); }, function (error) {
                    var realError = caughtError !== null && caughtError !== void 0 ? caughtError : new Error(error.message.toString());
                    _this.trace("Aborting transaction ".concat(tx === null || tx === void 0 ? void 0 : tx.transactionId, ": ").concat(realError), allowTraces);
                    reject(realError);
                }, function () {
                    _this.trace("Committing transaction ".concat(tx === null || tx === void 0 ? void 0 : tx.transactionId), allowTraces);
                    resolve(result);
                });
            });
        };
        WebSQLDatabase.prototype.innerExecuteTransactionInMode = function (isReadOnly, callback, errorCallback, successCallback) {
            if (isReadOnly) {
                this.databaseImplementation.readTransaction(callback, errorCallback, successCallback);
            }
            else {
                this.databaseImplementation.transaction(callback, errorCallback, successCallback);
            }
        };
        WebSQLDatabase.prototype.trace = function (msg, allowTraces) {
            if (allowTraces === void 0) { allowTraces = true; }
            if (allowTraces) {
                Logger.trace(this, msg);
            }
        };
        WebSQLDatabase.cache = {};
        return WebSQLDatabase;
    }(Database_1.default));
    exports.default = WebSQLDatabase;
});
//# sourceMappingURL=WebSQLDatabase.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/Upgrader/V0/MetadataTableInfo',["require", "exports", "../../../AutoNumber", "../../../DBDataType", "../../../TableInfoUtils"], function (require, exports, AutoNumber_1, DBDataType_1, TableInfoUtils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var METADATA_TABLE_INFO = {
        tableName: TableInfoUtils_1.METADATA_TABLE_NAME,
        idIsAutoNumber: AutoNumber_1.default.No,
        attributes: [
            { name: "SS_Key", columnName: "SS_Key", type: DBDataType_1.default.TEXT },
            { name: "Module_SS_Key", columnName: "Module_SS_Key", type: DBDataType_1.default.TEXT },
            { name: "Name", columnName: "Name", type: DBDataType_1.default.TEXT },
            { name: "Physical_Table_name", columnName: "Physical_Table_name", type: DBDataType_1.default.TEXT },
            { name: "Hash", columnName: "Hash", type: DBDataType_1.default.TEXT },
            { name: "Extra_Info", columnName: "Extra_Info", type: DBDataType_1.default.TEXT },
            { name: "Upgrade_Status", columnName: "Upgrade_Status", type: DBDataType_1.default.INTEGER },
        ],
    };
    exports.default = METADATA_TABLE_INFO;
});
//# sourceMappingURL=MetadataTableInfo.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/Upgrader/V0/MetadataBackupTableInfo',["require", "exports", "tslib", "../../../TableInfoUtils", "./MetadataTableInfo"], function (require, exports, tslib_1, TableInfoUtils_1, MetadataTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var METADATA_BACKUP_TABLE_INFO = tslib_1.__assign(tslib_1.__assign({}, MetadataTableInfo_1.default), { tableName: "".concat(TableInfoUtils_1.BACKUP_TABLE_PREFIX).concat(TableInfoUtils_1.METADATA_TABLE_NAME) });
    exports.default = METADATA_BACKUP_TABLE_INFO;
});
//# sourceMappingURL=MetadataBackupTableInfo.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/Upgrader/WebSQLMetadataConverter',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertV2ToV0 = exports.convertV0ToV2 = void 0;
    function convertV0ToV2(record) {
        var v0ExtraInfo = JSON.parse(record.Extra_Info);
        var v2ExtraInfo = {
            v: 2,
            idIsAutoNumber: v0ExtraInfo.idIsAutoNumber,
            attrs: Object.keys(v0ExtraInfo.attrs).reduce(function (attrs, attr) {
                attrs[attr.toUpperCase()] = v0ExtraInfo.attrs[attr];
                return attrs;
            }, {}),
        };
        return {
            KEY: record.SS_Key,
            MODULEKEY: record.Module_SS_Key,
            UPGRADESTATUS: record.Upgrade_Status,
            NAME: record.Name,
            TABLENAME: record.Physical_Table_name,
            HASH: record.Hash,
            EXTRAINFO: JSON.stringify(v2ExtraInfo),
        };
    }
    exports.convertV0ToV2 = convertV0ToV2;
    function convertV2ToV0(record) {
        var v2ExtraInfo = JSON.parse(record.EXTRAINFO);
        var v0ExtraInfo = {
            v: 0,
            idIsAutoNumber: v2ExtraInfo.idIsAutoNumber,
            attrs: Object.keys(v2ExtraInfo.attrs).reduce(function (attrs, attr) {
                attrs[attr.toLowerCase()] = v2ExtraInfo.attrs[attr];
                return attrs;
            }, {}),
        };
        return {
            SS_Key: record.KEY,
            Module_SS_Key: record.MODULEKEY,
            Name: record.NAME,
            Physical_Table_name: record.TABLENAME,
            Hash: record.HASH,
            Extra_Info: JSON.stringify(v0ExtraInfo),
            Upgrade_Status: record.UPGRADESTATUS,
        };
    }
    exports.convertV2ToV0 = convertV2ToV0;
});
//# sourceMappingURL=WebSQLMetadataConverter.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/Upgrader/WebSQLMetadataV2Upgrader',["require", "exports", "tslib", "../../Metadata/MetadataBackupTableInfo", "../../Metadata/MetadataTableInfo", "./V0/MetadataBackupTableInfo", "./V0/MetadataTableInfo", "./WebSQLMetadataConverter"], function (require, exports, tslib_1, MetadataBackupTableInfo_1, MetadataTableInfo_1, MetadataBackupTableInfo_2, MetadataTableInfo_2, WebSQLMetadataConverter_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function migrateToV2(transaction, v0TableInfo, v2TableInfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var records, newRecords;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, transaction.getAllRecords(v0TableInfo)];
                    case 1:
                        records = (_a.sent());
                        newRecords = records.map(function (record) { return (0, WebSQLMetadataConverter_1.convertV0ToV2)(record); });
                        return [4, transaction.deleteTableIfExists(v0TableInfo)];
                    case 2:
                        _a.sent();
                        return [4, transaction.createTable(v2TableInfo)];
                    case 3:
                        _a.sent();
                        return [4, transaction.upsertAllRecords(v2TableInfo, newRecords)];
                    case 4:
                        _a.sent();
                        return [2];
                }
            });
        });
    }
    function checkIfColumnExists(sqlTx, tableName, columnName) {
        return new Promise(function (resolve) {
            sqlTx.executeSql("SELECT \"".concat(tableName, "\".\"").concat(columnName, "\" FROM \"").concat(tableName, "\" LIMIT 1"), null, function () {
                resolve(true);
            }, function () {
                resolve(false);
                return false;
            });
        });
    }
    var WebSQLMetadataV2Upgrader = {
        isNeeded: function (transaction) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var sqlTransaction, result, exists;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sqlTransaction = transaction;
                        result = false;
                        return [4, transaction.existsTable(MetadataTableInfo_2.default)];
                    case 1:
                        exists = _a.sent();
                        if (!exists) return [3, 3];
                        return [4, sqlTransaction.executeQuery(function (tx) {
                                return checkIfColumnExists(tx, MetadataTableInfo_2.default.tableName, MetadataTableInfo_2.default.attributes[0].columnName);
                            })];
                    case 2:
                        result = _a.sent();
                        _a.label = 3;
                    case 3: return [2, result];
                }
            });
        }); },
        run: function (transaction) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var migrations;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        migrations = [
                            {
                                v0TableInfo: MetadataTableInfo_2.default,
                                v2TableInfo: MetadataTableInfo_1.default,
                            },
                            {
                                v0TableInfo: MetadataBackupTableInfo_2.default,
                                v2TableInfo: MetadataBackupTableInfo_1.default,
                            },
                        ].map(function (_a) {
                            var v0TableInfo = _a.v0TableInfo, v2TableInfo = _a.v2TableInfo;
                            return migrateToV2(transaction, v0TableInfo, v2TableInfo);
                        });
                        return [4, Promise.all(migrations)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        }); },
        cleanup: function (transaction) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, transaction.deleteTableIfExists(MetadataTableInfo_2.default)];
                    case 1:
                        _a.sent();
                        return [4, transaction.deleteTableIfExists(MetadataBackupTableInfo_2.default)];
                    case 2:
                        _a.sent();
                        return [4, transaction.renameTable("".concat(MetadataTableInfo_1.default.tableName, "_V2"), MetadataTableInfo_1.default.tableName)];
                    case 3:
                        _a.sent();
                        return [4, transaction.renameTable("".concat(MetadataBackupTableInfo_1.default.tableName, "_V2"), MetadataBackupTableInfo_1.default.tableName)];
                    case 4:
                        _a.sent();
                        return [2];
                }
            });
        }); },
    };
    exports.default = WebSQLMetadataV2Upgrader;
});
//# sourceMappingURL=WebSQLMetadataV2Upgrader.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/Upgrader/WebSQLMetadataV2UpgraderStep2',["require", "exports", "tslib", "../../Metadata/MetadataBackupTableInfo", "../../Metadata/MetadataTableInfo", "./V0/MetadataBackupTableInfo", "./V0/MetadataTableInfo", "./WebSQLMetadataConverter", "./WebSQLMetadataV2Upgrader"], function (require, exports, tslib_1, MetadataBackupTableInfo_1, MetadataTableInfo_1, MetadataBackupTableInfo_2, MetadataTableInfo_2, WebSQLMetadataConverter_1, WebSQLMetadataV2Upgrader_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WebSQLMetadataV2UpgraderStep2 = (function () {
        function WebSQLMetadataV2UpgraderStep2() {
            WebSQLMetadataV2UpgraderStep2.lastUpgraderRegistered = this;
        }
        WebSQLMetadataV2UpgraderStep2.prototype.isNeeded = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            result = false;
                            if (!(WebSQLMetadataV2UpgraderStep2.lastUpgraderRegistered === this)) return [3, 2];
                            return [4, WebSQLMetadataV2Upgrader_1.default.isNeeded(transaction)];
                        case 1:
                            result = _a.sent();
                            _a.label = 2;
                        case 2: return [2, result];
                    }
                });
            });
        };
        WebSQLMetadataV2UpgraderStep2.prototype.run = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var migrations;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            migrations = [
                                {
                                    v2TableInfo: MetadataTableInfo_1.default,
                                    v0TableInfo: MetadataTableInfo_2.default,
                                },
                                {
                                    v2TableInfo: MetadataBackupTableInfo_1.default,
                                    v0TableInfo: MetadataBackupTableInfo_2.default,
                                },
                            ].map(function (_a) {
                                var v2TableInfo = _a.v2TableInfo, v0TableInfo = _a.v0TableInfo;
                                return _this.migrateToV0(transaction, v2TableInfo, v0TableInfo);
                            });
                            return [4, Promise.all(migrations)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        WebSQLMetadataV2UpgraderStep2.prototype.migrateToV0 = function (transaction, v2TableInfo, v0TableInfo) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var records, newRecords;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.getAllRecords(v2TableInfo)];
                        case 1:
                            records = (_a.sent());
                            newRecords = records.map(function (record) { return (0, WebSQLMetadataConverter_1.convertV2ToV0)(record); });
                            return [4, transaction.deleteTableIfExists("".concat(v2TableInfo.tableName, "_V2"))];
                        case 2:
                            _a.sent();
                            return [4, transaction.renameTable(v2TableInfo.tableName, "".concat(v2TableInfo.tableName, "_V2"))];
                        case 3:
                            _a.sent();
                            return [4, transaction.createTable(v0TableInfo)];
                        case 4:
                            _a.sent();
                            return [4, transaction.upsertAllRecords(v0TableInfo, newRecords)];
                        case 5:
                            _a.sent();
                            return [2];
                    }
                });
            });
        };
        WebSQLMetadataV2UpgraderStep2.prototype.cleanup = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    WebSQLMetadataV2UpgraderStep2.lastUpgraderRegistered = null;
                    return [2];
                });
            });
        };
        return WebSQLMetadataV2UpgraderStep2;
    }());
    exports.default = WebSQLMetadataV2UpgraderStep2;
});
//# sourceMappingURL=WebSQLMetadataV2UpgraderStep2.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/WebSQLSerializer',["require", "exports", "tslib", "../../../DataTypes", "../../../Logger", "../../../Settings", "../AutoNumber", "../Common/Serializer", "../DatabaseTypeUtils", "../DBDataType"], function (require, exports, tslib_1, DataTypes_1, Logger, Settings_1, AutoNumber_1, Serializer_1, DatabaseTypeUtils_1, DBDataType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WebSQLSerializer = (function (_super) {
        tslib_1.__extends(WebSQLSerializer, _super);
        function WebSQLSerializer() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.fromMethodCache = new Map();
            _this.attributeReaderImplementation = function (dbRecord, currIndex, name, runtimeType) {
                var typeInfo = {
                    type: (0, DatabaseTypeUtils_1.convertDataTypeToDBDataType)(runtimeType),
                };
                return _this.deserialize(dbRecord["o" + currIndex], typeInfo);
            };
            _this.namedAttributeReaderImplementation = function (dbRecord, currIndex, name, runtimeType) {
                var typeInfo = {
                    type: (0, DatabaseTypeUtils_1.convertDataTypeToDBDataType)(runtimeType),
                };
                return _this.deserialize(dbRecord[name], typeInfo);
            };
            _this.deserializeAggregate = function (rowOrRowList, dataType, indexRefOrRowReader, attributeOrder) {
                return (0, Settings_1.getEnvParams)().EnforceUnsafeEval
                    ? _this.deserializeAggregateWithEval(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder)
                    : _this.deserializeAggregateWithoutEval(rowOrRowList, dataType, indexRefOrRowReader, attributeOrder);
            };
            _this.deserializeAggregateWithEval = function (rowOrRowList, dataType, indexRefOrRowReader, attributeOrder) {
                if (_this.isGenericRecordType(dataType)) {
                    var row = rowOrRowList;
                    var recordType = dataType;
                    var indexRef = indexRefOrRowReader;
                    var converter = _this.fromMethodCache.get(recordType);
                    if (!converter) {
                        var attributes = recordType.getAttributes();
                        var converterFunctionCode = _this.generateConverterCode(attributes, dataType);
                        converter = new Function("fromLocalStorage", "GenericRecord", "attributes", "classDef", converterFunctionCode)(_this.deserializeAggregate, DataTypes_1.GenericRecord, attributes, dataType);
                        _this.fromMethodCache.set(recordType, converter);
                    }
                    return converter(row, indexRef, _this.getAttributeReaderImplementation(dataType), attributeOrder);
                }
                else if (_this.isGenericRecordListType(dataType)) {
                    var result = new dataType();
                    var rowList = rowOrRowList;
                    var rowReader = indexRefOrRowReader;
                    var items = [];
                    for (var i = 0; i < rowList.length; i++) {
                        items.push(result.newItem(rowReader(null, rowList.item(i))));
                    }
                    result.pushAll(items);
                    return result;
                }
                else {
                    var type = dataType;
                    throw new Error("Unable to read data from Local Storage. Unknown type ".concat(type && type.name ? type.name : type));
                }
            };
            _this.deserializeAggregateWithoutEval = function (rowOrRowList, dataType, indexRefOrRowReader, attributeOrder) {
                if (_this.isGenericRecordType(dataType)) {
                    var row = rowOrRowList;
                    var recordType = dataType;
                    var indexRef = indexRefOrRowReader;
                    var attributes = recordType.getAttributes();
                    return _this.generateFunctionCodeWithoutEval(attributes, row, dataType, indexRef, attributeOrder);
                }
                else if (_this.isGenericRecordListType(dataType)) {
                    var result = new dataType();
                    var rowList = rowOrRowList;
                    var rowReader = indexRefOrRowReader;
                    var items = [];
                    for (var i = 0; i < rowList.length; i++) {
                        items.push(result.newItem(rowReader(null, rowList.item(i))));
                    }
                    result.pushAll(items);
                    return result;
                }
                else {
                    var type = dataType;
                    throw new Error("Unable to read data from Local Storage. Unknown type ".concat(type && type.name ? type.name : type));
                }
            };
            return _this;
        }
        WebSQLSerializer.prototype.isGenericRecordType = function (dataType) {
            return !!dataType.isGenericRecordType;
        };
        WebSQLSerializer.prototype.isGenericRecordListType = function (dataType) {
            return !!dataType.isGenericRecordListType;
        };
        WebSQLSerializer.prototype.getAttributeReaderImplementation = function (type) {
            return type.isAnonymousRecord() ? this.namedAttributeReaderImplementation : this.attributeReaderImplementation;
        };
        WebSQLSerializer.prototype.generateAttributesDeclaration = function (attributes) {
            var result = "";
            attributes.forEach(function (attr, index) {
                if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                    result += "".concat(attr.attrName, ": null,\n");
                }
            });
            return result;
        };
        WebSQLSerializer.prototype.generateDeserializerForEachAttribute = function (attributes, dataType) {
            var result = "";
            attributes.forEach(function (attr, index) {
                if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                    if (attr.dataType === DataTypes_1.DataTypes.Record && dataType.isAnonymousRecord()) {
                        result += "".concat(attr.attrName, ": fromLocalStorage(row, attributes[").concat(index, "].complexType, indexRef),");
                    }
                    else {
                        result += "".concat(attr.attrName, ": readerImplementation(row, indexRef.value++, attributes[").concat(index, "].name, attributes[").concat(index, "].dataType),");
                    }
                }
            });
            return result;
        };
        WebSQLSerializer.prototype.generateConverterCode = function (attributes, dataType) {
            var functionCode = "return function from(row, indexRef, readerImplementation, attributeOrder) {\n            var data = null;\n            if (attributeOrder && attributeOrder.length > 0) {\n                data = {\n                    ".concat(this.generateAttributesDeclaration(attributes), "\n                };\n                for (var i = 0; i < attributeOrder.length; i++) {\n                    var attrName = attributeOrder[i];\n                    var attr = attributes.filter(function(attr) { return attr.attrName === attrName; })[0];\n                    if (attr.complexType) {\n                        data[attrName] = fromLocalStorage(row, attr.complexType, indexRef);\n                    } else {\n                        data[attrName] = readerImplementation(row, indexRef.value++, attr.name, attr.dataType);\n                    }\n                }\n            } else {\n                data = {\n                    ").concat(this.generateDeserializerForEachAttribute(attributes, dataType), "\n                };\n            }\n            return new classDef.RecordClass(data);\n        };");
            return functionCode;
        };
        WebSQLSerializer.prototype.generateFunctionCodeWithoutEval = function (attributes, row, dataType, indexRef, attributeOrder) {
            var _this = this;
            var attributeReaderImplementation = this.getAttributeReaderImplementation(dataType);
            var data = {};
            if (attributeOrder && attributeOrder.length > 0) {
                attributes.forEach(function (attr, index) {
                    if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                        data[attr.attrName] = null;
                    }
                });
                attributeOrder.forEach(function (attrName, index) {
                    var attr = attributes.filter(function (attr) { return attr.attrName === attrName; })[0];
                    if (attr.complexType) {
                        data[attr.attrName] = _this.deserializeAggregate(row, attr.complexType, indexRef);
                    }
                    else {
                        data[attr.attrName] = attributeReaderImplementation(row, indexRef.value++, attr.name, attr.dataType);
                    }
                });
            }
            else {
                attributes.forEach(function (attr, index) {
                    if (attr.dataType !== DataTypes_1.DataTypes.RecordList) {
                        if (attr.dataType === DataTypes_1.DataTypes.Record && dataType.isAnonymousRecord()) {
                            data[attr.attrName] = _this.deserializeAggregate(row, attr.complexType, indexRef);
                        }
                        else {
                            data[attr.attrName] = attributeReaderImplementation(row, indexRef.value++, attr.name, attr.dataType);
                        }
                    }
                });
            }
            return new dataType.RecordClass(data);
        };
        WebSQLSerializer.prototype.serializeDateTime = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return _super.prototype.serializeDateTime.call(this, value, typeInfo);
            }
            else {
                if (!(0, Settings_1.getEnvParams)().DbNullDatesTZAware && value.eq(DataTypes_1.DateTime.defaultValue)) {
                    return Serializer_1.default.NULLDATE_IN_DB;
                }
                var nativeDateTime = value.toNative();
                return (Serializer_1.default.maskFourZeroes(nativeDateTime.getUTCFullYear()) +
                    "-" +
                    Serializer_1.default.maskTwoZeroes(nativeDateTime.getUTCMonth() + 1) +
                    "-" +
                    Serializer_1.default.maskTwoZeroes(nativeDateTime.getUTCDate()) +
                    " " +
                    Serializer_1.default.maskTwoZeroes(nativeDateTime.getUTCHours()) +
                    ":" +
                    Serializer_1.default.maskTwoZeroes(nativeDateTime.getUTCMinutes()) +
                    ":" +
                    Serializer_1.default.maskTwoZeroes(nativeDateTime.getUTCSeconds()));
            }
        };
        WebSQLSerializer.prototype.serializeBinaryData = function (value, typeInfo) {
            return value.content === undefined ? null : value.content;
        };
        WebSQLSerializer.prototype.deserializeDateTime = function (value, typeInfo) {
            if ((0, Settings_1.getEnvParams)().DateTimeRevamp) {
                return _super.prototype.deserializeDateTime.call(this, value, typeInfo);
            }
            else {
                if (value === Serializer_1.default.NULLDATE_IN_DB && !(0, Settings_1.getEnvParams)().DbNullDatesTZAware) {
                    return DataTypes_1.DateTime.defaultValue;
                }
                var DateTimeDbParseRegExp = /^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;
                var dtParts = DateTimeDbParseRegExp.exec(value);
                var nativeDateTime = new Date();
                nativeDateTime.setUTCFullYear(parseInt(dtParts[1], 10), parseInt(dtParts[2], 10) - 1, parseInt(dtParts[3], 10));
                nativeDateTime.setUTCHours(parseInt(dtParts[4], 10) || 0, parseInt(dtParts[5], 10) || 0, parseInt(dtParts[6], 10) || 0, 0);
                return new DataTypes_1.DateTime(nativeDateTime);
            }
        };
        WebSQLSerializer.prototype.deserializeBinaryData = function (value, typeInfo) {
            return new DataTypes_1.BinaryData(value);
        };
        WebSQLSerializer.prototype.isConversionNeeded = function (from, to) {
            if (this.isConversionNeededBetweenDBDataTypes(from.type, to.type)) {
                return true;
            }
            if (!!from.isEntityReference !== !!to.isEntityReference) {
                return true;
            }
            if (from.length !== undefined) {
                if (from.decimals !== undefined) {
                    return from.length - from.decimals > to.length - to.decimals;
                }
                return from.length > to.length;
            }
            return false;
        };
        WebSQLSerializer.prototype.isConversionNeededBetweenDBDataTypes = function (from, to) {
            if (from === undefined) {
                return true;
            }
            if (from === to) {
                return false;
            }
            switch (from) {
                case DBDataType_1.default.BOOLEAN:
                    return to !== DBDataType_1.default.INTEGER && to !== DBDataType_1.default.LONGINTEGER;
                case DBDataType_1.default.INTEGER:
                    return to !== DBDataType_1.default.LONGINTEGER && to !== DBDataType_1.default.TEXT;
                case DBDataType_1.default.LONGINTEGER:
                    return to !== DBDataType_1.default.TEXT;
                default:
                    return true;
            }
        };
        WebSQLSerializer.prototype.innerSerializeBasicType = function (value, columnInfo, autoNumber) {
            Logger.trace(this, "WebSQL serializing a value of type ".concat(columnInfo.type));
            if (columnInfo.isPrimaryKey &&
                autoNumber === AutoNumber_1.default.YesIfEmpty &&
                (0, DataTypes_1.equals)(value, (0, DatabaseTypeUtils_1.typeDefaultValue)(columnInfo.type))) {
                return null;
            }
            if (columnInfo.isEntityReference && (0, DataTypes_1.equals)(value, (0, DatabaseTypeUtils_1.typeDefaultValue)(columnInfo.type))) {
                return null;
            }
        };
        return WebSQLSerializer;
    }(Serializer_1.default));
    exports.default = WebSQLSerializer;
});
//# sourceMappingURL=WebSQLSerializer.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/WebSQLEntityService',["require", "exports", "tslib", "../../../Exceptions", "../Common/EntityService", "./Upgrader/WebSQLMetadataV2Upgrader", "./Upgrader/WebSQLMetadataV2UpgraderStep2", "./WebSQLSerializer"], function (require, exports, tslib_1, Exceptions_1, EntityService_1, WebSQLMetadataV2Upgrader_1, WebSQLMetadataV2UpgraderStep2_1, WebSQLSerializer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var WebSQLEntityService = (function (_super) {
        tslib_1.__extends(WebSQLEntityService, _super);
        function WebSQLEntityService() {
            var _this = _super.call(this, new WebSQLSerializer_1.default()) || this;
            _this.isMetadataV2UpgraderRegistered = false;
            return _this;
        }
        WebSQLEntityService.prototype.registerInitializer = function (entityInfos) {
            if (!this.isMetadataV2UpgraderRegistered) {
                this.database.registerInitializer(WebSQLMetadataV2Upgrader_1.default);
                this.isMetadataV2UpgraderRegistered = true;
            }
            _super.prototype.registerInitializer.call(this, entityInfos);
            this.database.registerInitializer(new WebSQLMetadataV2UpgraderStep2_1.default());
        };
        WebSQLEntityService.prototype.executeAggregate = function (body) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var database, error_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.getDatabase()];
                        case 1:
                            database = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4, database.executeQuery(body)];
                        case 3: return [2, _a.sent()];
                        case 4:
                            error_1 = _a.sent();
                            throw new Exceptions_1.Exceptions.DataBaseException("", error_1.message, error_1.stack);
                        case 5: return [2];
                    }
                });
            });
        };
        return WebSQLEntityService;
    }(EntityService_1.default));
    exports.default = WebSQLEntityService;
});
//# sourceMappingURL=WebSQLEntityService.js.map;
define('OutSystems/ClientRuntime/modules/LocaleService/LocaleService',["require", "exports", "tslib", "../../ApplicationInfo", "../../Injector", "../../Injector/KnownServices", "../../StorageProvider", "../PubSub/Publisher"], function (require, exports, tslib_1, ApplicationInfo, Injector, KnownServices_1, StorageProvider_1, Publisher_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DEFAULT_LOCALE = "en-US";
    var LOCALE_SEPARATOR = "-";
    var DEFAULT_RTL = false;
    var MODULE_NAME = "Locale Service";
    var LOCALE_KEY = "CurrentLocale";
    var LOCALE_EXPRESSION = /^[A-z]{2,3}([_-]([A-z]{4}|[\d]{3}))?([_-]([A-z]{2}|[\d]{3}))?$/;
    var LocaleService = (function () {
        function LocaleService(applicationName) {
            this.currentLocaleStorage = new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Persistent, LOCALE_KEY, null, ApplicationInfo.getUserProviderName);
            this.publisher = new Publisher_1.default(MODULE_NAME, applicationName);
        }
        LocaleService.prototype.subscribe = function (handler, context) {
            return this.publisher.subscribe(handler, context);
        };
        LocaleService.prototype.unsubscribe = function (handler, context) {
            return this.publisher.unsubscribe(handler, context);
        };
        LocaleService.prototype.getCurrentLocale = function () {
            var _a, _b;
            return (_b = (_a = this.getStoredLocale()) === null || _a === void 0 ? void 0 : _a.localeCode) !== null && _b !== void 0 ? _b : DEFAULT_LOCALE;
        };
        LocaleService.prototype.setCurrentLocale = function (localeCode) {
            var translationsService = Injector.resolve(KnownServices_1.ServiceNames.TranslationsService);
            if (translationsService) {
                translationsService.clear();
            }
            if (this.isValidLocale(localeCode)) {
                var locale = {
                    localeCode: localeCode,
                    isRTL: DEFAULT_RTL,
                };
                this.currentLocaleStorage.set(locale);
            }
            else {
                throw new Error("Value '".concat(localeCode, "' isn't a valid locale."));
            }
            var localeFamily = this.getCurrentLocaleFamily();
            this.publisher.publish({ localeCode: localeCode, localeFamily: localeFamily });
        };
        LocaleService.prototype.getCurrentLocaleFamily = function () {
            var _a;
            var result = [];
            var localeCode = (_a = this.getCurrentLocale()) !== null && _a !== void 0 ? _a : "";
            var hasParentLocale = localeCode.indexOf(LOCALE_SEPARATOR) > 0;
            if (hasParentLocale) {
                result.push(localeCode.split(LOCALE_SEPARATOR)[0]);
            }
            result.push(localeCode);
            return result;
        };
        LocaleService.prototype.isValidLocale = function (locale) {
            return LOCALE_EXPRESSION.test(locale);
        };
        LocaleService.prototype.isCurrentLocaleRTL = function () {
            var _a, _b;
            return (_b = (_a = this.getStoredLocale()) === null || _a === void 0 ? void 0 : _a.isRTL) !== null && _b !== void 0 ? _b : DEFAULT_RTL;
        };
        LocaleService.prototype.setCurrentLocaleRTL = function (isRTL) {
            var _a;
            var locale = (_a = this.getStoredLocale()) !== null && _a !== void 0 ? _a : { localeCode: DEFAULT_LOCALE, isRTL: DEFAULT_RTL };
            if (typeof locale === "string") {
                this.currentLocaleStorage.set({ localeCode: locale, isRTL: isRTL });
            }
            else {
                this.currentLocaleStorage.set(tslib_1.__assign(tslib_1.__assign({}, locale), { isRTL: isRTL }));
            }
        };
        LocaleService.prototype.getStoredLocale = function () {
            var locale = this.currentLocaleStorage.get();
            if (typeof locale === "string") {
                return { localeCode: locale, isRTL: DEFAULT_RTL };
            }
            else {
                return locale;
            }
        };
        return LocaleService;
    }());
    exports.default = LocaleService;
});
//# sourceMappingURL=LocaleService.js.map;
define('OutSystems/ClientRuntime/modules/LogTable/LogTableInfo',["require", "exports", "../Database/AutoNumber", "../Database/DBDataType"], function (require, exports, AutoNumber_1, DBDataType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LOG_FIELDS = void 0;
    exports.LOG_FIELDS = {
        Instant: "INSTANT",
        LogType: "LOGTYPE",
        Message: "MESSAGE",
        ModuleName: "MODULENAME",
        Stack: "STACK",
        MessageType: "MESSAGETYPE",
        ExtraInfo: "EXTRAINFO",
    };
    var createLogTableColumns = function () {
        var result = [];
        Object.keys(exports.LOG_FIELDS).forEach(function (key) {
            result.push({
                name: key,
                columnName: exports.LOG_FIELDS[key],
                type: DBDataType_1.default.TEXT,
            });
        });
        return result;
    };
    var LOG_TABLE_INFO = {
        tableName: "OSSYS_LOG",
        idIsAutoNumber: AutoNumber_1.default.YesIfEmpty,
        attributes: createLogTableColumns(),
    };
    exports.default = LOG_TABLE_INFO;
});
//# sourceMappingURL=LogTableInfo.js.map;
define('OutSystems/ClientRuntime/modules/LogTable/LogTableExtraInfoUpgrader',["require", "exports", "tslib", "../../Logger", "./LogTableInfo"], function (require, exports, tslib_1, Logger, LogTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogTableExtraInfoUpgrader = {
        isNeeded: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, tx.existsTable(LogTableInfo_1.default)];
                    case 1:
                        _a = (_b.sent());
                        if (!_a) return [3, 3];
                        return [4, tx.existsColumn(LogTableInfo_1.default.tableName, LogTableInfo_1.LOG_FIELDS.ExtraInfo)];
                    case 2:
                        _a = !(_b.sent());
                        _b.label = 3;
                    case 3: return [2, (_a)];
                }
            });
        }); },
        run: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            var columnInfo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.trace(this, "Running upgrader for extra info column on log table.");
                        columnInfo = LogTableInfo_1.default.attributes.filter(function (col) { return col.columnName === LogTableInfo_1.LOG_FIELDS.ExtraInfo; })[0];
                        return [4, tx.addColumn(LogTableInfo_1.default, columnInfo)];
                    case 1:
                        _a.sent();
                        Logger.trace(this, "Upgrader for extra info column on log table ran successfuly.");
                        return [2];
                }
            });
        }); },
    };
    exports.default = LogTableExtraInfoUpgrader;
});
//# sourceMappingURL=LogTableExtraInfoUpgrader.js.map;
define('OutSystems/ClientRuntime/modules/LogTable/LogTableInitializer',["require", "exports", "tslib", "../../Logger", "./LogTableInfo"], function (require, exports, tslib_1, Logger, LogTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var LogTableInitializer = {
        isNeeded: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, tx.existsTable(LogTableInfo_1.default)];
                    case 1: return [2, !(_a.sent())];
                }
            });
        }); },
        run: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.trace(this, "Running initializer for log table info table.");
                        return [4, tx.createTable(LogTableInfo_1.default)];
                    case 1:
                        _a.sent();
                        Logger.trace(this, "Initializer for entity log table info table ran successfuly.");
                        return [2];
                }
            });
        }); },
    };
    exports.default = LogTableInitializer;
});
//# sourceMappingURL=LogTableInitializer.js.map;
define('OutSystems/ClientRuntime/modules/LogTable/LogDatabaseStorage',["require", "exports", "tslib", "../../Logger", "./LogTableExtraInfoUpgrader", "./LogTableInfo", "./LogTableInitializer"], function (require, exports, tslib_1, Logger, LogTableExtraInfoUpgrader_1, LogTableInfo_1, LogTableInitializer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMaxRecords = void 0;
    var getMaxRecords = function () { return 1000; };
    exports.getMaxRecords = getMaxRecords;
    var LogDatabaseStorage = (function () {
        function LogDatabaseStorage(db) {
            this.db = db;
            this.count = 0;
            Logger.trace(this, "Registering initializer for entity Log Table info table.");
            db.registerInitializer(LogTableInitializer_1.default);
            db.registerInitializer(LogTableExtraInfoUpgrader_1.default);
        }
        LogDatabaseStorage.prototype.initialize = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    return [2, this.db.executeReadTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var allRecords;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, tx.existsTable(LogTableInfo_1.default)];
                                    case 1:
                                        if (!!(_a.sent())) return [3, 2];
                                        this.count = 0;
                                        return [3, 4];
                                    case 2: return [4, tx.getAllRecords(LogTableInfo_1.default)];
                                    case 3:
                                        allRecords = _a.sent();
                                        this.count = allRecords.length;
                                        _a.label = 4;
                                    case 4: return [2];
                                }
                            });
                        }); })];
                });
            });
        };
        LogDatabaseStorage.prototype.getCount = function () {
            return this.count;
        };
        LogDatabaseStorage.prototype.insertEntity = function (transaction, logMessage) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var newRecord;
                var _a;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            newRecord = (_a = {},
                                _a[LogTableInfo_1.LOG_FIELDS.Instant] = logMessage.instant,
                                _a[LogTableInfo_1.LOG_FIELDS.LogType] = logMessage.logType,
                                _a[LogTableInfo_1.LOG_FIELDS.Message] = logMessage.message,
                                _a[LogTableInfo_1.LOG_FIELDS.MessageType] = logMessage.messageType,
                                _a[LogTableInfo_1.LOG_FIELDS.ModuleName] = logMessage.moduleName,
                                _a[LogTableInfo_1.LOG_FIELDS.Stack] = logMessage.stack,
                                _a[LogTableInfo_1.LOG_FIELDS.ExtraInfo] = JSON.stringify(logMessage.extra),
                                _a);
                            return [4, transaction.insertRecord(LogTableInfo_1.default, newRecord)];
                        case 1:
                            _b.sent();
                            this.updateCount(1);
                            return [2];
                    }
                });
            });
        };
        LogDatabaseStorage.prototype.internalCountLogs = function (transaction) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var allRecords;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.getAllRecords(LogTableInfo_1.default)];
                        case 1:
                            allRecords = _a.sent();
                            return [2, allRecords.length];
                    }
                });
            });
        };
        LogDatabaseStorage.prototype.updateCount = function (change) {
            this.count += change;
            this.count = Math.max(this.count, 0);
        };
        LogDatabaseStorage.prototype.countLogs = function () {
            var _this = this;
            return this.db.executeReadTransaction(function (transaction) { return _this.internalCountLogs(transaction); }, false);
        };
        LogDatabaseStorage.prototype.internalDiscardLogsByType = function (transaction, count, numberLogsToDiscard, type) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var internalCount, logs, i;
                var _a;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            internalCount = count;
                            return [4, transaction.findRecords(LogTableInfo_1.default, (_a = {}, _a[LogTableInfo_1.LOG_FIELDS.LogType] = type, _a))];
                        case 1:
                            logs = (_b.sent());
                            i = 0;
                            _b.label = 2;
                        case 2:
                            if (!(i < Math.min(numberLogsToDiscard, logs.length))) return [3, 5];
                            return [4, transaction.removeRecord(LogTableInfo_1.default, logs[i].$KEY)];
                        case 3:
                            _b.sent();
                            internalCount++;
                            _b.label = 4;
                        case 4:
                            i++;
                            return [3, 2];
                        case 5: return [2, internalCount];
                    }
                });
            });
        };
        LogDatabaseStorage.prototype.discardLogs = function (transaction, totalRowsToDelete) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var count, numberLogsToDiscard, _a, _b, _c;
                return tslib_1.__generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            count = 0;
                            numberLogsToDiscard = totalRowsToDelete;
                            _a = count;
                            return [4, this.internalDiscardLogsByType(transaction, count, numberLogsToDiscard, Logger.LogTypes.Trace)];
                        case 1:
                            count = _a + _d.sent();
                            if (!(count < totalRowsToDelete)) return [3, 3];
                            numberLogsToDiscard -= count;
                            _b = count;
                            return [4, this.internalDiscardLogsByType(transaction, count, numberLogsToDiscard, Logger.LogTypes.General)];
                        case 2:
                            count = _b + _d.sent();
                            _d.label = 3;
                        case 3:
                            if (!(count < totalRowsToDelete)) return [3, 5];
                            numberLogsToDiscard -= count;
                            _c = count;
                            return [4, this.internalDiscardLogsByType(transaction, count, numberLogsToDiscard, Logger.LogTypes.Error)];
                        case 4:
                            count = _c + _d.sent();
                            _d.label = 5;
                        case 5:
                            this.updateCount(-count);
                            return [2];
                    }
                });
            });
        };
        LogDatabaseStorage.prototype.internalWriteLog = function (logMessages) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    return [2, this.db.executeTransaction(function (transaction) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var numberLogsToDiscard, allInsertions;
                            var _this = this;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(this.count + logMessages.length >= (0, exports.getMaxRecords)())) return [3, 2];
                                        numberLogsToDiscard = this.count + logMessages.length - (0, exports.getMaxRecords)();
                                        return [4, this.discardLogs(transaction, numberLogsToDiscard)];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        allInsertions = logMessages.map(function (record) { return _this.insertEntity(transaction, record); });
                                        return [4, Promise.all(allInsertions)];
                                    case 3:
                                        _a.sent();
                                        return [2];
                                }
                            });
                        }); }, false)];
                });
            });
        };
        LogDatabaseStorage.prototype.writeLog = function (logMessage) {
            return this.internalWriteLog([logMessage]);
        };
        LogDatabaseStorage.prototype.writeLogBatch = function (logBatch) {
            if (logBatch.length > (0, exports.getMaxRecords)()) {
                var logsToDiscard = logBatch.length - (0, exports.getMaxRecords)();
                logBatch.splice(0, logsToDiscard);
            }
            return this.internalWriteLog(logBatch);
        };
        LogDatabaseStorage.prototype.getLogs = function (numberRows) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    return [2, this.db.executeReadTransaction(function (transaction) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var allLogs, limit, result;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, transaction.getAllRecords(LogTableInfo_1.default)];
                                    case 1:
                                        allLogs = _a.sent();
                                        limit = numberRows !== null && numberRows !== void 0 ? numberRows : allLogs.length;
                                        result = allLogs.slice(0, limit);
                                        return [2, this.dbRecordListToLogMessageList(result)];
                                }
                            });
                        }); }, false)];
                });
            });
        };
        LogDatabaseStorage.prototype.popLogs = function () {
            var _this = this;
            return this.db.executeTransaction(function (transaction) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var logsToPop;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.getAllRecords(LogTableInfo_1.default)];
                        case 1:
                            logsToPop = (_a.sent());
                            return [4, transaction.removeAllRecords(LogTableInfo_1.default)];
                        case 2:
                            _a.sent();
                            return [2, this.dbRecordListToLogMessageList(logsToPop)];
                    }
                });
            }); }, false);
        };
        LogDatabaseStorage.prototype.removeLogs = function (numberRowsToDelete) {
            var _this = this;
            return this.db.executeTransaction(function (transaction) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var allRecords;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.findRecords(LogTableInfo_1.default, {})];
                        case 1:
                            allRecords = (_a.sent());
                            return [4, Promise.all(allRecords
                                    .slice(0, numberRowsToDelete)
                                    .map(function (record) { return transaction.removeRecord(LogTableInfo_1.default, record.$KEY); }))];
                        case 2:
                            _a.sent();
                            return [2];
                    }
                });
            }); }, false);
        };
        LogDatabaseStorage.prototype.removeAllLogs = function () {
            var _this = this;
            return this.db.executeTransaction(function (transaction) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, transaction.removeAllRecords(LogTableInfo_1.default)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); }, false);
        };
        LogDatabaseStorage.prototype.dbRecordListToLogMessageList = function (dbRecordList) {
            var _this = this;
            return dbRecordList.map(function (record) { return _this.dbRecordToLogMessage(record); });
        };
        LogDatabaseStorage.prototype.dbRecordToLogMessage = function (dbRecord) {
            return {
                instant: dbRecord[LogTableInfo_1.LOG_FIELDS.Instant],
                logType: dbRecord[LogTableInfo_1.LOG_FIELDS.LogType],
                message: dbRecord[LogTableInfo_1.LOG_FIELDS.Message],
                messageType: dbRecord[LogTableInfo_1.LOG_FIELDS.MessageType],
                moduleName: dbRecord[LogTableInfo_1.LOG_FIELDS.ModuleName],
                stack: dbRecord[LogTableInfo_1.LOG_FIELDS.Stack],
                extra: dbRecord[LogTableInfo_1.LOG_FIELDS.ExtraInfo] ? JSON.parse(dbRecord[LogTableInfo_1.LOG_FIELDS.ExtraInfo]) : undefined,
            };
        };
        return LogDatabaseStorage;
    }());
    exports.default = LogDatabaseStorage;
});
//# sourceMappingURL=LogDatabaseStorage.js.map;
define('OutSystems/ClientRuntime/modules/MappingWithDefault/MappingWithDefaultService',["require", "exports", "../../Logger"], function (require, exports, Logger) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var MAPPING_WITH_DEFAULT_MODULE_NAME = "MappingWithDefaultService";
    var MappingWithDefaultService = (function () {
        function MappingWithDefaultService() {
            this.messages = {};
        }
        MappingWithDefaultService.prototype.getMessage = function (key, defaultMessage) {
            Logger.trace(MAPPING_WITH_DEFAULT_MODULE_NAME, "Getting message for key ".concat(key, " with default message ").concat(defaultMessage));
            var msg = this.messages[key];
            return msg === undefined || msg === null ? defaultMessage : msg;
        };
        MappingWithDefaultService.prototype.setMessage = function (key, value) {
            Logger.trace(MAPPING_WITH_DEFAULT_MODULE_NAME, "Setting message for key ".concat(key, " with value ").concat(value));
            this.messages[key] = value;
        };
        MappingWithDefaultService.prototype.add = function (messages) {
            var _this = this;
            if (!messages) {
                throw new Error("Messages cannot either null or undefined");
            }
            var messagesKeys = Object.keys(messages);
            Logger.trace(MAPPING_WITH_DEFAULT_MODULE_NAME, "Adding ".concat(messagesKeys.length, " messages"));
            messagesKeys.forEach(function (key) { return _this.setMessage(key, messages[key]); });
        };
        MappingWithDefaultService.prototype.clear = function () {
            Logger.trace(MAPPING_WITH_DEFAULT_MODULE_NAME, "Clearing cached messages");
            this.messages = {};
        };
        return MappingWithDefaultService;
    }());
    exports.default = MappingWithDefaultService;
});
//# sourceMappingURL=MappingWithDefaultService.js.map;
define('OutSystems/ClientRuntime/modules/PersistentKeyValue/PersistentKeyValueTableInfo',["require", "exports", "../../modules/Database/AutoNumber", "../../modules/Database/DBDataType"], function (require, exports, AutoNumber_1, DBDataType_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PERSISTENT_TABLE_INFO = {
        tableName: "OSSYS_PERSISTENTKEYVALUE",
        idIsAutoNumber: AutoNumber_1.default.No,
        attributes: [
            { name: "Key", columnName: "KEY", type: DBDataType_1.default.TEXT, isPrimaryKey: true },
            { name: "Value", columnName: "VALUE", type: DBDataType_1.default.TEXT },
        ],
    };
    exports.default = PERSISTENT_TABLE_INFO;
});
//# sourceMappingURL=PersistentKeyValueTableInfo.js.map;
define('OutSystems/ClientRuntime/modules/PersistentKeyValue/PersistentKeyValueInitializer',["require", "exports", "tslib", "../../Logger", "./PersistentKeyValueTableInfo"], function (require, exports, tslib_1, Logger, PersistentKeyValueTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PersistentKeyValueInitializer = {
        isNeeded: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, tx.existsTable(PersistentKeyValueTableInfo_1.default)];
                    case 1: return [2, !(_a.sent())];
                }
            });
        }); },
        run: function (tx) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.trace(this, "Running initializer for persistent key value info table.");
                        return [4, tx.createTable(PersistentKeyValueTableInfo_1.default)];
                    case 1:
                        _a.sent();
                        Logger.trace(this, "Initializer for entity persistent key value info table ran successfuly.");
                        return [2];
                }
            });
        }); },
    };
    exports.default = PersistentKeyValueInitializer;
});
//# sourceMappingURL=PersistentKeyValueInitializer.js.map;
define('OutSystems/ClientRuntime/modules/PersistentKeyValue/PersistentKeyValueStorage',["require", "exports", "tslib", "../../Logger", "./PersistentKeyValueInitializer", "./PersistentKeyValueTableInfo"], function (require, exports, tslib_1, Logger, PersistentKeyValueInitializer_1, PersistentKeyValueTableInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var PersistentKeyValueStorage = (function () {
        function PersistentKeyValueStorage(db) {
            this.db = db;
            this.ready = false;
            Logger.trace(this, "Registering initializer for entity persistent key value info table.");
            db.registerInitializer(PersistentKeyValueInitializer_1.default);
        }
        PersistentKeyValueStorage.prototype.isReady = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _a;
                var _this = this;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!!this.ready) return [3, 2];
                            _a = this;
                            return [4, this.db.executeReadTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
                                    return [2, tx.existsTable(PersistentKeyValueTableInfo_1.default)];
                                }); }); })];
                        case 1:
                            _a.ready = _b.sent();
                            _b.label = 2;
                        case 2: return [2, this.ready];
                    }
                });
            });
        };
        PersistentKeyValueStorage.prototype.setValue = function (key, value) {
            var _this = this;
            return this.db.executeTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var newRecord;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            newRecord = { KEY: key, VALUE: value };
                            return [4, tx.upsertRecord(PersistentKeyValueTableInfo_1.default, newRecord)];
                        case 1:
                            _a.sent();
                            return [2];
                    }
                });
            }); });
        };
        PersistentKeyValueStorage.prototype.getValue = function (key) {
            var _this = this;
            return this.db.executeReadTransaction(function (tx) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var record;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, tx.getRecord(PersistentKeyValueTableInfo_1.default, key)];
                        case 1:
                            record = _a.sent();
                            return [2, record === null || record === void 0 ? void 0 : record.VALUE];
                    }
                });
            }); });
        };
        return PersistentKeyValueStorage;
    }());
    exports.default = PersistentKeyValueStorage;
});
//# sourceMappingURL=PersistentKeyValueStorage.js.map;
define('OutSystems/ClientRuntime/NativeApplicationInfo',["require", "exports", "tslib", "./NativeHelper"], function (require, exports, tslib_1, NativeHelper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isVersionGreaterOrEqualTo = exports.getAppVersionNumber = exports.getAppVersion = exports.getNativeShellVersion = exports.getPlatformVersion = void 0;
    function getNativeApplicationInfo() {
        var w = window;
        if (w && w.OutSystemsNative && w.OutSystemsNative.ApplicationInfo) {
            return w.OutSystemsNative.ApplicationInfo;
        }
    }
    function getPlatformVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, (0, NativeHelper_1.ensureNativeReady)()];
                    case 1:
                        _a.sent();
                        return [2, new Promise(function (resolve, reject) {
                                var appInfo = getNativeApplicationInfo();
                                if (!appInfo) {
                                    return reject(new Error("NativeAppInfo API is not available"));
                                }
                                appInfo.getPlatformVersion(resolve, reject);
                            })];
                }
            });
        });
    }
    exports.getPlatformVersion = getPlatformVersion;
    function getNativeShellVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, (0, NativeHelper_1.ensureNativeReady)()];
                    case 1:
                        _a.sent();
                        return [2, new Promise(function (resolve, reject) {
                                var appInfo = getNativeApplicationInfo();
                                if (!appInfo) {
                                    return reject(new Error("NativeAppInfo API is not available"));
                                }
                                appInfo.getNativeShellVersion(resolve, reject);
                            })];
                }
            });
        });
    }
    exports.getNativeShellVersion = getNativeShellVersion;
    function getAppVersion() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, (0, NativeHelper_1.ensureNativeReady)()];
                    case 1:
                        _a.sent();
                        return [2, new Promise(function (resolve, reject) {
                                var appInfo = getNativeApplicationInfo();
                                if (!appInfo) {
                                    return reject(new Error("NativeAppInfo API is not available"));
                                }
                                appInfo.getAppVersion(resolve, reject);
                            })];
                }
            });
        });
    }
    exports.getAppVersion = getAppVersion;
    function getAppVersionNumber() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, (0, NativeHelper_1.ensureNativeReady)()];
                    case 1:
                        _a.sent();
                        return [2, new Promise(function (resolve, reject) {
                                var appInfo = getNativeApplicationInfo();
                                if (!appInfo) {
                                    return reject(new Error("NativeAppInfo API is not available"));
                                }
                                appInfo.getAppVersionNumber(resolve, reject);
                            })];
                }
            });
        });
    }
    exports.getAppVersionNumber = getAppVersionNumber;
    function isVersionGreaterOrEqualTo(versionToTest, versionToTestAgainst) {
        if (!versionToTest || !versionToTestAgainst) {
            return false;
        }
        var versionToTestParts = versionToTest.split(".").map(function (v) { return parseInt(v, 10); });
        var versionToTestAgainstParts = versionToTestAgainst.split(".").map(function (v) { return parseInt(v, 10); });
        return innerIsVersionGreaterOrEqualTo(versionToTestParts, versionToTestAgainstParts, 0);
    }
    exports.isVersionGreaterOrEqualTo = isVersionGreaterOrEqualTo;
    function innerIsVersionGreaterOrEqualTo(versionToTest, versionToTestAgainst, index) {
        if (isNaN(versionToTestAgainst[index])) {
            return true;
        }
        else if ((versionToTest[index] || 0) > (versionToTestAgainst[index] || 0)) {
            return true;
        }
        else if (versionToTest[index] < (versionToTestAgainst[index] || 0)) {
            return false;
        }
        else {
            return innerIsVersionGreaterOrEqualTo(versionToTest, versionToTestAgainst, index + 1);
        }
    }
});
//# sourceMappingURL=NativeApplicationInfo.js.map;
define('OutSystems/ClientRuntime/NativeLogger',["require", "exports", "tslib", "./Logger"], function (require, exports, tslib_1, Logger) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sendOTLog = exports.sendLog = exports.postLog = exports.NetworkStatus = void 0;
    var NetworkStatusModule;
    (function (NetworkStatusModule) {
        function isOnline() {
            return !!getNativeLogger();
        }
        NetworkStatusModule.isOnline = isOnline;
        function onOnline(_) { }
        NetworkStatusModule.onOnline = onOnline;
        function onOffline(_) { }
        NetworkStatusModule.onOffline = onOffline;
        function ping() {
            if (isOnline()) {
                return Promise.resolve();
            }
            else {
                return Promise.reject(new Error("NativeLogger API is not available"));
            }
        }
        NetworkStatusModule.ping = ping;
    })(NetworkStatusModule || (NetworkStatusModule = {}));
    exports.NetworkStatus = NetworkStatusModule;
    function getNativeLogger() {
        var _a;
        var w = window;
        return (_a = w === null || w === void 0 ? void 0 : w.OutSystemsNative) === null || _a === void 0 ? void 0 : _a.Logger;
    }
    function getNativeOTLogger() {
        var _a;
        var w = window;
        return (_a = w === null || w === void 0 ? void 0 : w.OutSystemsNative) === null || _a === void 0 ? void 0 : _a.OTLogger;
    }
    function postLog(logMessages) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var logger, otLogger, _i, logMessages_1, message;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger = getNativeLogger();
                        otLogger = getNativeOTLogger();
                        if (!((otLogger || logger) && (logMessages === null || logMessages === void 0 ? void 0 : logMessages.length) > 0)) return [3, 6];
                        _i = 0, logMessages_1 = logMessages;
                        _a.label = 1;
                    case 1:
                        if (!(_i < logMessages_1.length)) return [3, 6];
                        message = logMessages_1[_i];
                        if (!otLogger) return [3, 3];
                        return [4, (0, exports.sendOTLog)(otLogger, message)];
                    case 2:
                        _a.sent();
                        return [3, 5];
                    case 3: return [4, (0, exports.sendLog)(logger, message)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        _i++;
                        return [3, 1];
                    case 6: return [2];
                }
            });
        });
    }
    exports.postLog = postLog;
    var sendLog = function (logger, message) {
        return new Promise(function (resolve, reject) {
            switch (message.logType) {
                case Logger.LogTypes.General:
                    logger.logInfo(message.message, message.moduleName, resolve, reject);
                    break;
                case Logger.LogTypes.Error:
                    logger.logError(message.message, message.moduleName, message.extra, message.stack, resolve, reject);
                    break;
                case Logger.LogTypes.Trace:
                    logger.logDebug(message.message, message.moduleName, resolve, reject);
                    break;
                default:
                    logger.logError("Unknown log type: ".concat(message.logType, "; Message: ").concat(message.message), "NativeLogger", message.extra, new Error().stack, resolve, reject);
            }
        });
    };
    exports.sendLog = sendLog;
    var sendOTLog = function (logger, message) {
        switch (message.logType) {
            case Logger.LogTypes.General:
                return logger.logInfo({
                    instant: message.instant,
                    message: message.message,
                    source: message.moduleName,
                });
            case Logger.LogTypes.Error:
                return logger.logError({
                    instant: message.instant,
                    message: message.message,
                    source: message.moduleName,
                    attributes: message.extra,
                    stack: message.stack,
                });
            case Logger.LogTypes.Trace:
                return logger.logDebug({
                    instant: message.instant,
                    message: message.message,
                    source: message.moduleName,
                });
            default:
                return logger.logError({
                    instant: new Date().toISOString(),
                    message: "Unknown log type: ".concat(message.logType, "; Message: ").concat(message.message),
                    source: "NativeLogger",
                    attributes: message.extra,
                    stack: new Error().stack,
                });
        }
    };
    exports.sendOTLog = sendOTLog;
});
//# sourceMappingURL=NativeLogger.js.map;
define('OutSystems/ClientRuntime/Performance',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clear = exports.dump = exports.end = exports.start = void 0;
    var COLLECT = typeof __PERFORMANCE !== "undefined";
    function start(sectionName) {
        if (COLLECT) {
            __PERFORMANCE.start(sectionName);
        }
    }
    exports.start = start;
    function end(sectionName) {
        if (COLLECT) {
            __PERFORMANCE.end(sectionName);
        }
    }
    exports.end = end;
    function dump() {
        if (COLLECT) {
            return __PERFORMANCE.dump();
        }
    }
    exports.dump = dump;
    function clear() {
        if (COLLECT) {
            return __PERFORMANCE.clear();
        }
    }
    exports.clear = clear;
});
//# sourceMappingURL=Performance.js.map;
define('OutSystems/ClientRuntime/RequireManager',["require", "exports", "./Settings"], function (require, exports, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.configure = exports.loadModule = exports.setErrorHandler = exports.initialize = exports.setModuleIdToUrlMap = void 0;
    var BUNDLE_SEPARATOR_CHAR = "$";
    var REQUIRE_TYPE_SCRIPT_ERROR = "scripterror";
    var moduleIdToUrlMap;
    function setModuleIdToUrlMap(newModuleIdToUrlMap) {
        moduleIdToUrlMap = newModuleIdToUrlMap;
    }
    exports.setModuleIdToUrlMap = setModuleIdToUrlMap;
    function initialize() {
        ensureInitialized();
    }
    exports.initialize = initialize;
    function ensureInitialized() {
        ensureContextsArePatched();
    }
    function setErrorHandler(handler) {
        requirejs.onError = handler;
    }
    exports.setErrorHandler = setErrorHandler;
    function isRetryNeeded(error) {
        return error.requireType === REQUIRE_TYPE_SCRIPT_ERROR;
    }
    function tryUndefineErroneousModule(error) {
        var _a, _b;
        var requireError = error;
        var moduleIds = (_a = requireError.requireModules) === null || _a === void 0 ? void 0 : _a.concat((_b = requireError.parentModules) !== null && _b !== void 0 ? _b : []);
        if (!moduleIds && (moduleIds === null || moduleIds === void 0 ? void 0 : moduleIds.length) <= 0) {
            return false;
        }
        moduleIds.forEach(function (element) {
            var _a;
            requirejs.undef(element);
            if (element.indexOf("$") === -1) {
                var modulePath = moduleIdToUrlMap[element];
                var pathConfig = (_a = {}, _a[element] = modulePath, _a);
                requirejs.config({
                    paths: pathConfig,
                });
            }
        });
        ensureInitialized();
        return true;
    }
    function loadModule(moduleNames, onReady, onError) {
        var CDNFilenameVersioning = (0, Settings_1.getEnvParams)().CDNFilenameVersioning;
        var retryAttempts = 5;
        function retryLoadModuleOrFail(remainingRetryAttempts, error) {
            var callOnError = function () {
                onError ? onError(error) : requirejs.onError(error);
            };
            var noRetryNeeded = !isRetryNeeded(error) || remainingRetryAttempts === 0;
            if (noRetryNeeded) {
                callOnError();
                return;
            }
            setTimeout(function () {
                var couldNotUndefineModules = !tryUndefineErroneousModule(error);
                if (couldNotUndefineModules) {
                    callOnError();
                    return;
                }
                requirejs(moduleNames, onReady, function (err) { return retryLoadModuleOrFail(remainingRetryAttempts - 1, err); });
            }, 0);
        }
        if (!CDNFilenameVersioning) {
            requirejs(moduleNames, onReady, onError);
        }
        else {
            requirejs(moduleNames, onReady, function (err) { return retryLoadModuleOrFail(retryAttempts, err); });
        }
    }
    exports.loadModule = loadModule;
    function configure(scriptMap, defaultScriptsDir) {
        if (defaultScriptsDir === void 0) { defaultScriptsDir = "scripts"; }
        moduleIdToUrlMap = scriptMap;
        var requireJsConfig = { baseUrl: defaultScriptsDir, paths: {}, waitSeconds: 30 };
        if (moduleIdToUrlMap) {
            for (var js in moduleIdToUrlMap) {
                if (requirejs.specified(js) || requirejs.defined(js)) {
                    delete moduleIdToUrlMap[js];
                }
            }
            requireJsConfig.paths = moduleIdToUrlMap;
        }
        requirejs.config(requireJsConfig);
        ensureInitialized();
    }
    exports.configure = configure;
    function ensureContextsArePatched() {
        var contexts = requirejs.s.contexts;
        Object.keys(contexts).forEach(function (key) {
            var context = contexts[key];
            if (!context._osNameToUrlPatched) {
                var oldNameToUrl_1 = context.nameToUrl;
                context.nameToUrl = function (moduleName, ext, skipExt) {
                    if (moduleName.indexOf(BUNDLE_SEPARATOR_CHAR) > 0 && moduleName.indexOf("?") === -1) {
                        moduleName = moduleName.split(BUNDLE_SEPARATOR_CHAR, 2)[0];
                    }
                    return oldNameToUrl_1.apply(context, [moduleName, ext, skipExt]);
                };
                context._osNameToUrlPatched = true;
            }
        });
    }
});
//# sourceMappingURL=RequireManager.js.map;
define('OutSystems/ClientRuntime/ObjectExtensions',["require", "exports", "./DataTypes"], function (require, exports, DataTypes) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatenateMultipleTimes = exports.overrideMethod = exports.roughSizeOf = exports.isEmptyObject = exports.assign = exports.arrayShallowEquals = exports.shallowEquals = exports.getHashCode = void 0;
    function defaultShouldCompareProp() {
        var _ = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _[_i] = arguments[_i];
        }
        return true;
    }
    function getHashCode(t) {
        var hash = 0;
        var len = t.length;
        if (len === 0) {
            return hash;
        }
        for (var i = 0; i < len; i++) {
            var chr = t.charCodeAt(i);
            hash = (hash << 5) - hash + chr;
            hash |= 0;
        }
        return hash;
    }
    exports.getHashCode = getHashCode;
    function innerShallowEquals(objA, objB) {
        if (!objA || !objB || (DataTypes.TypeValidations.isBasicType(objA) && !(objA.equals instanceof Function))) {
            return objA === objB;
        }
        if (objA.fastEquals instanceof Function) {
            return objA.fastEquals(objB);
        }
        return DataTypes.equals(objA, objB);
    }
    function shallowEquals(objA, objB, shouldCompareProperty) {
        if (shouldCompareProperty === void 0) { shouldCompareProperty = defaultShouldCompareProp; }
        if (objA === objB) {
            return true;
        }
        if (objA === null || objB === null || typeof objA !== "object" || typeof objB !== "object") {
            return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
            return false;
        }
        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
        for (var i = 0; i < keysA.length; i++) {
            var propertyName = keysA[i];
            if (shouldCompareProperty(objA, propertyName)) {
                if (!bHasOwnProperty(propertyName)) {
                    return false;
                }
                if (!innerShallowEquals(objA[propertyName], objB[propertyName])) {
                    return false;
                }
            }
        }
        return true;
    }
    exports.shallowEquals = shallowEquals;
    function arrayShallowEquals(objA, objB) {
        if (objA === objB) {
            return true;
        }
        if (objA === null || objB === null || !(objA instanceof Array) || !(objB instanceof Array)) {
            return false;
        }
        if (objA.length !== objB.length) {
            return false;
        }
        for (var i = 0; i < objA.length; i++) {
            if (!innerShallowEquals(objA[i], objB[i])) {
                return false;
            }
        }
        return true;
    }
    exports.arrayShallowEquals = arrayShallowEquals;
    function assign(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (target === null || target === undefined) {
            throw new TypeError("ObjectHelper.assign target cannot be null or undefined");
        }
        var to = Object(target);
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
            var nextSource = sources_1[_a];
            if (nextSource === null || nextSource === undefined) {
                continue;
            }
            var from = Object(nextSource);
            for (var key in from) {
                if (hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
        }
        return to;
    }
    exports.assign = assign;
    function isEmptyObject(obj) {
        return !obj || Object.keys(obj).length === 0;
    }
    exports.isEmptyObject = isEmptyObject;
    function roughSizeOf(object) {
        var visited = [];
        var stack = [object];
        var size = 0;
        while (stack.length) {
            var obj = stack.pop();
            switch (typeof obj) {
                case "boolean":
                    size += 4;
                    break;
                case "number":
                    size += 8;
                    break;
                case "string":
                    size += 2 * obj.length;
                    break;
                case "object":
                    if (visited.indexOf(obj) !== -1) {
                        continue;
                    }
                    visited.push(obj);
                    if (!Array.isArray(obj)) {
                        size += 2 * Object.keys(obj).length;
                    }
                    for (var key in obj) {
                        var childObj = null;
                        try {
                            childObj = obj[key];
                        }
                        catch (e) {
                        }
                        if (childObj) {
                            stack.push(childObj);
                        }
                    }
                    break;
                default:
                    break;
            }
        }
        return size;
    }
    exports.roughSizeOf = roughSizeOf;
    function overrideMethod(prototype, methodName, overridingMethod) {
        var originalMethod = prototype[methodName] || (function () { });
        prototype[methodName] = function () {
            return overridingMethod.apply(this, [].concat(originalMethod, arguments));
        };
    }
    exports.overrideMethod = overrideMethod;
    function concatenateMultipleTimes(source, repetition, repeatCount) {
        var result = source;
        for (var i = 0; i < repeatCount; i++) {
            result += repetition;
        }
        return result;
    }
    exports.concatenateMultipleTimes = concatenateMultipleTimes;
});
//# sourceMappingURL=ObjectExtensions.js.map;
define('OutSystems/ClientRuntime/ScreenStateCache',["require", "exports", "./Logger", "./ObjectExtensions"], function (require, exports, Logger, ObjectExtensions) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScreenStateCache = void 0;
    var ScreenStateCache = (function () {
        function ScreenStateCache() {
        }
        ScreenStateCache.addKey = function (stateCacheKey) {
            this.cache[stateCacheKey] = {
                components: {},
            };
            this.cacheKeys.push(stateCacheKey);
            var deltaToRemove = this.cacheKeys.length - ScreenStateCache.MaxCacheSize;
            if (deltaToRemove > 0) {
                for (var i = 0; i < deltaToRemove; i++) {
                    this.removeKey(this.cacheKeys[i]);
                }
            }
        };
        ScreenStateCache.removeKey = function (stateCacheKey) {
            delete this.cache[stateCacheKey];
            this.cacheKeys.splice(this.cacheKeys.indexOf(stateCacheKey), 1);
        };
        ScreenStateCache.save = function (stateCacheKey, componentKey, state, customProperties) {
            if (!this.cache[stateCacheKey]) {
                this.addKey(stateCacheKey);
            }
            this.cache[stateCacheKey].components[componentKey] = {
                state: state,
                customProperties: customProperties,
            };
        };
        ScreenStateCache.load = function (stateCacheKey, componentKey) {
            var screenState = ScreenStateCache.loadScreenCache(stateCacheKey);
            return screenState ? screenState.components[componentKey] : null;
        };
        ScreenStateCache.loadScreenCache = function (stateCacheKey) {
            return this.cache[stateCacheKey] || undefined;
        };
        ScreenStateCache.clear = function (stateCacheKey) {
            var _this = this;
            if (!stateCacheKey) {
                this.cache = {};
                this.cacheKeys = [];
            }
            else if (this.cache[stateCacheKey]) {
                this.removeKey(stateCacheKey);
            }
            Logger.trace(this, function () {
                return "State cache contains ".concat(Object.keys(_this.cache).length, " entries with a total size of ").concat(ObjectExtensions.roughSizeOf(_this.cache), " bytes");
            });
        };
        ScreenStateCache.inspect = function () {
            return {
                cache: this.cache,
                cacheKeys: this.cacheKeys,
            };
        };
        ScreenStateCache.MaxCacheSize = 20;
        ScreenStateCache.cache = {};
        ScreenStateCache.cacheKeys = [];
        return ScreenStateCache;
    }());
    exports.ScreenStateCache = ScreenStateCache;
});
//# sourceMappingURL=ScreenStateCache.js.map;
define('OutSystems/ClientRuntime/EventDispatcher',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventDispatcher = exports.TransitionEndResult = exports.EventType = void 0;
    var EventType;
    (function (EventType) {
        EventType[EventType["TransitionStart"] = 0] = "TransitionStart";
        EventType[EventType["TransitionEnd"] = 1] = "TransitionEnd";
        EventType[EventType["NavigationStart"] = 2] = "NavigationStart";
    })(EventType || (exports.EventType = EventType = {}));
    var TransitionEndResult;
    (function (TransitionEndResult) {
        TransitionEndResult[TransitionEndResult["Success"] = 0] = "Success";
        TransitionEndResult[TransitionEndResult["Failure"] = 1] = "Failure";
    })(TransitionEndResult || (exports.TransitionEndResult = TransitionEndResult = {}));
    var lastListenerId = 0;
    var listeners = (function () {
        var result = [];
        var eventsCount = Object.keys(EventType).length / 2;
        for (var i = 0; i < eventsCount; i++) {
            result.push({});
        }
        return result;
    })();
    var EventDispatcher;
    (function (EventDispatcher) {
        function getNewId() {
            return "_" + lastListenerId++;
        }
        function listen(eventType, callback, listenOnce) {
            if (listenOnce === void 0) { listenOnce = false; }
            var id = getNewId();
            listeners[eventType][id] = { listenOnce: listenOnce, callback: callback };
            return { type: eventType, id: id };
        }
        EventDispatcher.listen = listen;
        function listenOnce(eventType, callback) {
            return listen(eventType, callback, true);
        }
        EventDispatcher.listenOnce = listenOnce;
        function unregister(listenerId) {
            return listenerId && innerUnregister(listenerId.type, listenerId.id);
        }
        EventDispatcher.unregister = unregister;
        function innerUnregister(eventType, id) {
            return delete listeners[eventType][id];
        }
        function dispatch(evt) {
            var result = undefined;
            var eventListeners = listeners[evt.type];
            for (var listenerId in eventListeners) {
                var listener = eventListeners[listenerId];
                if (listener.listenOnce) {
                    innerUnregister(evt.type, listenerId);
                }
                var lastResult = listener.callback(evt.args);
                if (lastResult !== undefined) {
                    result = lastResult;
                }
            }
            return result;
        }
        EventDispatcher.dispatch = dispatch;
    })(EventDispatcher || (exports.EventDispatcher = EventDispatcher = {}));
});
//# sourceMappingURL=EventDispatcher.js.map;
define('OutSystems/ClientRuntime/modules/Common/UrlUtils',["require", "exports", "../../RegExpHelper"], function (require, exports, RegExpHelper_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildURLFromVersionedResource = exports.replaceBasePath = void 0;
    var replaceBasePath = function (url, originalBasePath, newBasePath) {
        if (originalBasePath.toLowerCase() === newBasePath.toLowerCase()) {
            return url;
        }
        var originalBasePathRegExp = new RegExp("^".concat((0, RegExpHelper_1.escape)(originalBasePath)), "i");
        return url.replace(originalBasePathRegExp, newBasePath);
    };
    exports.replaceBasePath = replaceBasePath;
    var buildURLFromVersionedResource = function (baseUrl, token) { return "".concat(baseUrl).concat(token); };
    exports.buildURLFromVersionedResource = buildURLFromVersionedResource;
});
//# sourceMappingURL=UrlUtils.js.map;
define('OutSystems/ClientRuntime/modules/Native/Prebundle',["require", "exports", "tslib", "../../NativeHelper", "./IOutSystemsNativeHost"], function (require, exports, tslib_1, NativeHelper, IOutSystemsNativeHost_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getManifest = exports.isPrebundlePluginAvailable = void 0;
    function getPrebundlePlugin() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, NativeHelper.ensureNativeReady()];
                    case 1:
                        _a.sent();
                        if ((0, IOutSystemsNativeHost_1.isIOutSystemsNativeHost)(window)) {
                            return [2, window.OutSystemsNative.Prebundle];
                        }
                        else {
                            return [2, null];
                        }
                        return [3, 3];
                    case 2:
                        e_1 = _a.sent();
                        return [2, null];
                    case 3: return [2];
                }
            });
        });
    }
    function isPrebundlePluginAvailable() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var prebundlePlugin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, getPrebundlePlugin()];
                    case 1:
                        prebundlePlugin = _a.sent();
                        return [2, !!prebundlePlugin];
                }
            });
        });
    }
    exports.isPrebundlePluginAvailable = isPrebundlePluginAvailable;
    function getManifest() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var plugin;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, getPrebundlePlugin()];
                    case 1:
                        plugin = _a.sent();
                        if (!plugin) {
                            return [2, null];
                        }
                        return [2, new Promise(function (resolve, reject) {
                                plugin.getManifest(resolve, reject);
                            })];
                }
            });
        });
    }
    exports.getManifest = getManifest;
});
//# sourceMappingURL=Prebundle.js.map;
define('OutSystems/ClientRuntime/ResourceCache',["require", "exports", "tslib", "./ApplicationInfo", "./Logger", "./modules/Common/UrlUtils", "./NativeHelper", "./Request"], function (require, exports, tslib_1, ApplicationInfo_1, Logger, UrlUtils_1, NativeHelper, Request) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.forceDummyCacheHandler = exports.ResourceCache = void 0;
    var ResourceCacheModule = "ResourceCache";
    var AbstractCacheHandler = (function () {
        function AbstractCacheHandler() {
            this.isCaching = false;
            this.errorMessages = [];
            this.onFinishListeners = [];
            this.onErrorListeners = [];
            this.onProgressListeners = [];
            Logger.trace(ResourceCacheModule, "Initializing resource cache using '" + this.getCacheName() + "' mechanism");
        }
        AbstractCacheHandler.prototype.onFinish = function () {
            this.isCaching = false;
            Logger.trace(ResourceCacheModule, "Caching finished");
            this.onFinishListeners.forEach(function (listener) { return listener(); });
            this.onFinishListeners = [];
            this.onErrorListeners = [];
            this.onProgressListeners = [];
        };
        AbstractCacheHandler.prototype.onError = function (reason) {
            Logger.trace(ResourceCacheModule, "Caching error: ".concat(reason));
            this.errorMessages.push(reason);
            this.onErrorListeners.forEach(function (listener) { return listener(reason); });
        };
        AbstractCacheHandler.prototype.onProgress = function (loaded, total) {
            Logger.trace(ResourceCacheModule, "Caching progress: ".concat(loaded, " / ").concat(total));
            this.onProgressListeners.forEach(function (listener) { return listener(loaded, total); });
        };
        AbstractCacheHandler.prototype.listen = function (onFinish, onError, onProgress) {
            Logger.trace(ResourceCacheModule, "Started listening to resource cache events");
            if (this.errorMessages.length > 0 && !!onError) {
                onError(this.errorMessages.join("\n"));
            }
            if (!this.isCaching && !!onFinish) {
                onFinish();
            }
            if (this.isCaching) {
                if (!!onFinish) {
                    this.onFinishListeners.push(onFinish);
                }
                if (!!onError) {
                    this.onErrorListeners.push(onError);
                }
                if (!!onProgress) {
                    this.onProgressListeners.push(onProgress);
                }
            }
            else {
                Logger.trace(ResourceCacheModule, "Resource caching was already finished, listeners not attached");
            }
        };
        AbstractCacheHandler.prototype.start = function (manifest) {
            var _this = this;
            Logger.trace(ResourceCacheModule, "Started caching resources for version ".concat(manifest.versionToken));
            return new Promise(function (resolve, reject) {
                if (!_this.isCaching) {
                    try {
                        _this.isCaching = true;
                        _this.errorMessages = [];
                        _this.innerStart(manifest);
                    }
                    catch (e) {
                        _this.onError(e.message);
                        reject(e.message);
                        return;
                    }
                }
                var promiseState = { finished: false };
                _this.listen(function () {
                    if (!promiseState.finished) {
                        promiseState.finished = true;
                        resolve();
                    }
                }, function (reason) {
                    if (!promiseState.finished) {
                        promiseState.finished = true;
                        reject(reason);
                    }
                }, null);
            });
        };
        AbstractCacheHandler.prototype.switch = function (versionToken) {
            Logger.trace(ResourceCacheModule, "Switching cached resources to version ".concat(versionToken));
            this.innerSwitch(versionToken);
        };
        return AbstractCacheHandler;
    }());
    var NativeCacheHandler = (function (_super) {
        tslib_1.__extends(NativeCacheHandler, _super);
        function NativeCacheHandler() {
            var _this = _super.call(this) || this;
            _this.isNativeReady = false;
            _this.isCacheAvailable = false;
            NativeHelper.ensureNativeReady().then(function () {
                _this.isNativeReady = true;
                _this.isCacheAvailable = typeof OSCache !== "undefined";
                if (!_this.isCacheAvailable) {
                    Logger.error(ResourceCacheModule, NativeCacheHandler.OSCacheNotFoundMessage);
                    return;
                }
                OSCache.addEventListener("onfinish", function (e) { return _this.onFinish(); });
                OSCache.addEventListener("onerror", function (e) { return _this.onError(e.message); });
                OSCache.addEventListener("onprogress", function (e) { return _this.onProgress(e.loaded, e.total); });
            }, function (e) {
                Logger.error(ResourceCacheModule, "OSCache was not initialized because Cordova was not loaded.", e);
            });
            return _this;
        }
        NativeCacheHandler.prototype.checkOSCacheAndDeferCall = function (propagateErrors, callbackToDefer) {
            if (!this.isNativeReady) {
                Logger.trace(ResourceCacheModule, "OSCache call deferred until Cordova is loaded");
                NativeHelper.ensureNativeReady().then(callbackToDefer);
                return false;
            }
            else if (!this.isCacheAvailable) {
                if (propagateErrors) {
                    this.onError(NativeCacheHandler.OSCacheNotFoundMessage);
                }
                return false;
            }
            return true;
        };
        NativeCacheHandler.prototype.getCacheName = function () {
            return "Native Cache";
        };
        NativeCacheHandler.prototype.innerStart = function (manifest) {
            var _this = this;
            if (!this.checkOSCacheAndDeferCall(true, function () { return _this.innerStart(manifest); })) {
                return;
            }
            var basePath = (0, ApplicationInfo_1.getBasePath)();
            var homeModulePath = "/".concat((0, ApplicationInfo_1.getHomeModuleName)(), "/");
            var urls = [];
            for (var _i = 0, _a = Object.getOwnPropertyNames(manifest.urlVersions); _i < _a.length; _i++) {
                var baseUrl = _a[_i];
                urls.push((0, UrlUtils_1.buildURLFromVersionedResource)((0, UrlUtils_1.replaceBasePath)(baseUrl, homeModulePath, basePath), manifest.urlVersions[baseUrl]));
            }
            Logger.trace(ResourceCacheModule, "Start Caching... ".concat(urls.length, " files: "));
            for (var i = 0; i < urls.length; i++) {
                Logger.trace(ResourceCacheModule, "".concat(i + 1, "/").concat(urls.length, ": ").concat(urls[i]));
            }
            OSCache.startCaching(manifest.versionToken, urls, manifest.urlMappings, manifest.urlMappingsNoCache);
        };
        NativeCacheHandler.prototype.innerSwitch = function (versionToken) {
            var _this = this;
            if (!this.checkOSCacheAndDeferCall(false, function () { return _this.innerSwitch(versionToken); })) {
                return;
            }
            try {
                OSCache.switchToVersion(versionToken);
            }
            catch (e) {
                Logger.error(ResourceCacheModule, e);
            }
        };
        NativeCacheHandler.OSCacheNotFoundMessage = "OSCache not found (is a native plugin missing?)";
        return NativeCacheHandler;
    }(AbstractCacheHandler));
    var PreloaderCacheHandler = (function (_super) {
        tslib_1.__extends(PreloaderCacheHandler, _super);
        function PreloaderCacheHandler() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.requested = 0;
            _this.resourceQueue = [];
            _this.count = 0;
            _this.total = 0;
            return _this;
        }
        PreloaderCacheHandler.prototype.getCacheName = function () {
            return "Preloader";
        };
        PreloaderCacheHandler.prototype.innerStart = function (manifest) {
            if (this.isOngoing()) {
                return;
            }
            this.count = this.requested = this.total = 0;
            this.resources = manifest.urlVersions;
            if (!this.resources) {
                return;
            }
            this.resourceQueue = Object.getOwnPropertyNames(this.resources);
            this.total = this.resourceQueue.length;
            if (this.resourceQueue.length <= 0) {
                return;
            }
            var basePath = (0, ApplicationInfo_1.getBasePath)();
            var homeModulePath = "/".concat((0, ApplicationInfo_1.getHomeModuleName)(), "/");
            for (var i = 0; i < PreloaderCacheHandler.DefaultWindowSize; ++i) {
                this.prefetchNext(homeModulePath, basePath);
            }
        };
        PreloaderCacheHandler.prototype.innerSwitch = function (versionToken) {
        };
        PreloaderCacheHandler.prototype.isOngoing = function () {
            return this.requested > 0 || this.resourceQueue.length > 0;
        };
        PreloaderCacheHandler.prototype.prefetchNext = function (homeModulePath, basePath) {
            var _this = this;
            var resourceBaseUrl = this.resourceQueue.pop();
            var url = (0, UrlUtils_1.buildURLFromVersionedResource)((0, UrlUtils_1.replaceBasePath)(resourceBaseUrl, homeModulePath, basePath), this.resources[resourceBaseUrl]);
            Logger.trace(ResourceCacheModule, "Requesting resource: ".concat(url));
            Request.createHttpRequest({ method: "GET", url: url }).then(function (request) {
                request.onSuccess =
                    request.onError =
                        request.onTimeout =
                            function (response) {
                                if (!!_this.onError && (!response.complete || response.statusCode !== 200)) {
                                    _this.onError("Failed to load resource '".concat(url, "' with status: ").concat(response.statusText));
                                }
                                if (!!_this.onProgress) {
                                    _this.onProgress(++_this.count, _this.total);
                                }
                                _this.requested--;
                                if (_this.resourceQueue.length === 0 && _this.requested === 0) {
                                    if (!!_this.onFinish) {
                                        _this.onFinish();
                                    }
                                }
                                else if (_this.resourceQueue.length > 0) {
                                    _this.prefetchNext(homeModulePath, basePath);
                                }
                            };
                request.setTimeout(PreloaderCacheHandler.DefaultResourceTimeout);
                request.send();
            });
            this.requested++;
        };
        PreloaderCacheHandler.DefaultWindowSize = 2;
        PreloaderCacheHandler.DefaultResourceTimeout = 20000;
        return PreloaderCacheHandler;
    }(AbstractCacheHandler));
    var DummyCacheHandler = (function (_super) {
        tslib_1.__extends(DummyCacheHandler, _super);
        function DummyCacheHandler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DummyCacheHandler.prototype.getCacheName = function () {
            return "Dummy";
        };
        DummyCacheHandler.prototype.innerStart = function (manifest) {
            this.onFinish();
        };
        DummyCacheHandler.prototype.innerSwitch = function (versionToken) { };
        return DummyCacheHandler;
    }(AbstractCacheHandler));
    function getResourcesCacheHandler() {
        if (typeof document === "undefined") {
            return new DummyCacheHandler();
        }
        else if (NativeHelper.isRunningOnNative()) {
            return new NativeCacheHandler();
        }
        else {
            return new PreloaderCacheHandler();
        }
    }
    exports.ResourceCache = getResourcesCacheHandler();
    function forceDummyCacheHandler() {
        exports.ResourceCache = new DummyCacheHandler();
    }
    exports.forceDummyCacheHandler = forceDummyCacheHandler;
});
//# sourceMappingURL=ResourceCache.js.map;
define('OutSystems/ClientRuntime/VersionsManager',["require", "exports", "tslib", "./ApplicationInfo", "./ErrorHandling", "./EventDispatcher", "./Exceptions", "./Flow", "./Injector", "./Injector/KnownServices", "./Logger", "./modules/Common/UrlUtils", "./modules/Database/IDatabase", "./modules/Native/Prebundle", "./NativeHelper", "./Navigation", "./Performance", "./RequireManager", "./ResourceCache", "./Settings", "./StorageProvider"], function (require, exports, tslib_1, ApplicationInfo, ErrorHandling, EventDispatcher_1, Exceptions, Flow, Injector_1, KnownServices_1, Logger, UrlUtils_1, IDatabase_1, NativePrebundle, NativeHelper, Navigation, OSPerformance, RequireManager, ResourceCache_1, Settings_1, StorageProvider_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VersionsManager = exports.getVersionedUrl = exports.buildScriptMap = exports.VersionsManagerStorage = exports.UpgradeStatus = exports.UpgradeFailReason = void 0;
    var VERSIONS_MANAGER_MODULE_NAME = "VersionsManager";
    var INDEX_PAGE_NAME = "index.html";
    var INDEX_NOT_FOUND = -1;
    var CONTENT_HASH_SEPARATOR = "__";
    var UpgradeFailReason;
    (function (UpgradeFailReason) {
        UpgradeFailReason[UpgradeFailReason["Generic"] = 0] = "Generic";
        UpgradeFailReason[UpgradeFailReason["Resources"] = 1] = "Resources";
        UpgradeFailReason[UpgradeFailReason["DataModel"] = 2] = "DataModel";
    })(UpgradeFailReason || (exports.UpgradeFailReason = UpgradeFailReason = {}));
    var UpgradeStatus;
    (function (UpgradeStatus) {
        UpgradeStatus[UpgradeStatus["Idle"] = 0] = "Idle";
        UpgradeStatus[UpgradeStatus["Upgrading"] = 1] = "Upgrading";
        UpgradeStatus[UpgradeStatus["UpgradeSuccess"] = 2] = "UpgradeSuccess";
        UpgradeStatus[UpgradeStatus["UpgradeFailed"] = 3] = "UpgradeFailed";
    })(UpgradeStatus || (exports.UpgradeStatus = UpgradeStatus = {}));
    exports.VersionsManagerStorage = {
        applicationInfo: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Persistent, "ApplicationInfo"),
        upgradeStatus: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Session, "UpgradeStatus", 0),
    };
    var buildScriptMap = function (resourceMap, versionToken, cdnUrlVersioning, getHomeModuleName, getBasePath) {
        if (cdnUrlVersioning === void 0) { cdnUrlVersioning = false; }
        if (getHomeModuleName === void 0) { getHomeModuleName = ApplicationInfo.getHomeModuleName; }
        if (getBasePath === void 0) { getBasePath = ApplicationInfo.getBasePath; }
        var homeModulePath = "/".concat(getHomeModuleName(), "/");
        var basePath = getBasePath();
        return Object.keys(resourceMap)
            .filter(function (url) { return /\.js$/i.test(url); })
            .reduce(function (map, key) {
            var urlVersionToken = resourceMap[key];
            var url = (0, UrlUtils_1.replaceBasePath)(key, homeModulePath, basePath);
            var urlPathnames = url.split("/");
            var alias = makeModuleAlias(urlPathnames[urlPathnames.length - 1], cdnUrlVersioning);
            if (!map.hasOwnProperty(alias)) {
                map[alias] = (0, UrlUtils_1.buildURLFromVersionedResource)(url, urlVersionToken);
            }
            return map;
        }, {});
    };
    exports.buildScriptMap = buildScriptMap;
    var makeModuleAlias = function (url, cdnUrlVersioning) {
        if (cdnUrlVersioning) {
            var hashSeparatorPos = url.lastIndexOf(CONTENT_HASH_SEPARATOR);
            return hashSeparatorPos !== INDEX_NOT_FOUND ? url.substring(0, hashSeparatorPos) : url.replace(".js", "");
        }
        else {
            return url.replace(".js", "");
        }
    };
    var removeFileExtension = function (filename) {
        var fileExtensionIndex = filename.lastIndexOf(".");
        if (fileExtensionIndex !== INDEX_NOT_FOUND) {
            return filename.substring(0, fileExtensionIndex);
        }
        else {
            return filename;
        }
    };
    var getModuleBasedUrlFromRelativeUrl = function (relativeUrl, homeModuleName) {
        return "/".concat(homeModuleName, "/").concat(relativeUrl);
    };
    var getResourceVersionTokenFromManifest = function (relativeUrl, homeModuleName, urlVersions) { return (urlVersions ? urlVersions[getModuleBasedUrlFromRelativeUrl(relativeUrl, homeModuleName)] : undefined); };
    var findResourceUrl = function (relativeUrl, urlVersions, cdnUrlVersioning) {
        if (cdnUrlVersioning) {
            var relativeUrlWithoutExtension_1 = removeFileExtension(relativeUrl);
            var matchedUrlVersions = urlVersions
                ? Object.keys(urlVersions).filter(function (p) { return p.indexOf("".concat(relativeUrlWithoutExtension_1).concat(CONTENT_HASH_SEPARATOR)) !== INDEX_NOT_FOUND; })
                : [];
            if (matchedUrlVersions.length > 0) {
                var lastHashSeparatorPos = matchedUrlVersions[0].lastIndexOf(CONTENT_HASH_SEPARATOR);
                var versionHashAndExtension = matchedUrlVersions[0].substring(lastHashSeparatorPos);
                return "".concat(relativeUrlWithoutExtension_1).concat(versionHashAndExtension);
            }
        }
        return relativeUrl;
    };
    var getVersionedUrl = function (relativeUrl, urlVersions, cdnUrlVersioning, getHomeModuleName, getBasePath) {
        if (cdnUrlVersioning === void 0) { cdnUrlVersioning = false; }
        if (getHomeModuleName === void 0) { getHomeModuleName = ApplicationInfo.getHomeModuleName; }
        if (getBasePath === void 0) { getBasePath = ApplicationInfo.getBasePath; }
        var homeModuleName = getHomeModuleName();
        var basePath = getBasePath();
        var resourceUrl = findResourceUrl(relativeUrl, urlVersions, cdnUrlVersioning);
        var versionToken = getResourceVersionTokenFromManifest(resourceUrl, homeModuleName, urlVersions);
        if (versionToken) {
            var urlFromVersionedResource = (0, UrlUtils_1.buildURLFromVersionedResource)(getModuleBasedUrlFromRelativeUrl(resourceUrl, homeModuleName), versionToken !== null && versionToken !== void 0 ? versionToken : "");
            var moduleNameWithSlashes = "/".concat(homeModuleName, "/");
            return (0, UrlUtils_1.replaceBasePath)(urlFromVersionedResource, moduleNameWithSlashes, basePath);
        }
        return resourceUrl;
    };
    exports.getVersionedUrl = getVersionedUrl;
    var VersionsManager = (function () {
        function VersionsManager() {
            this._isAutoUpgradeDisabled = false;
            this.checkedCachedInfoConsistency = false;
        }
        Object.defineProperty(VersionsManager.prototype, "cachedAppInfo", {
            get: function () {
                var appInfo = exports.VersionsManagerStorage.applicationInfo.get();
                if (appInfo) {
                    if (!this.checkedCachedInfoConsistency) {
                        try {
                            VersionsManager.validateApplicationInfo(appInfo);
                        }
                        catch (e) {
                            appInfo = null;
                            exports.VersionsManagerStorage.applicationInfo.remove();
                        }
                        this.checkedCachedInfoConsistency = true;
                    }
                }
                return appInfo;
            },
            set: function (value) {
                exports.VersionsManagerStorage.applicationInfo.set(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VersionsManager.prototype, "currentAppInfo", {
            get: function () {
                return this.pendingAppInfo ? this.pendingAppInfo : this.cachedAppInfo;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VersionsManager.prototype, "upgradeStatus", {
            get: function () {
                return exports.VersionsManagerStorage.upgradeStatus.get();
            },
            set: function (value) {
                exports.VersionsManagerStorage.upgradeStatus.set(value);
            },
            enumerable: false,
            configurable: true
        });
        VersionsManager.prototype.initialize = function (initDbPromise, eventHandlers) {
            var _this = this;
            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Initializing VersionsManager");
            this.onVersionReady = eventHandlers.onVersionReady || (function () { });
            this.onUpgradeFinished = eventHandlers.onUpgradeFinished || (function (_) { });
            this.onNewVersionDetected =
                (!this.isUpgradeDisabled && eventHandlers.onNewVersionDetected) || (function (_) { return Promise.resolve(null); });
            var onAppInfoReady = eventHandlers.onAppInfoReady || (function (_) { });
            this.initialUpgradeStatus = this.upgradeStatus;
            var homeModuleName = ApplicationInfo.getHomeModuleName();
            if (!homeModuleName) {
                return Promise.reject(Error("Home module not defined!"));
            }
            this.enableBackgroundCheckForNewVersions();
            return this.fetchApplicationManifest().then(function (_a) {
                var manifest = _a.manifest, isFromPrebundle = _a.isFromPrebundle;
                _this.pendingAppInfo = manifest;
                onAppInfoReady(manifest);
                var CDNFilenameVersioning = (0, Settings_1.getEnvParams)().CDNFilenameVersioning;
                RequireManager.configure((0, exports.buildScriptMap)(manifest.manifest.urlVersions, manifest.manifest.versionToken, CDNFilenameVersioning));
                if (_this.isNewVersion(manifest.manifest, isFromPrebundle)) {
                    if (!_this.isUpgradeDisabled && _this.usingStaleIndex(manifest)) {
                        Navigation.reloadCurrentLocation(true);
                        Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Reloading application - index.html was changed in the server");
                        return false;
                    }
                    _this.upgrade(manifest, initDbPromise);
                }
                else {
                    _this.initDataModel(initDbPromise);
                }
                return true;
            });
        };
        VersionsManager.prototype.initDataModel = function (initDbPromise) {
            var _this = this;
            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Initializing data model");
            initDbPromise
                .then(function (db) {
                return _this.upgradeDataModel(db)
                    .then(function () { return _this.switchDataModel(db); })
                    .then(function () {
                    _this.onVersionReady();
                });
            })
                .then(function () { return _this.setUpgradeStatus(0); })
                .catch(function (e) { return _this.handleInitError(e); });
        };
        VersionsManager.prototype.cacheResourcesInBackground = function (appInfoCallback) {
            var _this = this;
            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Caching resources in the background...");
            return this.fetchApplicationManifest(false)
                .then(function (_a) {
                var manifest = _a.manifest, isFromPrebundle = _a.isFromPrebundle;
                var isUsingStaleIndex = _this.usingStaleIndex(manifest);
                if (appInfoCallback) {
                    appInfoCallback(isUsingStaleIndex);
                }
                Navigation.forceReloadOnNextNavigation(isUsingStaleIndex);
                if (_this.isNewVersion(manifest.manifest, isFromPrebundle)) {
                    return _this.upgradeResources(manifest);
                }
            })
                .catch(function (e) {
                return Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Error caching resources for new version in the background: " + e);
            });
        };
        VersionsManager.prototype.getResourceVersionToken = function (relativeUrl, homeModuleName) {
            if (!this.currentAppInfo) {
                return undefined;
            }
            return getResourceVersionTokenFromManifest(relativeUrl, homeModuleName, this.currentAppInfo.manifest.urlVersions);
        };
        VersionsManager.prototype.isNewVersion = function (versionInfo, isFromPrebundle) {
            var versionToken = versionInfo.versionToken;
            var previousVersionToken = this.getLastApplicationVersionToken();
            var hasTokenChanged = versionToken !== previousVersionToken;
            if (this.canDisableNativeAutoUpgrade) {
                var isAutoUpgradeDisabled_1 = this.isAutoUpgradeDisabled;
                var isUpgradable_1 = hasTokenChanged && (!isAutoUpgradeDisabled_1 || isFromPrebundle);
                Logger.trace(this, function () {
                    if (hasTokenChanged) {
                        return "Version check found a new version '".concat(versionToken, "' from ").concat(isFromPrebundle ? "prebundle" : "server", " with auto-upgrade ").concat(isAutoUpgradeDisabled_1 ? "disabled" : "enabled", " and decided it is ").concat(!isUpgradable_1 ? "not " : "", "upgradable. Current version has token '").concat(previousVersionToken, "'");
                    }
                    else {
                        return "Version check found the same version '".concat(versionToken, "'.");
                    }
                });
                return isUpgradable_1;
            }
            else {
                return hasTokenChanged;
            }
        };
        VersionsManager.prototype.getLastApplicationVersionToken = function (allowPendingVersion) {
            if (allowPendingVersion === void 0) { allowPendingVersion = false; }
            if (allowPendingVersion && this.pendingAppInfo) {
                return this.pendingAppInfo.manifest.versionToken;
            }
            var appInfo = this.cachedAppInfo;
            return appInfo ? appInfo.manifest.versionToken : "";
        };
        VersionsManager.prototype.getVersionToken = function (relativeUrl, homeModuleName) {
            return this.getResourceVersionToken(relativeUrl, homeModuleName);
        };
        VersionsManager.prototype.getVersionedUrl = function (relativeUrl) {
            var _a, _b, _c, _d;
            return (0, exports.getVersionedUrl)(relativeUrl, (_b = (_a = this.currentAppInfo) === null || _a === void 0 ? void 0 : _a.manifest) === null || _b === void 0 ? void 0 : _b.urlVersions, (_d = (_c = this.currentAppInfo) === null || _c === void 0 ? void 0 : _c.manifest) === null || _d === void 0 ? void 0 : _d.cdnUrlVersioning);
        };
        VersionsManager.getJSONParseErrorMessage = function (missingFieldName) {
            if (missingFieldName === void 0) { missingFieldName = ""; }
            return ("Error parsing manifest JSON " +
                (missingFieldName ? ", missing or invalid field: ".concat(missingFieldName, ".") : "."));
        };
        VersionsManager.validateApplicationInfo = function (appInfo) {
            if (!appInfo) {
                throw Error(this.getJSONParseErrorMessage());
            }
            if (!appInfo.manifest) {
                throw Error(this.getJSONParseErrorMessage("manifest"));
            }
            var manifest = appInfo.manifest;
            if (!manifest.versionToken || typeof manifest.versionToken !== "string") {
                throw Error(this.getJSONParseErrorMessage("manifest.versionToken"));
            }
            if (!manifest.urlVersions || typeof manifest.urlVersions !== "object") {
                throw Error(this.getJSONParseErrorMessage("manifest.urlVersions"));
            }
            if (!manifest.urlMappings || typeof manifest.urlMappings !== "object") {
                throw Error(this.getJSONParseErrorMessage("manifest.urlMappings"));
            }
            if (!manifest.urlMappingsNoCache || typeof manifest.urlMappingsNoCache !== "object") {
                throw Error(this.getJSONParseErrorMessage("manifest.urlMappingsNoCache"));
            }
            if (!appInfo.data) {
                throw Error(this.getJSONParseErrorMessage("data"));
            }
            var data = appInfo.data;
            if (!data.modules || typeof data.modules !== "object") {
                throw Error(this.getJSONParseErrorMessage("data.modules"));
            }
        };
        VersionsManager.prototype.getLatestVersionFromServer = function () {
            return tslib_1.__awaiter(this, arguments, void 0, function (fromPrefetch) {
                var versionInfo;
                if (fromPrefetch === void 0) { fromPrefetch = false; }
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, ((fromPrefetch && OSManifestLoader.prefetchedVersion) ||
                                OSManifestLoader.getLatestVersion({ sendEnvParam: (0, Settings_1.getEnvParams)().SendEnvParamOnManifestRequest }))];
                        case 1:
                            versionInfo = _a.sent();
                            if (this.canDisableNativeAutoUpgrade) {
                                this._isAutoUpgradeDisabled = versionInfo.isAutoUpgradeDisabled;
                            }
                            return [2, versionInfo];
                    }
                });
            });
        };
        VersionsManager.prototype.checkForNewVersion = function () {
            var _this = this;
            if (this.isUpgradeDisabled || this.isUpgradingVersion || !exports.VersionsManagerStorage.applicationInfo.isDefined()) {
                return;
            }
            this.getLatestVersionFromServer(false).then(function (versionInfo) {
                if (_this.getLastApplicationVersionToken() !== versionInfo.versionToken && !_this.isAutoUpgradeDisabled) {
                    _this.onNewVersionDetected(false, _this.isAutoUpgradeDisabled);
                }
            }, function (error) {
                Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Error checking for new version: " + error);
            });
        };
        VersionsManager.prototype.upgrade = function (appInfo, initDbPromise) {
            var _this = this;
            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "New application version detected, starting upgrade...");
            this.setUpgradeStatus(1);
            var resourcesUpgrade = this.supportsResourceCache().then(function (cache) {
                return cache
                    ? _this.upgradeResources(appInfo).catch(function (e) {
                        return _this.handleUpgradeError(e, 1, Promise.resolve(undefined));
                    })
                    : Promise.resolve();
            });
            var dataModelUpgrade = initDbPromise
                .then(function (db) { return _this.upgradeDataModel(db); })
                .catch(function (e) { return _this.handleUpgradeError(e, 2, resourcesUpgrade); });
            Promise.all([resourcesUpgrade, dataModelUpgrade])
                .then(function () {
                if (_this.upgradeStatus !== 1) {
                    return;
                }
                _this.commitNewVersion(appInfo, initDbPromise).then(function (success) {
                    if (success) {
                        _this.onVersionReady();
                    }
                });
            })
                .catch(function (e) { return _this.handleUpgradeError(e); });
        };
        VersionsManager.prototype.supportsResourceCache = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var hasSplashScreen, isSWAvailable, useCache;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!ApplicationInfo.isWebApplication()) return [3, 1];
                            hasSplashScreen = !!ApplicationInfo.getHomeModuleDefinition().splashScreenName;
                            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Web app - Resource pre-caching is ".concat(hasSplashScreen ? "enabled" : "disabled"));
                            return [2, hasSplashScreen];
                        case 1: return [4, this.serviceWorkerIsAvailable()];
                        case 2:
                            isSWAvailable = _a.sent();
                            useCache = NativeHelper.isRunningOnNative() || !isSWAvailable;
                            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Mobile app - Pre-caching resources with ".concat(useCache ? "Resource Cache" : "Service Worker"));
                            return [2, useCache];
                    }
                });
            });
        };
        VersionsManager.prototype.serviceWorkerIsAvailable = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var r, e_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            if (!("serviceWorker" in navigator)) {
                                return [2, false];
                            }
                            return [4, navigator.serviceWorker.getRegistrations()];
                        case 1:
                            r = _a.sent();
                            return [2, r !== null];
                        case 2:
                            e_1 = _a.sent();
                            return [2, false];
                        case 3: return [2];
                    }
                });
            });
        };
        VersionsManager.prototype.commitNewVersion = function (appInfo, initDbPromise) {
            var _this = this;
            return initDbPromise
                .then(function (db) { return _this.switchDataModel(db); })
                .then(function () { return _this.switchResourcesVersion(appInfo.manifest.versionToken); })
                .then(function () {
                var isFirstVersion = !_this.cachedAppInfo;
                _this.cachedAppInfo = appInfo;
                _this.setUpgradeStatus(isFirstVersion ? 0 : 2);
                return true;
            });
        };
        VersionsManager.prototype.upgradeResources = function (appInfo) {
            OSPerformance.start("VersionsManager upgradeResources");
            return Flow.tryFinally(function () { return ResourceCache_1.ResourceCache.start(appInfo.manifest); }, function () { return OSPerformance.end("VersionsManager upgradeResources"); });
        };
        VersionsManager.prototype.upgradeDataModel = function (db) {
            var _this = this;
            OSPerformance.start("VersionsManager upgradeDataModel");
            if ((0, IDatabase_1.instanceOfIDatabase)(db)) {
                Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Initializing data model on IndexedDB database.");
                return Flow.tryFinally(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var entityModules, dbService, _i, entityModules_1, entityModule;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4, this.getAllEntityModules()];
                            case 1:
                                entityModules = _a.sent();
                                dbService = Injector_1.default.resolve(KnownServices_1.ServiceNames.EntityService);
                                for (_i = 0, entityModules_1 = entityModules; _i < entityModules_1.length; _i++) {
                                    entityModule = entityModules_1[_i];
                                    dbService.registerInitializer(entityModule.getEntityInfos());
                                }
                                return [4, db.initialize()];
                            case 2:
                                _a.sent();
                                return [2];
                        }
                    });
                }); }, function () { return OSPerformance.end("VersionsManager upgradeDataModel"); });
            }
            else {
                Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Initializing data model on SQLite/WebSQL database.");
                return Flow.tryFinally(function () { return _this.doForEachClientEntitiesModule(db, function (runner, module) { return module.init(runner); }); }, function () { return OSPerformance.end("VersionsManager upgradeDataModel"); });
            }
        };
        VersionsManager.prototype.getAllEntityModules = function () {
            var requirePromises = [];
            var clientEntitiesModules = ApplicationInfo.getClientEntitiesModules();
            if (clientEntitiesModules) {
                var _loop_1 = function (entityModuleName) {
                    Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Fetching entity module '".concat(entityModuleName, "'."));
                    requirePromises.push(new Promise(function (resolve, reject) {
                        RequireManager.loadModule([entityModuleName], function (entityModule) { return resolve(entityModule); }, reject);
                    }));
                };
                for (var _i = 0, clientEntitiesModules_1 = clientEntitiesModules; _i < clientEntitiesModules_1.length; _i++) {
                    var entityModuleName = clientEntitiesModules_1[_i];
                    _loop_1(entityModuleName);
                }
            }
            return Promise.all(requirePromises);
        };
        VersionsManager.prototype.doForEachClientEntitiesModule = function (db, action) {
            if (db.isMock) {
                return Promise.resolve();
            }
            return this.getAllEntityModules().then(function (allEntityModules) {
                return db.executeTransaction(function (runner) {
                    return runner
                        .feed(null)
                        .andThenAll(function (runner) {
                        return allEntityModules.map(function (module) { return function (runner) {
                            return action(runner, module);
                        }; });
                    });
                });
            });
        };
        VersionsManager.prototype.switchResourcesVersion = function (versionToken) {
            ResourceCache_1.ResourceCache.switch(versionToken);
        };
        VersionsManager.prototype.switchDataModel = function (db) {
            if ((0, IDatabase_1.instanceOfIDatabase)(db)) {
                Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Finishing initialization of data model on IndexedDB database.");
                return db.initializerCleanup();
            }
            else {
                Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Finishing initialization of data model on SQLite/WebSQL database.");
                return this.doForEachClientEntitiesModule(db, function (runner, module) { return module.switch(runner); });
            }
        };
        VersionsManager.prototype.handleInitError = function (error) {
            var errorMessage = this.isUpgradeDisabled
                ? "Upgrade failed and rollback isn't possible at this time"
                : "Unable to load the data model";
            Logger.error(VERSIONS_MANAGER_MODULE_NAME, errorMessage, error);
            ErrorHandling.handleError(error);
        };
        VersionsManager.prototype.handleUpgradeError = function (error, reason, resourcesPromise) {
            if (reason === void 0) { reason = 0; }
            if (resourcesPromise === void 0) { resourcesPromise = Promise.resolve(undefined); }
            if (Exceptions.isInstanceOf(error, Exceptions.Exceptions.OpenDatabaseException)) {
                Logger.error(VERSIONS_MANAGER_MODULE_NAME, "Upgrade failed - unable to open the database.", error);
                ErrorHandling.handleError(error);
                return Promise.resolve(undefined);
            }
            if (!Navigation.hasPendingReload() && this.initialUpgradeStatus !== 3) {
                Logger.error(VERSIONS_MANAGER_MODULE_NAME, "Upgrade failed - rolling back to previous application version.", error);
                return this.rollBackApplicationVersion(reason, resourcesPromise);
            }
            else if (this.initialUpgradeStatus === 3) {
                ErrorHandling.handleError(error);
                return Promise.resolve(undefined);
            }
            else {
                Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Upgrade failed - ignoring error due to concurrent navigation.");
                if (this.upgradeStatus !== 3) {
                    this.setUpgradeStatus(0);
                }
                return Promise.resolve(undefined);
            }
        };
        Object.defineProperty(VersionsManager.prototype, "isUpgradingVersion", {
            get: function () {
                return this.upgradeStatus === 1;
            },
            enumerable: false,
            configurable: true
        });
        VersionsManager.prototype.setUpgradeStatus = function (status, failReason) {
            if (failReason === void 0) { failReason = 0; }
            this.upgradeStatus = status;
            Logger.trace(VERSIONS_MANAGER_MODULE_NAME, "Upgrade status changed to: " + status);
            if (status === 2) {
                return this.onUpgradeFinished(true);
            }
            else if (status === 3) {
                return this.onUpgradeFinished(false, failReason);
            }
        };
        VersionsManager.prototype.rollBackApplicationVersion = function (reason, resourcesPromise) {
            var _this = this;
            return this.loadCachedManifest()
                .then(function (_a) {
                var manifest = _a.manifest;
                _this.setUpgradeStatus(3, reason);
                if (reason === 1) {
                    return;
                }
                return resourcesPromise.then(function () { return ResourceCache_1.ResourceCache.start(manifest.manifest); });
            })
                .then(function () {
                Navigation.reloadApplication(false);
            })
                .catch(function (err) {
                ErrorHandling.handleError(err);
            });
        };
        Object.defineProperty(VersionsManager.prototype, "isUpgradeDisabled", {
            get: function () {
                return this.upgradeStatus === 3;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VersionsManager.prototype, "isAutoUpgradeDisabled", {
            get: function () {
                return this._isAutoUpgradeDisabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VersionsManager.prototype, "canDisableNativeAutoUpgrade", {
            get: function () {
                return (0, Settings_1.getEnvParams)().CanDisableAutoUpgrade && NativeHelper.isRunningOnNative() && this.isRunningCachedIndex();
            },
            enumerable: false,
            configurable: true
        });
        VersionsManager.prototype.isRunningCachedIndex = function () {
            var screenIndexVersion = OSManifestLoader.indexVersionToken;
            var cachedIndexVersion = this.getIndexVersion(this.cachedAppInfo);
            return !!cachedIndexVersion && screenIndexVersion === cachedIndexVersion;
        };
        VersionsManager.prototype.usingStaleIndex = function (appInfo) {
            if (Navigation.currentLocationHasTimestamp()) {
                return false;
            }
            var cachedIndexVersion = OSManifestLoader.indexVersionToken || this.getIndexVersion(this.cachedAppInfo);
            var mostRecentIndexVersion = this.getIndexVersion(appInfo);
            return cachedIndexVersion !== mostRecentIndexVersion;
        };
        VersionsManager.prototype.getIndexVersion = function (appInfo) {
            if (!appInfo) {
                return "";
            }
            var versionToken = getResourceVersionTokenFromManifest(INDEX_PAGE_NAME, ApplicationInfo.getHomeModuleName(), appInfo.manifest.urlVersions);
            if (versionToken) {
                return versionToken.substring(1);
            }
            return "";
        };
        VersionsManager.prototype.loadCachedManifest = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var prebundleManifestPromise, cacheManifestPromise, prebundledManifest, cachedManifest, cachedManifestError, error_1, error_2, error_3, manifest;
                var _a;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.canDisableNativeAutoUpgrade) return [3, 11];
                            prebundleManifestPromise = this.innerLoadPrebundledManifest();
                            cacheManifestPromise = this.innerLoadCachedManifest();
                            prebundledManifest = null;
                            cachedManifest = null;
                            cachedManifestError = null;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4, prebundleManifestPromise];
                        case 2:
                            prebundledManifest = _b.sent();
                            return [3, 4];
                        case 3:
                            error_1 = _b.sent();
                            Logger.trace(this, "Error loading prebundled manifest: ".concat((_a = error_1 === null || error_1 === void 0 ? void 0 : error_1.message) !== null && _a !== void 0 ? _a : error_1));
                            return [3, 4];
                        case 4:
                            _b.trys.push([4, 6, , 7]);
                            return [4, cacheManifestPromise];
                        case 5:
                            cachedManifest = _b.sent();
                            return [3, 7];
                        case 6:
                            error_2 = _b.sent();
                            cachedManifestError = error_2;
                            return [3, 7];
                        case 7:
                            _b.trys.push([7, 9, , 10]);
                            return [4, this.innerLoadCachedManifest()];
                        case 8:
                            cachedManifest = _b.sent();
                            return [3, 10];
                        case 9:
                            error_3 = _b.sent();
                            cachedManifestError = error_3;
                            return [3, 10];
                        case 10:
                            if (!prebundledManifest || !prebundledManifest.manifest.versionSequence) {
                                if (cachedManifest) {
                                    return [2, { manifest: cachedManifest, isFromPrebundle: false }];
                                }
                                else {
                                    throw cachedManifestError;
                                }
                            }
                            if (!cachedManifest) {
                                return [2, { manifest: prebundledManifest, isFromPrebundle: true }];
                            }
                            return [2, cachedManifest.manifest.versionSequence >= prebundledManifest.manifest.versionSequence
                                    ? { manifest: cachedManifest, isFromPrebundle: false }
                                    : { manifest: prebundledManifest, isFromPrebundle: true }];
                        case 11: return [4, this.innerLoadCachedManifest()];
                        case 12:
                            manifest = _b.sent();
                            return [2, { manifest: manifest, isFromPrebundle: false }];
                    }
                });
            });
        };
        VersionsManager.prototype.innerLoadCachedManifest = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var appInfo;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, this.ensureCachedManifest()];
                        case 1:
                            _a.sent();
                            if (!this.cachedAppInfo) return [3, 2];
                            return [2, this.cachedAppInfo];
                        case 2: return [4, OSManifestLoader.getCachedManifest({
                                sendEnvParam: (0, Settings_1.getEnvParams)().SendEnvParamOnManifestRequest,
                            })];
                        case 3:
                            appInfo = (_a.sent());
                            VersionsManager.validateApplicationInfo(appInfo);
                            return [2, appInfo];
                    }
                });
            });
        };
        VersionsManager.prototype.innerLoadPrebundledManifest = function () {
            return NativePrebundle.getManifest();
        };
        VersionsManager.prototype.ensureCachedManifest = function () {
            if (NativeHelper.isRunningOnNative() || this.cachedAppInfo) {
                return Promise.resolve(undefined);
            }
            else {
                this.setUpgradeStatus(0);
                return Promise.reject(new Error("No cached manifest found. It's not possible to rollback to a previous version."));
            }
        };
        VersionsManager.prototype.getLatestManifestFromServer = function (versionToken) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var appInfo;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, OSManifestLoader.getLatestManifest(versionToken, {
                                sendEnvParam: (0, Settings_1.getEnvParams)().SendEnvParamOnManifestRequest,
                            })];
                        case 1:
                            appInfo = _a.sent();
                            VersionsManager.validateApplicationInfo(appInfo);
                            return [2, { manifest: appInfo, isFromPrebundle: false }];
                    }
                });
            });
        };
        VersionsManager.prototype.fetchApplicationManifest = function (fromPrefetch) {
            var _this = this;
            if (fromPrefetch === void 0) { fromPrefetch = true; }
            OSPerformance.start("VersionsManager fetchApplicationManifest");
            if (this.isUpgradeDisabled) {
                return this.loadCachedManifest();
            }
            else {
                return this.getLatestVersionFromServer(fromPrefetch)
                    .then(function (versionInfo) {
                    return _this.isNewVersion(versionInfo, false)
                        ? _this.getLatestManifestFromServer(versionInfo.versionToken)
                        : _this.loadCachedManifest();
                })
                    .catch(function () { return _this.loadCachedManifest(); })
                    .then(function (appInfo) {
                    OSPerformance.end("VersionsManager fetchApplicationManifest");
                    return appInfo;
                });
            }
        };
        VersionsManager.prototype.enableBackgroundCheckForNewVersions = function () {
            var _this = this;
            var isNavigating = false;
            EventDispatcher_1.EventDispatcher.listen(EventDispatcher_1.EventType.NavigationStart, function () { return (isNavigating = true); });
            EventDispatcher_1.EventDispatcher.listen(EventDispatcher_1.EventType.TransitionEnd, function () {
                isNavigating = false;
                setTimeout(function () {
                    if (!isNavigating) {
                        _this.checkForNewVersion();
                    }
                }, 1000);
            });
        };
        return VersionsManager;
    }());
    exports.VersionsManager = VersionsManager;
    var Instance = new VersionsManager();
    exports.default = Instance;
});
//# sourceMappingURL=VersionsManager.js.map;
define('OutSystems/ClientRuntime/Application',["require", "exports", "module", "tslib", "./ApplicationInfo", "./ClientInfo", "./Communication", "./CookiesManager", "./Database", "./DataTypes", "./Entities", "./ErrorHandling", "./Exceptions", "./FeedbackMessageService", "./Flow", "./Injector", "./Injector/KnownServices", "./Logger", "./modules/ClientVariables/LocalStorageClientVariablesService", "./modules/Database/IDatabase", "./modules/Database/IndexedDB/IndexedDBDatabase", "./modules/Database/IndexedDB/IndexedDBEntityService", "./modules/Database/WebSQL/WebSQLDatabase", "./modules/Database/WebSQL/WebSQLEntityService", "./modules/LocaleService/LocaleService", "./modules/LogTable/LogDatabaseStorage", "./modules/MappingWithDefault/MappingWithDefaultService", "./modules/PersistentKeyValue/PersistentKeyValueStorage", "./NativeApplicationInfo", "./NativeHelper", "./NativeHttp", "./NativeLogger", "./Navigation", "./Performance", "./RequireManager", "./RolesInfo", "./ScreenStateCache", "./Settings", "./StorageProvider", "./Transitions", "./VersionsManager"], function (require, exports, module, tslib_1, ApplicationInfo, ClientInfo_1, Communication, CookiesManager, Database_1, DataTypes_1, Entities_1, ErrorHandling, Exceptions, FeedbackMessageService, Flow, Injector_1, KnownServices_1, Logger, LocalStorageClientVariablesService_1, IDatabase_1, IndexedDBDatabase_1, IndexedDBEntityService_1, WebSQLDatabase_1, WebSQLEntityService_1, LocaleService_1, LogDatabaseStorage_1, MappingWithDefaultService_1, PersistentKeyValueStorage_1, NativeApplicationInfo_1, NativeHelper, NativeHttp, NativeLogger, Navigation, OSPerformance, RequireManager, RolesInfo, ScreenStateCache_1, Settings_1, StorageProvider_1, Transitions_1, VersionsManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Application = exports.ApplicationStorage = void 0;
    var APPLICATION_MODULE_NAME = "Application";
    var UPGRADE_REQUIRED_CSS_CLASS = "upgrade-required";
    var UPGRADE_SUCCESS_CSS_CLASS = "upgrade-success";
    var UPGRADE_ERROR_CSS_CLASS = "upgrade-error";
    exports.ApplicationStorage = {
        hasRenderedSplashInSession: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Session, "HasRenderedSplashInSession", false),
        pendingUpgradeFeedback: new StorageProvider_1.StorageObject(StorageProvider_1.StorageType.Session, "PendingUpgradeFeedback"),
    };
    var Application = (function () {
        function Application() {
            this.showingSplashScreen = false;
            this.logDatabaseStorage = null;
        }
        Application.prototype.setApplicationDefinition = function (applicationDefinition) {
            ApplicationInfo.setApplicationDefinition(applicationDefinition);
            var databaseName = NativeHelper.isRunningOnNative()
                ?
                    applicationDefinition.environmentKey + "_" + applicationDefinition.applicationKey
                :
                    applicationDefinition.applicationName;
            ApplicationInfo.setDatabaseName(databaseName);
        };
        Application.prototype.initializeLogger = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var networkStatusChecker, postLogsFunction, nativeShellVersion, e_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            networkStatusChecker = Communication.NetworkStatus;
                            postLogsFunction = Communication.postLog;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            return [4, NativeHelper.ensureNativeReady()];
                        case 2:
                            _a.sent();
                            if (!NativeLogger.NetworkStatus.isOnline()) return [3, 4];
                            return [4, (0, NativeApplicationInfo_1.getNativeShellVersion)()];
                        case 3:
                            nativeShellVersion = _a.sent();
                            if ((0, NativeApplicationInfo_1.isVersionGreaterOrEqualTo)(nativeShellVersion, "2.7.3")) {
                                networkStatusChecker = NativeLogger.NetworkStatus;
                                postLogsFunction = NativeLogger.postLog;
                            }
                            _a.label = 4;
                        case 4: return [3, 6];
                        case 5:
                            e_1 = _a.sent();
                            return [3, 6];
                        case 6:
                            Logger.setNetworkStatusChecker(networkStatusChecker);
                            Logger.setPostLogsFunction(postLogsFunction);
                            Logger.enableFallbackStorage();
                            return [2];
                    }
                });
            });
        };
        Application.prototype.initializeCookiesManager = function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var isNativeHttpPluginAvailable, nativeHttp;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4, NativeHttp.isNativeHttpPluginAvailable()];
                        case 1:
                            isNativeHttpPluginAvailable = _a.sent();
                            if (!isNativeHttpPluginAvailable) return [3, 3];
                            return [4, NativeHttp.getNativeHttpPlugin()];
                        case 2:
                            nativeHttp = _a.sent();
                            CookiesManager.initialize(nativeHttp);
                            _a.label = 3;
                        case 3: return [2];
                    }
                });
            });
        };
        Application.prototype.initialize = function (applicationDefinition, initType, dateTimeFormat, numberFormat, executeRequiredScripts) {
            var _this = this;
            if (initType === void 0) { initType = 0; }
            OSPerformance.start("Application initialize");
            var logInitialization;
            var cookiesInitialization;
            return Flow.tryCatchFinally(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var userRolesInitialization, initDb, versionManagerDone, onVersionManagerDone, waitForVersionsManagerDone, waitForApplicationReadyEvent, versionManagerEventHandlers, success;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            Logger.trace(APPLICATION_MODULE_NAME, "Initializing Application");
                            cookiesInitialization = this.initializeCookiesManager();
                            logInitialization = this.initializeLogger();
                            this.setApplicationDefinition(applicationDefinition);
                            (0, StorageProvider_1.setDefaultStorageNamespace)(ApplicationInfo.getHomeModuleName());
                            Communication.initialize(ApplicationInfo.isDebugEnabled(), ApplicationInfo.getUserCookieName(), function (currentViewHasChanged, isAutoUpgradeDisabled) {
                                return _this.onNewVersionDetected(currentViewHasChanged, isAutoUpgradeDisabled);
                            });
                            RequireManager.setErrorHandler(function (error) {
                                if (VersionsManager_1.default.isUpgradingVersion && !Exceptions.isSystem(error)) {
                                    Logger.trace(APPLICATION_MODULE_NAME, "RequireJS error during upgrade, treating as an upgrade error.");
                                    VersionsManager_1.default.handleUpgradeError(error, 1);
                                    return;
                                }
                                _this.handleError(error);
                            });
                            ScreenStateCache_1.ScreenStateCache.clear();
                            (0, Transitions_1.setDefaultTransition)(ApplicationInfo.getDefaultTransition());
                            if (dateTimeFormat) {
                                DataTypes_1.Constants.FORMAT.dateTimeFormat = dateTimeFormat;
                            }
                            if (numberFormat) {
                                DataTypes_1.Constants.FORMAT.numberFormat = numberFormat;
                            }
                            return [4, cookiesInitialization];
                        case 1:
                            _a.sent();
                            return [4, logInitialization];
                        case 2:
                            _a.sent();
                            Injector_1.default.register(KnownServices_1.ServiceNames.ClientVariablesService, function () { return new LocalStorageClientVariablesService_1.default(applicationDefinition.userProviderName); });
                            if ((0, Settings_1.getEnvParams)().IndexedDBOffline && !NativeHelper.isRunningOnNative()) {
                                Injector_1.default.register(KnownServices_1.ServiceNames.EntityService, function () { return new IndexedDBEntityService_1.default(); });
                            }
                            else if ((0, Settings_1.getEnvParams)().UseNewWebSQLImpl && NativeHelper.isRunningOnNative()) {
                                Injector_1.default.register(KnownServices_1.ServiceNames.EntityService, function () { return new WebSQLEntityService_1.default(); });
                            }
                            Injector_1.default.register(KnownServices_1.ServiceNames.TranslationsService, function () { return new MappingWithDefaultService_1.default(); });
                            Injector_1.default.register(KnownServices_1.ServiceNames.LocaleService, function () { return new LocaleService_1.default(ApplicationInfo.getHomeModuleName()); });
                            if (initType === 1) {
                                return [2, true];
                            }
                            userRolesInitialization = RolesInfo.initializeRolesFromServer();
                            initDb = this.initializeDatabase();
                            versionManagerDone = false;
                            onVersionManagerDone = function () {
                                versionManagerDone = true;
                            };
                            waitForVersionsManagerDone = new Promise(function (resolve) {
                                if (versionManagerDone) {
                                    resolve();
                                }
                                else {
                                    var originalOnVersionManagerDone_1 = onVersionManagerDone;
                                    onVersionManagerDone = function () {
                                        originalOnVersionManagerDone_1();
                                        resolve();
                                    };
                                }
                            });
                            waitForApplicationReadyEvent = waitForVersionsManagerDone.then(function () {
                                return _this.triggerApplicationReadyEvent();
                            });
                            versionManagerEventHandlers = {
                                onVersionReady: function () {
                                    return initDb
                                        .then(function (db) { return _this.onDatabaseReady(db); })
                                        .then(function () { return waitForVersionsManagerDone; })
                                        .then(function () { return waitForApplicationReadyEvent; })
                                        .then(function () { return _this.onApplicationReady(); });
                                },
                                onUpgradeFinished: function (success, reason) { return _this.onUpgradeFinished(success, reason); },
                                onNewVersionDetected: function (currentViewHasChanged, isAutoUpgradeDisabled) {
                                    return _this.onNewVersionDetected(currentViewHasChanged, isAutoUpgradeDisabled);
                                },
                                onAppInfoReady: function (appInfo) { return _this.onAppInfoReady(appInfo); },
                            };
                            return [4, VersionsManager_1.default.initialize(initDb, versionManagerEventHandlers)];
                        case 3:
                            success = _a.sent();
                            if (!success) return [3, 7];
                            return [4, userRolesInitialization];
                        case 4:
                            _a.sent();
                            if (!executeRequiredScripts) return [3, 6];
                            return [4, executeRequiredScripts()];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6:
                            onVersionManagerDone();
                            _a.label = 7;
                        case 7: return [2, success];
                    }
                });
            }); }, function (e) {
                return Flow.tryFinally(function () {
                    return logInitialization;
                }, function () {
                    if (initType === 0) {
                        _this.handleError(e);
                    }
                    else {
                        throw e;
                    }
                });
            }, function () { return OSPerformance.end("Application initialize"); });
        };
        Application.prototype.triggerApplicationReadyEvent = function () {
            var _this = this;
            var homeModuleController = ApplicationInfo.getHomeModuleControllerName();
            if (!!homeModuleController) {
                Logger.trace(APPLICATION_MODULE_NAME, "Calling application ready event handler for " + ApplicationInfo.getHomeModuleName());
                return new Promise(function (resolve, reject) {
                    RequireManager.loadModule([homeModuleController], resolve, reject);
                })
                    .then(function (moduleController) {
                    return moduleController.default.fireApplicationReady();
                })
                    .catch(function (error) {
                    _this.handleError(error);
                });
            }
        };
        Application.prototype.initializeDatabase = function () {
            var _this = this;
            Logger.trace(APPLICATION_MODULE_NAME, "Initializing application database.");
            var initDb;
            var persistentKVStorage;
            var isWebApp = ApplicationInfo.isWebApplication();
            var isRunningOnNative = NativeHelper.isRunningOnNative();
            var useIndexedDB = (0, Settings_1.getEnvParams)().IndexedDBOffline;
            var useNewWebSQL = (0, Settings_1.getEnvParams)().UseNewWebSQLImpl;
            if (isWebApp || ApplicationInfo.getHomeModuleKey() === "28f21196-030a-4be2-8241-5a4888fb3ca5") {
                Logger.trace(APPLICATION_MODULE_NAME, "Initializing database mock for NativeAppBuilder.");
                initDb = Database_1.SqlDbProvider.mockDb(ApplicationInfo.getDatabaseName());
            }
            else if ((!isRunningOnNative && !useIndexedDB) || (isRunningOnNative && !useNewWebSQL)) {
                Logger.trace(APPLICATION_MODULE_NAME, "Initializing SQLite/WebSQL database service.");
                initDb = Database_1.SqlDbProvider.openDb(ApplicationInfo.getDatabaseName()).then(function (db) {
                    return db.testConnection().then(function () {
                        return db.executeTransaction(function (runner) {
                            return Entities_1.LogTable.initialize(runner, db)
                                .andThen(function (runner) {
                                return Entities_1.PersistentKeyValue.initialize(runner, db).andThen(function () {
                                    persistentKVStorage = Entities_1.PersistentKeyValue.storage;
                                });
                            })
                                .andThen(function (runner) { return Entities_1.webSQLStorageInstance.initMetamodel(runner); })
                                .andThen(function () { return db; });
                        });
                    });
                });
            }
            else {
                var newImplInitDb = void 0;
                if (isRunningOnNative) {
                    newImplInitDb = WebSQLDatabase_1.default.open(ApplicationInfo.getDatabaseName());
                }
                else {
                    ApplicationInfo.setDatabaseName("".concat(ApplicationInfo.getEnvironmentKey(), "-").concat(ApplicationInfo.getUserProviderName()));
                    newImplInitDb = IndexedDBDatabase_1.default.open(ApplicationInfo.getDatabaseName(), function () {
                        return _this.onNewVersionDetected(true);
                    });
                }
                initDb = newImplInitDb.then(function (db) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var entityService;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                Logger.trace(APPLICATION_MODULE_NAME, "Initializing log database storage");
                                this.logDatabaseStorage = new LogDatabaseStorage_1.default(db);
                                return [4, this.logDatabaseStorage.initialize()];
                            case 1:
                                _a.sent();
                                Logger.trace(APPLICATION_MODULE_NAME, "Initializing persistent key value storage");
                                persistentKVStorage = new PersistentKeyValueStorage_1.default(db);
                                Logger.trace(APPLICATION_MODULE_NAME, "Initializing entity service");
                                entityService = Injector_1.default.resolve(KnownServices_1.ServiceNames.EntityService);
                                entityService.setDatabase(db);
                                return [2, db];
                        }
                    });
                }); });
            }
            return initDb.then(function (db) {
                return RolesInfo.initialize(persistentKVStorage).then(function () {
                    Logger.trace(APPLICATION_MODULE_NAME, "Application database initialized successfuly.");
                    return db;
                });
            });
        };
        Application.prototype.onDatabaseReady = function (db) {
            if ((0, IDatabase_1.instanceOfIDatabase)(db)) {
                var dbService = Injector_1.default.resolve(KnownServices_1.ServiceNames.EntityService);
                dbService.setReady();
                if (this.logDatabaseStorage) {
                    Logger.setOfflineStorage(this.logDatabaseStorage);
                }
            }
            else {
                Entities_1.webSQLStorageInstance.initDb(db);
            }
            Logger.trace(APPLICATION_MODULE_NAME, "Database initialized successfully");
        };
        Application.prototype.onNewVersionDetected = function (currentViewHasChanged, isAutoUpgradeDisabled) {
            var _this = this;
            isAutoUpgradeDisabled =
                (isAutoUpgradeDisabled !== null && isAutoUpgradeDisabled !== void 0 ? isAutoUpgradeDisabled : VersionsManager_1.default.isAutoUpgradeDisabled) && NativeHelper.isRunningOnNative();
            Logger.trace(APPLICATION_MODULE_NAME, "New version detected, currentViewHasChanged = " + currentViewHasChanged);
            var useTimestamp = true;
            var appInfoCallback = function (newIndex) {
                useTimestamp = newIndex;
            };
            if (currentViewHasChanged) {
                this.disableDocument();
                var onClick = function () {
                    return Navigation.changeWindowLocation(Navigation.buildApplicationRelativeUrl(), useTimestamp, true);
                };
                var getMessage = function (provider) {
                    return provider.getApplicationUpgradeRequiredMessage(_this.canLoseDataInUpgrade());
                };
                this.showFeedbackMessage(getMessage, 2, UPGRADE_REQUIRED_CSS_CLASS, isAutoUpgradeDisabled ? null : onClick).then(function () { return FeedbackMessageService.setEnabled(false); });
            }
            if (isAutoUpgradeDisabled) {
                return Promise.resolve();
            }
            else {
                return VersionsManager_1.default.cacheResourcesInBackground(appInfoCallback);
            }
        };
        Application.prototype.onAppInfoReady = function (appInfo) {
            try {
                OSPerformance.start("Application onAppInfoReady");
                this.updateHasTracingEnabled(appInfo);
                this.updateApplicationDefaultTimeout(appInfo);
                this.updateApplicationInfo(appInfo);
                this.updateClientInfo();
                this.updateLoggerDetails();
            }
            finally {
                OSPerformance.end("Application onAppInfoReady");
            }
        };
        Application.prototype.updateHasTracingEnabled = function (appInfo) {
            Logger.setTracingEnabled(appInfo.data.hasTracingEnabled);
        };
        Application.prototype.updateApplicationDefaultTimeout = function (appInfo) {
            ApplicationInfo.setApplicationDefaultTimeout(appInfo.data.applicationDefaultTimeout);
        };
        Application.prototype.updateApplicationInfo = function (appInfo) {
            ApplicationInfo.setModules(appInfo.data.modules);
            ApplicationInfo.setClientEntitiesModules(appInfo.data.entityModuleNames);
        };
        Application.prototype.updateClientInfo = function () {
            NativeHelper.ensureNativeReady()
                .then(function () { return (0, ClientInfo_1.setClientInfo)(); })
                .catch(function (e) { return Logger.trace("", "Client info update failed: " + e); });
        };
        Application.prototype.updateLoggerDetails = function () {
            var isNative = NativeHelper.isRunningOnNative();
            Logger.setDeviceDetails(isNative);
        };
        Application.prototype.shouldRenderSplashScreen = function () {
            var homeModule = ApplicationInfo.getHomeModuleDefinition();
            return (homeModule.splashScreenName &&
                homeModule.splashScreenName.length > 0 &&
                !exports.ApplicationStorage.hasRenderedSplashInSession.get());
        };
        Application.prototype.disableDocument = function () {
            var backgroundBackdrop = document.createElement("div");
            backgroundBackdrop.classList.add("background-backdrop");
            document.body.classList.add("disable-scroll");
            document.body.appendChild(backgroundBackdrop);
        };
        Application.prototype.canLoseDataInUpgrade = function () {
            return document.getElementsByTagName("form").length > 0;
        };
        Application.prototype.onUpgradeFinished = function (success, failReason) {
            Logger.trace(APPLICATION_MODULE_NAME, "Upgrade " + (success ? "finished successfully" : "failed with reason: " + failReason));
            var feedback = { success: success, failReason: failReason };
            if (success && !this.isShowingSplashScreen) {
                this.showUpgradeFeedback(feedback);
            }
            else {
                exports.ApplicationStorage.pendingUpgradeFeedback.set(feedback);
            }
        };
        Application.prototype.waitForAppReady = function () {
            var _this = this;
            if (this.isReady) {
                return Promise.resolve(undefined);
            }
            if (!this.appReadyPromise) {
                this.appReadyPromise = new Promise(function (resolve) {
                    _this.onReady = function () { return resolve(); };
                });
            }
            return this.appReadyPromise;
        };
        Application.prototype.onApplicationReady = function () {
            Logger.trace(APPLICATION_MODULE_NAME, "Application ready");
            OSPerformance.end("Application ready");
            Logger.flushLogsToServerIfOnline();
            this.isReady = true;
            if (this.onReady) {
                this.onReady();
                this.onReady = null;
            }
        };
        Application.prototype.onBeforeNavigation = function (nextLocation, isBackNavigation) {
            return Navigation.onBeforeNavigate(nextLocation, isBackNavigation);
        };
        Application.prototype.onAfterNavigation = function () {
            if (this.isShowingSplashScreen || Navigation.hasPendingReload()) {
                return;
            }
            Logger.trace(APPLICATION_MODULE_NAME, "Navigated to: " + Navigation.getCurrentLocation().href);
            var pendingFeedback = exports.ApplicationStorage.pendingUpgradeFeedback.get();
            if (!pendingFeedback) {
                return;
            }
            this.showUpgradeFeedback(pendingFeedback);
            exports.ApplicationStorage.pendingUpgradeFeedback.remove();
        };
        Application.prototype.showUpgradeFeedback = function (feedback) {
            var getMessage;
            var feedbackType;
            var extraCssClass;
            if (feedback.success) {
                feedbackType = 0;
                getMessage = function (provider) { return provider.getApplicationUpgradeCompleteMessage(); };
                extraCssClass = UPGRADE_SUCCESS_CSS_CLASS;
            }
            else {
                feedbackType = 2;
                extraCssClass = UPGRADE_ERROR_CSS_CLASS;
                switch (feedback.failReason) {
                    case 1:
                        getMessage = function (provider) { return provider.getApplicationUpgradeFailedOnResourcesMessage(); };
                        break;
                    case 2:
                        getMessage = function (provider) { return provider.getApplicationUpgradeFailedOnDataModelMessage(); };
                        break;
                    default:
                        getMessage = function (provider) { return provider.getApplicationUpgradeFailedUnknownMessage(); };
                        break;
                }
            }
            this.showFeedbackMessage(getMessage, feedbackType, extraCssClass);
        };
        Application.prototype.showFeedbackMessage = function (getMessage, type, extraCssClasses, onClick) {
            if (extraCssClasses === void 0) { extraCssClasses = ""; }
            return new Promise(function (resolve) {
                var languageResourcesModuleName = ApplicationInfo.getHomeModuleLanguageResourcesName();
                RequireManager.loadModule([languageResourcesModuleName], function (messageProvider) {
                    var message = getMessage(messageProvider);
                    if (message) {
                        FeedbackMessageService.showFeedbackMessage(message, type, true, extraCssClasses, true, onClick);
                    }
                    resolve();
                });
            });
        };
        Object.defineProperty(Application.prototype, "isShowingSplashScreen", {
            get: function () {
                return this.showingSplashScreen;
            },
            set: function (showing) {
                if (showing) {
                    exports.ApplicationStorage.hasRenderedSplashInSession.set(true);
                }
                this.showingSplashScreen = showing;
            },
            enumerable: false,
            configurable: true
        });
        Application.prototype.handleError = function (error, callContext) {
            ErrorHandling.handleError(error, callContext);
        };
        Application.prototype.exit = function () {
            return NativeHelper.isRunningOnNative() ? NativeHelper.exitApp() : true;
        };
        Application.prototype.registerDefaultErrorHandler = function (globalExceptionHandler) {
            return Injector_1.default.register(KnownServices_1.ServiceNames.GlobalExceptionHandler, globalExceptionHandler);
        };
        return Application;
    }());
    exports.Application = Application;
    var Instance = new Application();
    exports.default = Instance;
    Navigation.VersionedURL.setUrlVersionProvider(VersionsManager_1.default.getVersionedUrl.bind(VersionsManager_1.default));
    Instance.default = Instance;
    Instance.ApplicationStorage = exports.ApplicationStorage;
    module.exports = Instance;
});
//# sourceMappingURL=Application.js.map;
define('OutSystems/ClientRuntime/RolesService',["require", "exports", "./RolesInfo"], function (require, exports, RolesInfo_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUserId = exports.checkRole = void 0;
    function checkRole(roleKey) {
        if (!RolesInfo_1.RolesInfoStorage.rolesInfo.isDefined()) {
            return false;
        }
        var rolesInfo = RolesInfo_1.RolesInfoStorage.rolesInfo.get();
        return rolesInfo.indexOf(roleKey) >= 0;
    }
    exports.checkRole = checkRole;
    exports.getUserId = RolesInfo_1.getUserId;
});
//# sourceMappingURL=RolesService.js.map;
define('OutSystems/ClientRuntime/Public',["require", "exports", "./Application", "./ApplicationInfo", "./BuiltinFunctions", "./Controller", "./FeedbackMessageService", "./Injector", "./Injector/KnownServices", "./Logger", "./NativeHelper", "./Navigation", "./ResourceCache", "./RolesService", "./Transitions", "./VersionsManager"], function (require, exports, Application_1, ApplicationInfo, ImportedBuiltinFunctions, Controller_1, FeedbackMessageService, Injector, KnownServices_1, LoggerModule, NativeHelper_1, NavigationModule, ResourceCache_1, RolesService, Transitions, VersionsManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Branding = exports.ApplicationLoad = exports.ApplicationContext = exports.View = exports.Logger = exports.Navigation = exports.ApplicationLifecycle = exports.Device = exports.Validation = exports.FeedbackMessage = exports.FeedbackMessageType = exports.Security = exports.BuiltinFunctions = void 0;
    function emitDeprecatedWarning(oldUsage, newUsage) {
        LoggerModule.log("Public", "'".concat(oldUsage, "' is deprecated and will be removed on the next version. Consider using '").concat(newUsage, "' instead."));
    }
    function getCurrentModelContext() {
        return Controller_1.BaseViewController.activeScreen
            ? Controller_1.BaseViewController.activeScreen.modelContext
            : { viewName: "", componentName: "", navigatedFromHistory: false, viewWasRestoredFromCache: false };
    }
    exports.BuiltinFunctions = ImportedBuiltinFunctions;
    var Security;
    (function (Security) {
        function checkIfCurrentUserHasRole(roleKey) {
            return RolesService.checkRole(roleKey);
        }
        Security.checkIfCurrentUserHasRole = checkIfCurrentUserHasRole;
    })(Security || (exports.Security = Security = {}));
    var FeedbackMessageType;
    (function (FeedbackMessageType) {
        FeedbackMessageType[FeedbackMessageType["Info"] = 0] = "Info";
        FeedbackMessageType[FeedbackMessageType["Success"] = 1] = "Success";
        FeedbackMessageType[FeedbackMessageType["Warning"] = 2] = "Warning";
        FeedbackMessageType[FeedbackMessageType["Error"] = 3] = "Error";
    })(FeedbackMessageType || (exports.FeedbackMessageType = FeedbackMessageType = {}));
    var FeedbackMessage;
    (function (FeedbackMessage) {
        function convertFeedbackMessageTypeToInternalEnum(type) {
            switch (type) {
                case FeedbackMessageType.Info:
                    return 0;
                case FeedbackMessageType.Success:
                    return 1;
                case FeedbackMessageType.Warning:
                    return 2;
                case FeedbackMessageType.Error:
                    return 3;
                default:
                    throw new Error("Don't know how to convert " + type);
            }
        }
        function showFeedbackMessage(message, messageType, encodeHTML, extraCssClasses, closeOnClick, onClick) {
            if (encodeHTML === void 0) { encodeHTML = true; }
            if (closeOnClick === void 0) { closeOnClick = true; }
            return FeedbackMessageService.showFeedbackMessage(message, convertFeedbackMessageTypeToInternalEnum(messageType), encodeHTML, extraCssClasses, closeOnClick, onClick);
        }
        FeedbackMessage.showFeedbackMessage = showFeedbackMessage;
        function closeFeedbackMessage() {
            return FeedbackMessageService.closeFeedbackMessage();
        }
        FeedbackMessage.closeFeedbackMessage = closeFeedbackMessage;
    })(FeedbackMessage || (exports.FeedbackMessage = FeedbackMessage = {}));
    var Validation = (function () {
        function Validation(_model) {
            this._model = _model;
        }
        Validation.prototype.setWidgetAsInvalid = function (widgetId, validationMessage) {
            var validationRecord = this._model.widgets.get(widgetId);
            validationRecord.validAttr = false;
            validationRecord.validationMessageAttr = validationMessage;
        };
        Validation.prototype.setWidgetAsValid = function (widgetId) {
            var validationRecord = this._model.widgets.get(widgetId);
            validationRecord.validAttr = true;
            validationRecord.validationMessageAttr = "";
        };
        Validation.prototype.isWidgetValid = function (widgetId) {
            var validationRecord = this._model.widgets.get(widgetId);
            return validationRecord.validAttr === true;
        };
        return Validation;
    }());
    exports.Validation = Validation;
    var Device;
    (function (Device) {
        function whenReady() {
            return NativeHelper_1.whenDeviceReady;
        }
        Device.whenReady = whenReady;
    })(Device || (exports.Device = Device = {}));
    var ApplicationLifecycle;
    (function (ApplicationLifecycle) {
        function isUpgradingVersion() {
            return VersionsManager_1.default.isUpgradingVersion;
        }
        ApplicationLifecycle.isUpgradingVersion = isUpgradingVersion;
        function listen(eventHandlers) {
            LoggerModule.trace("ApplicationLifecycle", "Registering listeners for the application load process.");
            if (!eventHandlers) {
                return;
            }
            if (eventHandlers.onLoadComplete) {
                Application_1.default.waitForAppReady().then(function () { return eventHandlers.onLoadComplete(); });
            }
            if (eventHandlers.onUpgradeProgress) {
                ResourceCache_1.ResourceCache.listen(null, null, function (loaded, total) { return eventHandlers.onUpgradeProgress(loaded, total); });
            }
        }
        ApplicationLifecycle.listen = listen;
    })(ApplicationLifecycle || (exports.ApplicationLifecycle = ApplicationLifecycle = {}));
    var Navigation = (function () {
        function Navigation(_context) {
            this._context = _context;
        }
        Navigation.prototype.navigateTo = function (url, transition, replace) {
            NavigationModule.navigateTo(url, this.getTransitionObject(transition, Transitions.Default), this._context, false, replace);
        };
        Navigation.prototype.navigateBack = function (transition) {
            NavigationModule.navigateBack(this.getTransitionObject(transition), this._context, false);
        };
        Navigation.prototype.navigateBackNumPages = function (numPages, transition) {
            NavigationModule.navigateBackNumPages(numPages, this.getTransitionObject(transition), this._context, false);
        };
        Navigation.prototype.navigateForward = function (transition) {
            NavigationModule.navigateForward(this.getTransitionObject(transition), this._context, false);
        };
        Navigation.prototype.navigateForwardNumPages = function (numPages, transition) {
            NavigationModule.navigateForwardNumPages(numPages, this.getTransitionObject(transition), this._context, false);
        };
        Navigation.prototype.navigatedFromHistory = function () {
            return getCurrentModelContext().navigatedFromHistory;
        };
        Navigation.prototype.registerBackNavigationHandler = function (handlerCallback) {
            return NavigationModule.registerBackNavigationHandler(handlerCallback);
        };
        Navigation.prototype.unregisterBackNavigationHandler = function (id) {
            NavigationModule.unregisterBackNavigationHandler(id);
        };
        Navigation.prototype.getTransitionObject = function (transitionType, defaultTransition) {
            if (defaultTransition === void 0) { defaultTransition = null; }
            return Transitions.createTransition(transitionType, defaultTransition);
        };
        return Navigation;
    }());
    exports.Navigation = Navigation;
    var Logger;
    (function (Logger) {
        function log(module, message) {
            LoggerModule.log(module, message);
        }
        Logger.log = log;
        function error(module, messageOrError, error) {
            LoggerModule.error(module, messageOrError, error);
        }
        Logger.error = error;
    })(Logger || (exports.Logger = Logger = {}));
    var View = (function () {
        function View(_model) {
            this._model = _model;
        }
        Object.defineProperty(View, "ActiveScreenCssClass", {
            get: function () {
                return "active-screen";
            },
            enumerable: false,
            configurable: true
        });
        View.prototype.getCurrentScreenRootElement = function () {
            return document.querySelector("." + View.ActiveScreenCssClass);
        };
        View.prototype.render = function () {
            return new Promise(function (resolve) {
                requestAnimationFrame(function () {
                    setTimeout(resolve, 1);
                });
            });
        };
        View.prototype.wasCurrentViewRestoredFromCache = function () {
            return this._model ? this._model.context.viewWasRestoredFromCache : false;
        };
        View.prototype.registerDeviceClassGetter = function (getter) {
            return Injector.register(KnownServices_1.ServiceNames.DeviceHelperClassProvider, function () { return getter; });
        };
        return View;
    }());
    exports.View = View;
    var ApplicationContext = (function () {
        function ApplicationContext() {
        }
        ApplicationContext.getCurrentScreenDefinition = function () {
            var activeScreen = Controller_1.BaseViewController.activeScreen;
            if (activeScreen) {
                var module = ApplicationInfo.getModuleFromKey(ApplicationInfo.getHomeModuleKey());
                if (module) {
                    return ApplicationInfo.getScreenDefinitionFromScreenName(module, activeScreen.viewName);
                }
            }
            return null;
        };
        ApplicationContext.getCurrentContext = function () {
            var screen = ApplicationContext.getCurrentScreenDefinition();
            return {
                applicationKey: ApplicationInfo.getApplicationKey() || "",
                applicationName: ApplicationInfo.getApplicationName() || "",
                moduleKey: ApplicationInfo.getHomeModuleKey() || "",
                moduleName: ApplicationInfo.getHomeModuleName() || "",
                screenKey: screen ? screen.screenKey : "",
                screenName: screen ? screen.screenName : "",
            };
        };
        return ApplicationContext;
    }());
    exports.ApplicationContext = ApplicationContext;
    var ApplicationLoad = (function () {
        function ApplicationLoad() {
        }
        Object.defineProperty(ApplicationLoad, "Instance", {
            get: function () {
                return ApplicationLoad;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ApplicationLoad, "isUpgradingVersion", {
            get: function () {
                emitDeprecatedWarning("ApplicationLoad.isUpgradingVersion", "ApplicationLifecycle.isUpgradingVersion()");
                return ApplicationLifecycle.isUpgradingVersion();
            },
            enumerable: false,
            configurable: true
        });
        ApplicationLoad.listen = function (eventHandlers) {
            emitDeprecatedWarning("ApplicationLoad.listen()", "ApplicationLifecycle.listen()");
            ApplicationLifecycle.listen(eventHandlers);
        };
        return ApplicationLoad;
    }());
    exports.ApplicationLoad = ApplicationLoad;
    var Branding;
    (function (Branding) {
        function showOutSystemsWatermark() {
            return ApplicationInfo.showWatermark();
        }
        Branding.showOutSystemsWatermark = showOutSystemsWatermark;
    })(Branding || (exports.Branding = Branding = {}));
});
//# sourceMappingURL=Public.js.map;
define('OutSystems/ClientRuntime/PublicApiHelper',["require", "exports", "./BuiltinFunctions", "./Public"], function (require, exports, BuiltinFunctions, Public_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PublicApiHelper = void 0;
    var PublicApiHelper = (function () {
        function PublicApiHelper(_model, _navigationContext) {
            this._model = _model;
            this._navigationContext = _navigationContext;
        }
        Object.defineProperty(PublicApiHelper.prototype, "BuiltinFunctions", {
            get: function () {
                return BuiltinFunctions;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "Validation", {
            get: function () {
                if (!this._validation) {
                    this._validation = new Public_1.Validation(this._model);
                }
                return this._validation;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "FeedbackMessage", {
            get: function () {
                return Public_1.FeedbackMessage;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "Device", {
            get: function () {
                return Public_1.Device;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "Security", {
            get: function () {
                return Public_1.Security;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "ApplicationLifecycle", {
            get: function () {
                return Public_1.ApplicationLifecycle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "ApplicationContext", {
            get: function () {
                return Public_1.ApplicationContext;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "ApplicationLoad", {
            get: function () {
                return Public_1.ApplicationLoad;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "Navigation", {
            get: function () {
                if (!this._navigation) {
                    this._navigation = new Public_1.Navigation(this._navigationContext);
                }
                return this._navigation;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "Logger", {
            get: function () {
                return Public_1.Logger;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "View", {
            get: function () {
                if (!this._view) {
                    this._view = new Public_1.View(this._model);
                }
                return this._view;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PublicApiHelper.prototype, "Branding", {
            get: function () {
                return Public_1.Branding;
            },
            enumerable: false,
            configurable: true
        });
        return PublicApiHelper;
    }());
    exports.PublicApiHelper = PublicApiHelper;
});
//# sourceMappingURL=PublicApiHelper.js.map;
define('OutSystems/ClientRuntime/WidgetNaming',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WidgetIdService = exports.NamespaceKind = void 0;
    var NamespaceKind;
    (function (NamespaceKind) {
        NamespaceKind[NamespaceKind["Block"] = 0] = "Block";
        NamespaceKind[NamespaceKind["IteratorItem"] = 1] = "IteratorItem";
        NamespaceKind[NamespaceKind["None"] = 2] = "None";
    })(NamespaceKind || (exports.NamespaceKind = NamespaceKind = {}));
    var WIDGET_ID_SEPARATOR = "-";
    var WidgetIdService = (function () {
        function WidgetIdService(_ownerService, ownerAlias, namespaceKind, index) {
            if (ownerAlias === void 0) { ownerAlias = ""; }
            if (namespaceKind === void 0) { namespaceKind = NamespaceKind.None; }
            if (index === void 0) { index = null; }
            this._ownerService = _ownerService;
            switch (namespaceKind) {
                case NamespaceKind.Block:
                    this._namespace = "b";
                    break;
                case NamespaceKind.IteratorItem:
                    this._namespace = "l";
                    break;
                default:
                    this._namespace = "";
                    break;
            }
            this._namespace += ownerAlias;
            if (_ownerService) {
                var indexPart = index ? index + WIDGET_ID_SEPARATOR : "";
                this._namespace = _ownerService.namespace + this._namespace + WIDGET_ID_SEPARATOR + indexPart;
            }
            else if (this._namespace) {
                this._namespace = this._namespace + WIDGET_ID_SEPARATOR;
            }
        }
        WidgetIdService.prototype.getId = function (widgetName) {
            if (widgetName) {
                return this.namespace + widgetName;
            }
            return null;
        };
        WidgetIdService.nameFromId = function (id) {
            return id.substring(id.lastIndexOf(WIDGET_ID_SEPARATOR) + 1);
        };
        Object.defineProperty(WidgetIdService.prototype, "namespace", {
            get: function () {
                return this._namespace;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetIdService.prototype, "ownerService", {
            get: function () {
                return this._ownerService;
            },
            enumerable: false,
            configurable: true
        });
        return WidgetIdService;
    }());
    exports.WidgetIdService = WidgetIdService;
});
//# sourceMappingURL=WidgetNaming.js.map;
define('OutSystems/ClientRuntime/Validation',["require", "exports", "./WidgetNaming"], function (require, exports, WidgetNaming_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationResult = exports.ValidationService = void 0;
    var RootKey = "";
    var ValidationService = (function () {
        function ValidationService(model, messagesProvider) {
            var _this = this;
            this.model = model;
            this.messagesProvider = messagesProvider;
            this.updatingValidations = false;
            this.disposed = false;
            if (!model.hasValidationWidgets) {
                return;
            }
            this.widgets = {};
            this.widgetChildren = {};
            this.oldModelWidgets = this.model.widgets;
            this.model.subscribeWrites(function () {
                if (!_this.updatingValidations && _this.oldModelWidgets !== _this.model.widgets) {
                    _this.recalculateAggregatorsState(RootKey);
                }
                _this.oldModelWidgets = _this.model.widgets;
            }, true);
        }
        ValidationService.prototype.getWidgetRecord = function (widgetId) {
            return this.model.widgets.get(widgetId);
        };
        ValidationService.prototype.updateWidgetValidationsProperties = function (widget, valid, validationMessage) {
            var previousValue = this.updatingValidations;
            this.updatingValidations = true;
            try {
                if (widget.isWebBlockInstance) {
                    var webBlockInstance = widget;
                    webBlockInstance.valid = valid;
                }
                else {
                    var modelWidget = this.getWidgetRecord(widget.getId());
                    if (modelWidget.validAttr !== valid) {
                        modelWidget.validAttr = valid;
                    }
                    if (validationMessage !== undefined && modelWidget.validationMessageAttr !== validationMessage) {
                        modelWidget.validationMessageAttr = validationMessage;
                    }
                }
            }
            finally {
                this.updatingValidations = previousValue;
            }
        };
        ValidationService.prototype.validateWidget = function (widgetId) {
            var result = true;
            for (var childId in this.widgetChildren[widgetId]) {
                if (this.validateWidget(childId) !== true) {
                    result = false;
                }
            }
            var widgetInstance = this.widgets[widgetId];
            if (widgetInstance) {
                var validateResult = null;
                if (widgetInstance.isValidationAggregator) {
                    validateResult = new ValidationResult(result);
                }
                else if (widgetInstance.validate) {
                    validateResult = widgetInstance.validate();
                }
                if (validateResult) {
                    this.updateWidgetValidationsProperties(widgetInstance, validateResult.valid, validateResult.validationMessage);
                    if (!validateResult.valid) {
                        result = false;
                    }
                }
            }
            return result;
        };
        ValidationService.prototype.recalculateAggregatorsState = function (widgetId) {
            var result = true;
            for (var childId in this.widgetChildren[widgetId]) {
                if (!this.recalculateAggregatorsState(childId)) {
                    result = false;
                }
            }
            var widgetInstance = this.widgets[widgetId];
            if (widgetInstance) {
                if (widgetInstance.isWebBlockInstance) {
                    return widgetInstance.valid;
                }
                else if (widgetInstance.isValidationAggregator) {
                    this.updateWidgetValidationsProperties(widgetInstance, result, undefined);
                }
                else {
                    return this.getWidgetRecord(widgetId).validAttr;
                }
            }
            return result;
        };
        ValidationService.prototype.register = function (widget) {
            if (!this.model.hasValidationWidgets) {
                return;
            }
            if (widget) {
                var widgetId = widget.getId();
                if (widgetId) {
                    this.widgets[widgetId] = widget;
                    var parentId = widget.validationParentId || RootKey;
                    var children = this.widgetChildren[parentId];
                    if (!children) {
                        children = {};
                        this.widgetChildren[parentId] = children;
                    }
                    children[widgetId] = 1;
                    if (!widget.isWebBlockInstance) {
                        var validationWidget = widget;
                        var widgetRecord = this.model.widgets.create(widgetId);
                        widgetRecord.generationNode = validationWidget.generationNode;
                        this.model.widgets.add(widgetRecord);
                    }
                }
            }
        };
        ValidationService.prototype.unregister = function (id) {
            if (!id || this.disposed || !this.model.hasValidationWidgets) {
                return;
            }
            var widgetInstance = this.widgets[id];
            var parentId = (widgetInstance ? widgetInstance.validationParentId : null) || RootKey;
            delete this.widgets[id];
            delete this.widgetChildren[parentId][id];
            if (widgetInstance) {
                this.model.widgets.remove(id);
            }
        };
        ValidationService.prototype.isRegistered = function (id) {
            return !!this.widgets && this.widgets[id] !== undefined;
        };
        ValidationService.prototype.validate = function (widgetId) {
            if (!this.model.hasValidationWidgets) {
                return true;
            }
            var result = this.validateWidget(widgetId || RootKey);
            if (widgetId) {
                result = this.recalculateAggregatorsState(RootKey);
            }
            this.model.flush();
            return result;
        };
        ValidationService.prototype.getMandatoryValueMessage = function () {
            return this.messagesProvider.getMandatoryValueMessage();
        };
        ValidationService.prototype.getInvalidValueMessage = function (type) {
            return this.messagesProvider.getInvalidValueMessage(type);
        };
        ValidationService.prototype.getNameById = function (id) {
            return WidgetNaming_1.WidgetIdService.nameFromId(id);
        };
        ValidationService.prototype.getWidgetChildren = function () {
            return this.widgetChildren;
        };
        ValidationService.prototype.dispose = function () {
            this.disposed = true;
        };
        return ValidationService;
    }());
    exports.ValidationService = ValidationService;
    var ValidationResult = (function () {
        function ValidationResult(valid, validationMessage) {
            this.valid = valid;
            this.validationMessage = validationMessage;
        }
        Object.defineProperty(ValidationResult.prototype, "valid", {
            get: function () {
                return this._valid;
            },
            set: function (value) {
                this._valid = value === undefined ? true : value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ValidationResult.prototype, "validationMessage", {
            get: function () {
                return this._validationMessage;
            },
            set: function (value) {
                this._validationMessage = value || "";
            },
            enumerable: false,
            configurable: true
        });
        return ValidationResult;
    }());
    exports.ValidationResult = ValidationResult;
});
//# sourceMappingURL=Validation.js.map;
define('OutSystems/ClientRuntime/Controller',["require", "exports", "tslib", "./ApplicationInfo", "./Communication", "./DataConversion", "./DataTypes", "./ErrorHandling", "./Exceptions", "./Flow", "./Injector", "./Injector/KnownServices", "./Logger", "./NativeHelper", "./Navigation", "./PublicApiHelper", "./RequireManager", "./RolesInfo", "./Validation", "./VersionsManager", "./WidgetNaming"], function (require, exports, tslib_1, ApplicationInfo, Communication, DataConversion_1, DataTypes, ErrorHandling, Exceptions, Flow, Injector_1, KnownServices_1, Logger, NativeHelper, Navigation, PublicApiHelper_1, RequireManager, RolesInfo, Validation_1, VersionsManager_1, WidgetNaming_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseViewController = exports.BaseModuleController = exports.BaseController = exports.IterationContext = exports.CallContext = exports.ControllerFactory = void 0;
    var NOOP = function () { };
    var ANY_SCREEN_KEY = "*";
    var ControllerFactory = (function () {
        function ControllerFactory(controllerClass, messagesProvider) {
            this.controllerClass = controllerClass;
            this.messagesProvider = messagesProvider;
        }
        ControllerFactory.prototype.create = function (model, idService) {
            return new this.controllerClass(model, this.messagesProvider, idService);
        };
        ControllerFactory.executeWithNavigationCallbacks = function (action, navigationCallbacks, callContext) {
            Navigation.setNavigationCallbacks(navigationCallbacks);
            var dispose = function () {
                navigationCallbacks.dispose(callContext);
                Navigation.removeNavigationCallbacks();
            };
            return Flow.tryFinally(action, dispose);
        };
        ControllerFactory.prototype.initialize = function (modelContext, modelFactory, webflowClass, checkPermissionsNavigationCallbacks, controllerInitializationNavigationCallbacks) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var activeScreen, currentViewContext, e_1, result_1, model, controller, initializePromise, result;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            activeScreen = BaseViewController.activeScreen;
                            currentViewContext = !activeScreen ? webflowClass.callContext() : activeScreen.callContext();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            if (!(RolesInfo.getUserId() !== 0 && !RolesInfo.areRolesDefined())) return [3, 3];
                            return [4, new Promise(function (resolve) {
                                    new PublicApiHelper_1.PublicApiHelper(null, null).ApplicationLifecycle.listen({
                                        onLoadComplete: resolve,
                                    });
                                })];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            this.controllerClass.checkPermissions();
                            return [3, 5];
                        case 4:
                            e_1 = _a.sent();
                            result_1 = {
                                permissionsOk: false,
                            };
                            return [2, ControllerFactory.executeWithNavigationCallbacks(function () { return webflowClass.handleError(e_1, currentViewContext); }, checkPermissionsNavigationCallbacks, currentViewContext).then(function () { return result_1; }, function (error) { return result_1; })];
                        case 5:
                            model = modelFactory.create(modelContext);
                            controller = this.create(model, new WidgetNaming_1.WidgetIdService(null));
                            controller.setAsActiveScreen();
                            initializePromise = ControllerFactory.executeWithNavigationCallbacks(function () { return controller.fireInitialize(); }, controllerInitializationNavigationCallbacks, controller.callContext());
                            result = {
                                permissionsOk: true,
                                controller: controller,
                                model: model,
                            };
                            return [2, initializePromise.then(function () { return result; }, function (error) {
                                    if (Exceptions.isInstanceOf(error, Exceptions.Exceptions.UnhandledOrIgnoredErrorInEventException) &&
                                        error.handleErrorResult ===
                                            ErrorHandling.UNHANDLED_ERROR_RESULT) {
                                        return {
                                            permissionsOk: true,
                                        };
                                    }
                                    else {
                                        return result;
                                    }
                                })];
                    }
                });
            });
        };
        Object.defineProperty(ControllerFactory.prototype, "activeScreenController", {
            get: function () {
                return BaseViewController.activeScreen;
            },
            enumerable: false,
            configurable: true
        });
        return ControllerFactory;
    }());
    exports.ControllerFactory = ControllerFactory;
    var CallContext = (function () {
        function CallContext() {
            this._iterationContext = new IterationContext();
            this._id = ++CallContext.currentId;
        }
        Object.defineProperty(CallContext.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CallContext.prototype, "viewName", {
            get: function () {
                return this._viewName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CallContext.prototype, "timeout", {
            get: function () {
                return this._timeout;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CallContext.prototype, "iterationContext", {
            get: function () {
                return this._iterationContext;
            },
            set: function (newIterationContext) {
                this._iterationContext = newIterationContext;
            },
            enumerable: false,
            configurable: true
        });
        CallContext.prototype.withViewName = function (newViewName) {
            if (this._viewName !== newViewName) {
                return this.innerClone({
                    _viewName: { value: newViewName },
                });
            }
            return this;
        };
        CallContext.prototype.withTimeout = function (newTimeout) {
            if (this._timeout !== newTimeout) {
                return this.innerClone({
                    _timeout: { value: newTimeout },
                });
            }
            return this;
        };
        CallContext.prototype.clone = function () {
            var clonedCallContext = this.innerClone();
            clonedCallContext._id = ++CallContext.currentId;
            return clonedCallContext;
        };
        CallContext.prototype.innerClone = function (extraProperties) {
            var ccClone = Object.create(this, extraProperties);
            ccClone.iterationContext = this.iterationContext.clone();
            return ccClone;
        };
        Object.defineProperty(CallContext.prototype, "isOutOfContext", {
            get: function () {
                return !!BaseViewController.activeScreen && this.viewName !== BaseViewController.activeScreen.viewName;
            },
            enumerable: false,
            configurable: true
        });
        CallContext.currentId = 0;
        return CallContext;
    }());
    exports.CallContext = CallContext;
    var IterationContext = (function () {
        function IterationContext() {
        }
        IterationContext.prototype.getCurrentRowNumber = function (list) {
            var iterator = this.getIterator(list);
            if (iterator) {
                return iterator.currentRowNumber;
            }
            else {
                return 0;
            }
        };
        IterationContext.prototype.setCurrentRowNumber = function (list, currentRowNumber) {
            var iterator = this.getIteratorForSet(list);
            iterator.currentRowNumber = currentRowNumber;
        };
        IterationContext.prototype.isBeingIterated = function (list) {
            var iterator = this.getIterator(list);
            if (iterator) {
                return iterator.isBeingIterated;
            }
            else {
                return false;
            }
        };
        IterationContext.prototype.registerIterationStart = function (list) {
            var iterator = this.getIteratorForSet(list);
            if (iterator.isBeingIterated) {
                throw new Error("List is already being iterated in this context");
            }
            iterator.currentRowNumber = list.length - 1;
            iterator.isBeingIterated = true;
        };
        IterationContext.prototype.registerIterationEnd = function (list) {
            var iterator = this.getIteratorForSet(list);
            if (!iterator.isBeingIterated) {
                throw new Error("List was redefined while being iterated");
            }
            iterator.isBeingIterated = false;
        };
        IterationContext.prototype.getIterator = function (list) {
            if (this.iterators) {
                return this.iterators.get(list.modelId);
            }
            else {
                return null;
            }
        };
        IterationContext.prototype.getIteratorForSet = function (list) {
            if (!this.iterators) {
                this.iterators = new Map();
            }
            var iterator = this.getIterator(list);
            if (!iterator) {
                iterator = {
                    currentRowNumber: 0,
                    isBeingIterated: false,
                };
                this.iterators.set(list.modelId, iterator);
            }
            return iterator;
        };
        IterationContext.prototype.clone = function () {
            var clonedContext = new IterationContext();
            if (this.iterators) {
                clonedContext.iterators = cloneMap(this.iterators, function (value) { return Object.create(value); });
            }
            return clonedContext;
        };
        return IterationContext;
    }());
    exports.IterationContext = IterationContext;
    function cloneMap(map, cloneValue) {
        var newMap = new Map();
        map.forEach(function (value, key) {
            var clonedValue = cloneValue(value);
            newMap.set(key, clonedValue);
        });
        return newMap;
    }
    var VariableGroupTypeFactory = new DataTypes.RecordTypeFactory();
    var JSONDeserializeOutputTypeFactory = new DataTypes.ComplexTypeKeyedTypeFactory("Data", "dataOut");
    var AggregateOutputTypeFactory = new DataTypes.ComplexTypeKeyedTypeFactory("List", "listOut", [
        {
            name: "Count",
            attrName: "countOut",
            mandatory: true,
            dataType: DataTypes.DataTypes.LongInteger,
            defaultValue: function () { return DataTypes.LongInteger.defaultValue; },
        },
    ]);
    var BASE_CONTROLLER_MODULE_NAME = "BaseController";
    var BaseController = (function () {
        function BaseController(translationResources, context) {
            var _this = this;
            this.context = context;
            this.isExecutingJSNode = false;
            this.localeChangeHandler = function (data) {
                var _a;
                var translationsService = Injector_1.default.resolve(KnownServices_1.ServiceNames.TranslationsService);
                var localeService = Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService);
                if (translationsService) {
                    var localeCodes = (_a = data.localeFamily) !== null && _a !== void 0 ? _a : [data.localeCode];
                    localeCodes.forEach(function (localeCode) {
                        var _a, _b;
                        if (_this.translationResources[localeCode]) {
                            Logger.trace(BASE_CONTROLLER_MODULE_NAME, "Adding translations for ".concat(localeCode, " locale."));
                            translationsService.add((_a = _this.translationResources[localeCode].translations) !== null && _a !== void 0 ? _a : {});
                            localeService.setCurrentLocaleRTL((_b = _this.translationResources[localeCode].isRTL) !== null && _b !== void 0 ? _b : false);
                        }
                        else {
                            Logger.trace(BASE_CONTROLLER_MODULE_NAME, "No translations found for ".concat(localeCode, " locale."));
                        }
                    });
                }
            };
            this.translationResources = translationResources !== null && translationResources !== void 0 ? translationResources : this.translationResources;
            if (this.translationResources) {
                var localeService = Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService);
                if (localeService) {
                    var localeCode = localeService.getCurrentLocale();
                    var localeFamily = localeService.getCurrentLocaleFamily();
                    this.localeChangeHandler({ localeCode: localeCode, localeFamily: localeFamily });
                    Logger.trace(BASE_CONTROLLER_MODULE_NAME, "Subscribing handler for locale service.");
                    localeService.subscribe(this.localeChangeHandler, context);
                }
            }
        }
        Object.defineProperty(BaseController.prototype, "publicApiHelper", {
            get: function () {
                if (!this._publicApiHelper) {
                    this._publicApiHelper = this.createPublicApiHelper();
                }
                return this._publicApiHelper;
            },
            enumerable: false,
            configurable: true
        });
        BaseController.prototype.getDefaultTimeout = function () {
            throw new Error("Controllers must implement getDefaultTimeout");
        };
        BaseController.prototype.createPublicApiHelper = function () {
            return new PublicApiHelper_1.PublicApiHelper(null, this.callContext());
        };
        Object.defineProperty(BaseController.prototype, "default", {
            get: function () {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseController.prototype, "controller", {
            get: function () {
                return this;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseController.prototype, "displayName", {
            get: function () {
                return this.context;
            },
            enumerable: false,
            configurable: true
        });
        BaseController.prototype.callContext = function (currentContext) {
            if (currentContext === void 0) { currentContext = new CallContext(); }
            return currentContext;
        };
        BaseController.prototype.safeExecuteJSNode = function (executeJSNode, jsNodeName, actionName, args, convertResults, actions, roles, isAsync) {
            if (isAsync === void 0) { isAsync = false; }
            var handleException = function (ex) {
                var message = "Check the JavaScript node '".concat(jsNodeName, "' of the action '").concat(actionName, "'.");
                ex = ex || new Error(message);
                if (ex instanceof Exceptions.Exceptions.NumberOverflowException ||
                    ex instanceof Exceptions.Exceptions.InvalidJavascriptType) {
                    ex.message = ex.message + " " + message;
                }
                throw ex;
            };
            var previousIsExecutingJSNode = this.isExecutingJSNode;
            var jsNodeContext = (args ? [args] : []).concat(actions, roles, this.publicApiHelper);
            executeJSNode = executeJSNode.bind.apply(executeJSNode, tslib_1.__spreadArray([null], jsNodeContext, false));
            try {
                this.isExecutingJSNode = true;
                if (isAsync) {
                    return executeJSNode().then(function () { return convertResults(args); }).catch(handleException);
                }
                try {
                    executeJSNode();
                    return convertResults(args);
                }
                catch (ex) {
                    handleException(ex);
                }
            }
            finally {
                Logger.trace(BASE_CONTROLLER_MODULE_NAME, "JavaScript node " +
                    jsNodeName +
                    " of the action " +
                    actionName +
                    "".concat(this.displayName ? " for ".concat(this.displayName) : ""));
                this.isExecutingJSNode = previousIsExecutingJSNode;
            }
        };
        BaseController.prototype.safeExecuteAsyncJSNode = function (functionToCall, jsNodeName, actionName, args, convertResults, actions, roles) {
            return this.safeExecuteJSNode(functionToCall, jsNodeName, actionName, args, convertResults, actions, roles, true);
        };
        BaseController.prototype.executeActionInsideJSNode = function (functionToCall, callContext, wrapResults, flush, actionName) {
            if (wrapResults === void 0) { wrapResults = NOOP; }
            if (flush === void 0) { flush = NOOP; }
            if (actionName === void 0) { actionName = ""; }
            var handleException = function (ex) {
                if (!ErrorHandling.ignoreError(ex, callContext)) {
                    throw ex;
                }
            };
            try {
                if (actionName) {
                    try {
                        this.ensureControllerAlive(actionName);
                    }
                    catch (ex) {
                        Logger.error("Controller", ex);
                        throw ex;
                    }
                }
                var result = functionToCall(callContext);
                if (result instanceof Promise) {
                    return result
                        .then(function (r) {
                        flush();
                        return wrapResults(r);
                    })
                        .catch(function (e) {
                        flush();
                        handleException(e);
                    });
                }
                else {
                    return wrapResults(result);
                }
            }
            catch (e) {
                handleException(e);
            }
            finally {
                if (!this.isExecutingJSNode) {
                    flush();
                }
            }
        };
        BaseController.prototype.getInitialPayloadObject = function (context, apiVersion) {
            return {
                versionInfo: {
                    moduleVersion: VersionsManager_1.default.getLastApplicationVersionToken(true),
                    apiVersion: apiVersion,
                },
                viewName: context.viewName ? context.viewName : ANY_SCREEN_KEY,
            };
        };
        BaseController.prototype.getEffectiveTimeoutForServerCall = function (timeout) {
            var appDefaultTimeout = ApplicationInfo.getApplicationDefaultTimeout();
            return appDefaultTimeout || timeout || this.getDefaultTimeout();
        };
        BaseController.prototype.callServerAction = function (actionName, url, apiVersion, inputParameters, callContext, headers, onResponseParsed, useLocaleInfo) {
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            return this.innerCallServerAction(actionName, url, apiVersion, inputParameters, callContext, headers, onResponseParsed, useLocaleInfo);
        };
        BaseController.prototype.innerCallServerAction = function (actionName, url, apiVersion, inputParameters, callContext, headers, onResponseParsed, useLocaleInfo) {
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            var effectiveTimeout = this.getEffectiveTimeoutForServerCall(callContext.timeout);
            var payload = this.getInitialPayloadObject(callContext, apiVersion);
            payload.inputParameters = inputParameters;
            var communicationExceptionMessage = "The timeout of " + effectiveTimeout + "s was reached while executing this server action.";
            var onTimeout = function () {
                Logger.trace(actionName, communicationExceptionMessage);
            };
            return Communication.post(url, payload, ApplicationInfo.getBasePath(), effectiveTimeout, onTimeout, BaseController.createPostResponseHandler(onResponseParsed), undefined, undefined, headers, useLocaleInfo)
                .then(function (data) {
                return data || {};
            })
                .catch(function (ex) {
                ex.extraStack = "Action Name: ".concat(actionName, "\nEndpoint: ").concat(url);
                throw ex;
            });
        };
        BaseController.checkPermissions = function () {
            throw new Error("Screen Controllers must implement checkPermissions");
        };
        BaseController.handlePostResponse = function (json, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.url, url = _c === void 0 ? "" : _c;
            if (!!json.rolesInfo) {
                RolesInfo.storeRoleInformation(json.rolesInfo, { url: url });
            }
            var clientVariableService = Injector_1.default.resolve(KnownServices_1.ServiceNames.ClientVariablesService);
            if (clientVariableService) {
                clientVariableService.checkSessionExpires();
            }
        };
        BaseController.createPostResponseHandler = function (customHandler) {
            return function (json, headers, _a) {
                var _b = _a === void 0 ? {} : _a, _c = _b.url, url = _c === void 0 ? "" : _c;
                BaseController.handlePostResponse(json, { url: url });
                if (customHandler) {
                    customHandler(json, headers);
                }
            };
        };
        BaseController.prototype.executeClientAggregate = function (executeQuery, getAggregate) {
            return Flow.executeSequence(function () {
                return executeQuery();
            }).then(function (result) {
                var aggregate = getAggregate();
                aggregate.listOut = result.list;
                aggregate.countOut = result.count;
            });
        };
        BaseController.prototype.ensureControllerAlive = function (actionName) { };
        BaseController.getJSONDeserializeOutputType = function (typeConstructor) {
            return JSONDeserializeOutputTypeFactory.getType(typeConstructor);
        };
        BaseController.getAggregateOutputType = function (listType) {
            return AggregateOutputTypeFactory.getType(listType);
        };
        BaseController.registerVariableGroupType = function (typeId, attrs) {
            VariableGroupTypeFactory.registerTypeDefinition(typeId, attrs);
        };
        BaseController.getVariableGroupType = function (typeId) {
            return VariableGroupTypeFactory.getType(typeId);
        };
        BaseController.prototype.isActive = function () {
            return true;
        };
        return BaseController;
    }());
    exports.BaseController = BaseController;
    var BaseModuleController = (function (_super) {
        tslib_1.__extends(BaseModuleController, _super);
        function BaseModuleController(translationResources, context) {
            var _this = _super.call(this, translationResources, context) || this;
            _this.fireApplicationResumeSingletonCallback = _this.fireApplicationResume.bind(_this);
            return _this;
        }
        BaseModuleController.prototype.registerEventHandler = function (eventActionModule, eventActionName, handlerSetter) {
            var _this = this;
            handlerSetter(function () {
                return new Promise(function (resolve, reject) {
                    RequireManager.loadModule([eventActionModule], resolve, reject);
                }).then(function () {
                    var eventAction = _this[eventActionName];
                    var newEventHandler = function () { return Promise.resolve().then(function () { return eventAction.call(_this); }); };
                    handlerSetter(newEventHandler);
                    return newEventHandler();
                });
            });
        };
        BaseModuleController.prototype.registerOnApplicationReadyHandler = function (eventActionModule, eventActionName) {
            var _this = this;
            this.registerEventHandler(eventActionModule, eventActionName, function (handler) { return (_this.onApplicationReadyHandler = handler); });
        };
        BaseModuleController.prototype.registerOnApplicationResumeHandler = function (eventActionModule, eventActionName) {
            var _this = this;
            this.registerEventHandler(eventActionModule, eventActionName, function (handler) { return (_this.onApplicationResumeHandler = handler); });
        };
        BaseModuleController.prototype.fireApplicationReady = function () {
            var _this = this;
            if (!!this.onApplicationReadyHandler) {
                return this.onApplicationReadyHandler().then(function () { return _this.setupOnApplicationResumeListener(); });
            }
            else {
                this.setupOnApplicationResumeListener();
                return Promise.resolve(undefined);
            }
        };
        BaseModuleController.prototype.setupOnApplicationResumeListener = function () {
            if (!!this.onApplicationResumeHandler) {
                NativeHelper.addNativeEventListener("resume", this.fireApplicationResumeSingletonCallback);
            }
        };
        BaseModuleController.prototype.fireApplicationResume = function () {
            if (!!this.onApplicationResumeHandler) {
                return this.onApplicationResumeHandler();
            }
            else {
                return Promise.resolve(undefined);
            }
        };
        return BaseModuleController;
    }(BaseController));
    exports.BaseModuleController = BaseModuleController;
    var BaseViewController = (function (_super) {
        tslib_1.__extends(BaseViewController, _super);
        function BaseViewController(model, messagesProvider, _idService, translationResources) {
            var _this = _super.call(this, translationResources, model.context.componentName) || this;
            _this.model = model;
            _this.messagesProvider = messagesProvider;
            _this._idService = _idService;
            _this.instanceId = BaseViewController.globalInstanceId++;
            _this.isDisposed = false;
            _this.shouldSendClientVarsToDataSources = false;
            _this.fetchReadySources = function (completedSource) {
                var readyToExecute = [];
                var actionsToCheck = completedSource === undefined ? _this.dataFetchActionNames : _this.dataFetchDependentsGraph[completedSource];
                actionsToCheck.forEach(function (action) {
                    if (completedSource) {
                        _this.dataFetchDependencies[action]--;
                    }
                    if (_this.dataFetchDependencies[action] === 0) {
                        readyToExecute.push(action);
                    }
                });
                readyToExecute.forEach(function (action) {
                    _this.remainingFetchesCount++;
                    _this.dataFetchDependencies[action] = -1;
                    _this.executeDataFetchAction(action).then(function () { return _this.fetchReadySources(action); });
                });
            };
            _this.clientVariablesHandler = function (data) {
                _this.model.clientVariablesGeneration++;
                _this.model.scheduleFlush();
            };
            _this.localeDependencyHandler = function (data) {
                _this.model.currentLocale = data.localeCode;
                _this.model.scheduleFlush();
            };
            var localeService = Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService);
            if (localeService && _this.translationResources) {
                _this.model.currentLocale = localeService.getCurrentLocale();
            }
            _this.validationServiceInstance = new Validation_1.ValidationService(model, messagesProvider);
            return _this;
        }
        BaseViewController.prototype.fireEvent = function (event, eventName) {
            var _this = this;
            if (eventName === void 0) { eventName = ""; }
            return Flow.executeSequence(function () {
                if (!!event) {
                    Logger.trace(_this, "Executing ".concat(eventName, " event handler for ").concat(_this.displayName));
                    return event.call(_this, _this.callContext());
                }
            }).then(function (result) {
                if (ErrorHandling.isSpecialHandleErrorResult(result)) {
                    throw Exceptions.Exceptions.UnhandledOrIgnoredErrorInEventException.create(result);
                }
            });
        };
        BaseViewController.prototype.fireEventAndForget = function (event, eventName) {
            if (eventName === void 0) { eventName = ""; }
            this.fireEvent(event, eventName).catch(Exceptions.Exceptions.UnhandledOrIgnoredErrorInEventException.ignore);
        };
        BaseViewController.prototype.createPublicApiHelper = function () {
            return new PublicApiHelper_1.PublicApiHelper(this.model, this.callContext());
        };
        Object.defineProperty(BaseViewController, "activeScreen", {
            get: function () {
                return BaseViewController.activeScreenInstance;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewController.prototype.setAsActiveScreen = function () {
            BaseViewController.activeScreenInstance = this;
        };
        BaseViewController.prototype.isActive = function () {
            if (this.displayName && this.displayName.indexOf("/") !== -1) {
                return true;
            }
            else {
                return BaseViewController.activeScreen === this;
            }
        };
        BaseViewController.prototype.callContext = function (currentContext) {
            return _super.prototype.callContext.call(this, currentContext).withViewName(this.viewName);
        };
        Object.defineProperty(BaseViewController.prototype, "validationService", {
            get: function () {
                return this.validationServiceInstance;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewController.prototype, "viewName", {
            get: function () {
                return this.modelContext ? this.modelContext.viewName : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewController.prototype, "displayName", {
            get: function () {
                return this.modelContext ? this.model.displayName : undefined;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewController.prototype.fetchData = function () {
            var dataFetched = false;
            Logger.trace(this, "Using Improved data fetching with dependencies");
            dataFetched = this.innerFetchDataWithDependencies();
            if (dataFetched) {
                this.model.flush();
            }
        };
        BaseViewController.prototype.executeDataFetchAction = function (actionName) {
            var _this = this;
            Logger.trace(this, "Fetching " + actionName);
            return Flow.executeSequence(function () { return _this[actionName](); }).then(function () {
                _this.remainingFetchesCount--;
                clearTimeout(_this.flushTimeoutHandle);
                Logger.trace(_this, "Fetched " + actionName);
                if (_this.remainingFetchesCount > 0) {
                    _this.flushTimeoutHandle = setTimeout(function () { return _this.model.flush(); }, 50);
                }
                else {
                    _this.model.flush();
                }
            }, function (ex) {
                _this.remainingFetchesCount--;
                _this.model.flush();
                _this.handleError(ex);
            });
        };
        BaseViewController.prototype.innerFetchDataWithDependencies = function () {
            if (!this.dataFetchActionNames || this.dataFetchActionNames.length === 0) {
                return false;
            }
            this.dataFetchDependencies = tslib_1.__assign({}, this.dataFetchDependenciesOriginal);
            this.flushTimeoutHandle = 0;
            this.remainingFetchesCount = 0;
            this.fetchReadySources();
            return true;
        };
        Object.defineProperty(BaseViewController.prototype, "idService", {
            get: function () {
                return this._idService;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewController.prototype.fireInitialize = function () {
            var _this = this;
            var clientVariablesService = Injector_1.default.resolve(KnownServices_1.ServiceNames.ClientVariablesService);
            if (clientVariablesService) {
                clientVariablesService.subscribe(this.clientVariablesHandler, this.displayName);
            }
            var localeService = Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService);
            if (localeService) {
                localeService.subscribe(this.localeDependencyHandler, this.displayName);
            }
            return this.fireEvent(this.onInitializeEventHandler, "OnInitialize").then(function () { return _this.fetchData(); });
        };
        BaseViewController.prototype.fireAfterViewReady = function () {
            var _this = this;
            this.fireEvent(this.onReadyEventHandler, "OnReady")
                .then(function () { return _this.fireEvent(_this.onRenderEventHandler, "OnRender"); })
                .catch(Exceptions.Exceptions.UnhandledOrIgnoredErrorInEventException.ignore);
        };
        BaseViewController.prototype.fireAfterInputsChanged = function () {
            this.fireEventAndForget(this.onParametersChangedEventHandler, "OnParametersChanged");
        };
        BaseViewController.prototype.fireAfterViewRender = function (renderLoopDetected) {
            var _this = this;
            if (renderLoopDetected === void 0) { renderLoopDetected = false; }
            if (this.onRenderEventHandler) {
                return this.fireEvent(function (context) {
                    if (renderLoopDetected) {
                        Logger.error("View", "Render loop avoided. " +
                            "This is likely due to the model of the screen/block '".concat(_this.viewName, "' being changed inside its 'On Render' client action. ") +
                            "Avoid changes to the model inside 'On Render' client actions.");
                        return;
                    }
                    return _this.onRenderEventHandler(context);
                }, "onRender");
            }
        };
        BaseViewController.prototype.fireAfterViewDestroy = function (_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.clientVariablesService, clientVariablesService = _c === void 0 ? Injector_1.default.resolve(KnownServices_1.ServiceNames.ClientVariablesService) : _c, _d = _b.localeService, localeService = _d === void 0 ? Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService) : _d;
            if (clientVariablesService) {
                clientVariablesService.unsubscribe(this.clientVariablesHandler, this.displayName);
            }
            if (localeService) {
                localeService.unsubscribe(this.localeDependencyHandler, this.displayName);
                localeService.unsubscribe(this.localeChangeHandler, this.context);
            }
            this.fireEventAndForget(this.onDestroyEventHandler, "onDestroy");
        };
        BaseViewController.prototype.registerClientAction = function (actionName, action) {
            this[actionName] = action;
        };
        BaseViewController.prototype.innerCallAggregate = function (aggregateName, url, apiVersion, maxRecords, startIndex, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo) {
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            var requestTimeout = this.getEffectiveTimeoutForServerCall(timeout);
            Logger.trace(this, "Calling ".concat(aggregateName, " aggregate with start index endpoint"));
            return this.callServerDataSource(aggregateName, url, apiVersion, setDataFetchStatus, setDataFromJS, function (input) {
                input.inputParameters = {
                    StartIndex: startIndex,
                    MaxRecords: maxRecords,
                };
            }, requestTimeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo);
        };
        BaseViewController.prototype.callAggregateWithStartIndexAndClientVars = function (aggregateName, url, apiVersion, maxRecords, startIndex, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo) {
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            return this.innerCallAggregate(aggregateName, url, apiVersion, maxRecords, startIndex, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo);
        };
        BaseViewController.prototype.callAggregateWithStartIndex = function (aggregateName, url, apiVersion, maxRecords, startIndex, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext) {
            return this.innerCallAggregate(aggregateName, url, apiVersion, maxRecords, startIndex, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext);
        };
        BaseViewController.prototype.callAggregate = function (aggregateName, url, apiVersion, maxRecords, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext) {
            return this.innerCallAggregate(aggregateName, url, apiVersion, maxRecords, 0, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext);
        };
        BaseViewController.prototype.callDataAction = function (dataActionName, url, apiVersion, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo) {
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            return this.innerCallDataAction(dataActionName, url, apiVersion, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo);
        };
        BaseViewController.prototype.innerCallDataAction = function (dataActionName, url, apiVersion, setDataFetchStatus, setDataFromJS, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo) {
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            var requestTimeout = this.getEffectiveTimeoutForServerCall(timeout);
            return this.callServerDataSource(dataActionName, url, apiVersion, setDataFetchStatus, setDataFromJS, undefined, requestTimeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo);
        };
        BaseViewController.prototype.callServerDataSource = function (dataSourceActionName, url, apiVersion, setDataFetchStatus, setDataFromJS, customizePayload, timeout, headers, onResponseParsed, callContext, clientVariablesModule, useLocaleInfo) {
            var _this = this;
            if (customizePayload === void 0) { customizePayload = undefined; }
            if (timeout === void 0) { timeout = 0; }
            if (useLocaleInfo === void 0) { useLocaleInfo = false; }
            var payload = this.getInitialPayloadObject(this.callContext(), apiVersion);
            Logger.trace(this, "Calling ".concat(dataSourceActionName, " data source with optimized on payload"));
            payload.screenData = { variables: DataConversion_1.ServerDataConverter.to(this.model.variables, callContext, true) };
            if (!!customizePayload) {
                customizePayload(payload);
            }
            if (this.shouldSendClientVarsToDataSources && clientVariablesModule) {
                payload.clientVariables = clientVariablesModule.serialize();
            }
            setDataFetchStatus(0);
            var onTimeout = function () {
                Logger.trace(dataSourceActionName, "The timeout of ".concat(timeout, "s was reached while fetching this screen data."));
            };
            return Flow.promise(function (resolve, reject) {
                Communication.post(url, payload, ApplicationInfo.getBasePath(), timeout, onTimeout, BaseViewController.createPostResponseHandler(onResponseParsed), true, _this.instanceId, headers, useLocaleInfo)
                    .then(function (data) {
                    if (_this.isDisposed) {
                    }
                    else {
                        setDataFromJS(data);
                        setDataFetchStatus(1);
                        return resolve();
                    }
                })
                    .catch(function (ex) {
                    if (!_this.isDisposed) {
                        if (!Exceptions.isInstanceOf(ex, Exceptions.Exceptions.ViewHasChangedException) &&
                            !Exceptions.isInstanceOf(ex, Exceptions.Exceptions.OutOfOrderException)) {
                            setDataFetchStatus(2);
                        }
                        if (ex) {
                            ex.extraStack = "Source Name: ".concat(dataSourceActionName, "\nEndpoint: ").concat(url);
                        }
                        return reject(ex);
                    }
                });
            });
        };
        BaseViewController.prototype.handleError = function (e) {
            throw new Error("@abstract");
        };
        BaseViewController.prototype.safeExecuteAsyncJSNode = function (functionToCall, jsNodeName, actionName, args, convertResult, actions, roles) {
            this.model.flush();
            return _super.prototype.safeExecuteAsyncJSNode.call(this, functionToCall, jsNodeName, actionName, args, convertResult, actions, roles);
        };
        BaseViewController.prototype.executeActionInsideJSNode = function (functionToCall, callContext, wrapResults, flush, actionName) {
            var _this = this;
            if (wrapResults === void 0) { wrapResults = NOOP; }
            if (flush === void 0) { flush = NOOP; }
            if (actionName === void 0) { actionName = "UNKNOWN"; }
            return _super.prototype.executeActionInsideJSNode.call(this, functionToCall, callContext, wrapResults, function () {
                flush();
                _this.model.flush();
            }, actionName);
        };
        BaseViewController.prototype.dispose = function () {
            this.validationService.dispose();
            this.isDisposed = true;
        };
        BaseViewController.prototype.ensureControllerAlive = function (actionName) {
            if (this.isDisposed) {
                var exception = new Exceptions.Exceptions.ControllerDisposedException("Invalid call of the '".concat(actionName, "' client action of the '").concat(this.viewName, "' since the latter is not currently active. ") +
                    "This is likely due to a platform's client action being used as an event handler or in a setTimeout function. " +
                    "Consider removing this call by using the 'On Destroy' event of the screen/block or moving your logic to a global client action.");
                Logger.trace("Controller", exception.message);
                throw exception;
            }
        };
        BaseViewController.prototype.safeExecuteClientAction = function (functionToCall, callContext) {
            var _this = this;
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            return Flow.tryCatchFinally(function () { return functionToCall.apply(_this, args.concat(_this.callContext(callContext))); }, function (e) { return _this.handleError(e); }, function () { return _this.model.flush(); });
        };
        Object.defineProperty(BaseViewController.prototype, "modelContext", {
            get: function () {
                return this.model.context;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewController.prototype.executeScreenClientAggregate = function (executeQuery, getAggregate, onAfterFetch) {
            var _this = this;
            return Flow.executeSequence(function () {
                getAggregate().dataFetchStatusAttr = 0;
                return executeQuery();
            }).then(function (result) {
                if (_this.isDisposed) {
                }
                else {
                    getAggregate().bulkSet(result.list, 1, result.count);
                    return Flow.executeSequence(onAfterFetch);
                }
            }, function (ex) {
                if (_this.isDisposed) {
                }
                else {
                    getAggregate().dataFetchStatusAttr = 2;
                    throw ex;
                }
            });
        };
        BaseViewController.downloadBinary = function (content, filename) {
            var blob = content.toBlob() || new Blob([]);
            var link = document.createElement("a");
            link.style.display = "none";
            document.body.appendChild(link);
            if (blob.type) {
                link.type = blob.type;
            }
            var url = window.URL.createObjectURL(blob);
            link.href = url;
            link.download = filename;
            link.click();
            setTimeout(function () { return window.URL.revokeObjectURL(url); }, 500);
            link.remove();
        };
        BaseViewController.globalInstanceId = 0;
        return BaseViewController;
    }(BaseController));
    exports.BaseViewController = BaseViewController;
});
//# sourceMappingURL=Controller.js.map;
define('OutSystems/ClientRuntime/ErrorScreen',["require", "exports", "./ErrorHandling", "./Exceptions", "./Logger", "./Navigation"], function (require, exports, ErrorHandling, Exceptions, Logger, Navigation) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initializeErrorPage = void 0;
    var DEFAULT_ERROR_MESSAGE = "There was an error processing your request.";
    var DEFAULT_EXTRA_ERROR_MESSAGE = "";
    var DEFAULT_RELOAD_BUTTON_LABEL = "RELOAD";
    var ERROR_MESSAGE_ID = "#error-screen-message-text";
    var ERROR_EXTRA_MESSAGE_ID = "#error-screen-message-text-extra";
    var RELOAD_BUTTON_ID = "#error-screen-message-reload-button";
    var SPINNER_ID = "#error-screen-spinner";
    var EXCEPTION_DETAIL_DIV = "#exception-detail";
    var TOGGLE_DETAIL_BUTTON_ID = "#error-screen-show-detail-button";
    var EXCEPTION_INFO_ID = "#error-screen-exception-message";
    var EXCEPTION_STACK_ID = "#error-screen-exception-stack";
    var EXCEPTION_DETAIL_TEXT_ID = "#exception-detail-text";
    function initializeErrorPage(appDefinition, runtime) {
        return Promise.resolve().then(function () {
            return runtime
                .initialize(appDefinition, 1)
                .then(function () {
                setErrorPageMessages(appDefinition.errorPageConfig);
                try {
                    var errorInfo = ErrorHandling.ErrorHandlingStorage.errorPageExceptionInfo.get();
                    var errorMessageDetail = errorInfo
                        ? errorInfo.message
                        : ErrorHandling.ErrorHandlingStorage.errorPageMessage.get();
                    Logger.error("ErrorScreen", "[ErrorScreen] ".concat(errorMessageDetail));
                }
                catch (ex) {
                    Logger.error("ErrorScreen", "[ErrorScreen] Unable to retrieve error details");
                }
                if (!Logger.hadSessionLogs()) {
                    return runtime.initializeDatabase().then(function () {
                        Logger.flushLogsToServer();
                    });
                }
            })
                .catch(function (error) {
                console.error(error);
            });
        });
    }
    exports.initializeErrorPage = initializeErrorPage;
    function setErrorPageMessages(errorPageConfig) {
        var message = ErrorHandling.ErrorHandlingStorage.errorPageMessage.get();
        var extraMessage = ErrorHandling.ErrorHandlingStorage.errorPageExtraMessage.get();
        var errorInfo = ErrorHandling.ErrorHandlingStorage.errorPageExceptionInfo.get();
        if (errorInfo) {
            var errorMessage = errorInfo.message;
            var stack = Exceptions.getStack(errorInfo);
            if (stack) {
                errorMessage += "\n" + stack;
            }
            console.error(errorMessage);
            if (typeof document !== "undefined" && document.querySelector) {
                document.querySelector(EXCEPTION_INFO_ID).innerHTML = errorInfo.message;
                document.querySelector(EXCEPTION_STACK_ID).innerHTML = stack;
                document.querySelector(TOGGLE_DETAIL_BUTTON_ID).addEventListener("click", function () { return toggleExceptionInfo(); });
                if (errorPageConfig && errorPageConfig.showExceptionStack) {
                    var exceptionDetail = document.querySelector(EXCEPTION_DETAIL_DIV);
                    exceptionDetail.style.display = "block";
                }
            }
        }
        if (typeof document !== "undefined" && document.querySelector) {
            var customDefaultMessage = errorPageConfig && errorPageConfig.messages && errorPageConfig.messages.defaultMessage;
            var customExtraMessage = errorPageConfig && errorPageConfig.extraMessage;
            document.querySelector(ERROR_MESSAGE_ID).innerHTML = message || customDefaultMessage || DEFAULT_ERROR_MESSAGE;
            document.querySelector(ERROR_EXTRA_MESSAGE_ID).innerHTML =
                extraMessage || customExtraMessage || DEFAULT_EXTRA_ERROR_MESSAGE;
            document.querySelector(RELOAD_BUTTON_ID).innerHTML =
                (errorPageConfig && errorPageConfig.reloadLabel) || DEFAULT_RELOAD_BUTTON_LABEL;
            document.querySelector(RELOAD_BUTTON_ID).addEventListener("click", function () { return staticErrorPageRedirect(); });
        }
    }
    function staticErrorPageRedirect() {
        if (typeof document !== "undefined" && document.querySelector) {
            var buttonElement = document.querySelector(RELOAD_BUTTON_ID);
            buttonElement.style.display = "none";
            var spinnerElement = document.querySelector(SPINNER_ID);
            spinnerElement.style.display = "inline-block";
        }
        setTimeout(function () {
            Navigation.reloadApplication();
        }, 2000);
    }
    function toggleExceptionInfo() {
        if (typeof document !== "undefined" && document.querySelector) {
            var toggleDetail = document.querySelector(TOGGLE_DETAIL_BUTTON_ID);
            var exceptionDetail = document.querySelector(EXCEPTION_DETAIL_TEXT_ID);
            if (exceptionDetail.hidden) {
                toggleDetail.innerHTML = "Hide Detail";
                exceptionDetail.hidden = false;
            }
            else {
                toggleDetail.innerHTML = "Show Detail";
                exceptionDetail.hidden = true;
            }
        }
    }
});
//# sourceMappingURL=ErrorScreen.js.map;
define('OutSystems/ClientRuntime/JSONUtils',["require", "exports", "./DataConversion", "./Settings"], function (require, exports, DataConversion_1, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeJS = exports.parseJSON = exports.filterJSONValues = exports.deserializeFromJSON = exports.serializeToJSON = void 0;
    function serializeToJSON(value, serializeDefaultValues, useUnixDateFormat, valueType) {
        var convertedJSON = (0, Settings_1.getEnvParams)().UseNewJSONSerialization
            ? DataConversion_1.NewJSONConverter.to({
                value: value,
                serializeDefaultValues: serializeDefaultValues,
                useUnixDateFormat: useUnixDateFormat,
                dataType: valueType,
                enforceDefaultValueSerializationAtThisLevel: true,
            })
            : DataConversion_1.JSONConverter.to(value, serializeDefaultValues, useUnixDateFormat, valueType);
        return JSON.stringify(convertedJSON, filterJSONValues);
    }
    exports.serializeToJSON = serializeToJSON;
    function deserializeFromJSON(json, valueType, useUnixDateFormat) {
        try {
            var objrepr = void 0;
            if (json) {
                objrepr = parseJSON(json);
            }
            return DataConversion_1.JSONConverter.from(objrepr, valueType, useUnixDateFormat);
        }
        catch (e) {
            throw "Failed to deserialize JSON to " + valueType.name + ": " + e.message;
        }
    }
    exports.deserializeFromJSON = deserializeFromJSON;
    function filterJSONValues(key, value) {
        if (value === null) {
            return undefined;
        }
        return value;
    }
    exports.filterJSONValues = filterJSONValues;
    function parseJSON(json) {
        var rx = /(?:"([^\\"]|\\.)*")|(?:'([^\\']|\\.)*')|(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(\w+)\s*:/g;
        var cleanJSON = json.replace(rx, function (match, dqString, sqString, numbers, unquoted) {
            if (numbers) {
                return '"' + numbers + '"';
            }
            if (sqString) {
                return '"' + match.substring(1, match.length - 1) + '"';
            }
            if (unquoted) {
                return '"' + unquoted + '":';
            }
            return match;
        });
        return JSON.parse(cleanJSON);
    }
    exports.parseJSON = parseJSON;
    function mergeJS(target, source) {
        var targetAttr, sourceAttr, copyIsArray, cloneAttr;
        for (var name_1 in source) {
            targetAttr = target[name_1];
            sourceAttr = source[name_1];
            var mergingPlainObjectsOrArrays = sourceAttr && targetAttr && (typeof sourceAttr === "object" || (copyIsArray = Array.isArray(sourceAttr)));
            if (mergingPlainObjectsOrArrays) {
                if (copyIsArray) {
                    copyIsArray = false;
                    cloneAttr = Array.isArray(targetAttr) ? targetAttr : [];
                }
                else {
                    cloneAttr = typeof targetAttr === "object" ? targetAttr : {};
                }
                target[name_1] = mergeJS(cloneAttr, sourceAttr);
            }
            else if (sourceAttr !== undefined) {
                target[name_1] = sourceAttr;
            }
        }
        return target;
    }
    exports.mergeJS = mergeJS;
});
//# sourceMappingURL=JSONUtils.js.map;
define('OutSystems/ClientRuntime/LanguageResources',["require", "exports", "./DataTypes", "./Injector", "./Injector/KnownServices", "./Logger"], function (require, exports, DataTypes_1, Injector_1, KnownServices_1, Logger) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseMessagesProvider = exports.ModuleMessageKeys = void 0;
    var MODULE_NAME = "BaseMessagesProvider";
    var ModuleMessageKeys;
    (function (ModuleMessageKeys) {
        ModuleMessageKeys["MandatoryValue"] = "Validation.Mandatory";
        ModuleMessageKeys["InvalidValuePrefix"] = "Validation.";
        ModuleMessageKeys["UpgradeComplete"] = "UpgradeComplete";
        ModuleMessageKeys["UpgradeRequiredDataLoss"] = "UpgradeRequiredDataLoss";
        ModuleMessageKeys["UpgradeRequired"] = "UpgradeRequired";
        ModuleMessageKeys["UpgradeFailedOnResources"] = "AppInitError.Resources";
        ModuleMessageKeys["UpgradeFailedOnDataModel"] = "AppInitError.DataModel";
        ModuleMessageKeys["UpgradeFailed"] = "AppInitError.Generic";
    })(ModuleMessageKeys || (exports.ModuleMessageKeys = ModuleMessageKeys = {}));
    var BaseMessagesProvider = (function () {
        function BaseMessagesProvider(translationResources) {
            var _this = this;
            this.messages = {};
            this.localeChangeHandler = function (data) {
                var _a;
                var translationsService = Injector_1.default.resolve(KnownServices_1.ServiceNames.TranslationsService);
                var localeService = Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService);
                if (translationsService) {
                    var localeCodes = (_a = data.localeFamily) !== null && _a !== void 0 ? _a : [data.localeCode];
                    localeCodes.forEach(function (localeCode) {
                        var _a, _b;
                        if (_this.translationResources[localeCode]) {
                            Logger.trace(MODULE_NAME, "Adding translations for ".concat(localeCode, " locale."));
                            translationsService.add((_a = _this.translationResources[localeCode].translations) !== null && _a !== void 0 ? _a : {});
                            localeService.setCurrentLocaleRTL((_b = _this.translationResources[localeCode].isRTL) !== null && _b !== void 0 ? _b : false);
                        }
                        else {
                            Logger.trace(MODULE_NAME, "No translations found for ".concat(localeCode, " locale."));
                        }
                    });
                }
            };
            this.translationResources = translationResources !== null && translationResources !== void 0 ? translationResources : this.translationResources;
            if (this.translationResources) {
                var localeService = Injector_1.default.resolve(KnownServices_1.ServiceNames.LocaleService);
                if (localeService) {
                    var localeCode = localeService.getCurrentLocale();
                    var localeFamily = localeService.getCurrentLocaleFamily();
                    this.localeChangeHandler({ localeCode: localeCode, localeFamily: localeFamily });
                    Logger.trace(MODULE_NAME, "Subscribing handler for locale service.");
                    localeService.subscribe(this.localeChangeHandler);
                }
            }
        }
        BaseMessagesProvider.prototype.getMandatoryValueMessage = function () {
            return this.getMessage(ModuleMessageKeys.MandatoryValue, "Required Value!");
        };
        BaseMessagesProvider.prototype.getInvalidValueMessage = function (type) {
            return this.getMessage(ModuleMessageKeys.InvalidValuePrefix + DataTypes_1.DataTypes[type], "Invalid Value!");
        };
        BaseMessagesProvider.prototype.getApplicationUpgradeCompleteMessage = function () {
            return this.getMessage(ModuleMessageKeys.UpgradeComplete, "");
        };
        BaseMessagesProvider.prototype.getApplicationUpgradeRequiredMessage = function (canLoseData) {
            if (canLoseData) {
                return this.getMessage(ModuleMessageKeys.UpgradeRequiredDataLoss, "");
            }
            else {
                return this.getMessage(ModuleMessageKeys.UpgradeRequired, "");
            }
        };
        BaseMessagesProvider.prototype.getApplicationUpgradeFailedOnResourcesMessage = function () {
            return this.getMessage(ModuleMessageKeys.UpgradeFailedOnResources, "");
        };
        BaseMessagesProvider.prototype.getApplicationUpgradeFailedOnDataModelMessage = function () {
            return this.getMessage(ModuleMessageKeys.UpgradeFailedOnDataModel, "");
        };
        BaseMessagesProvider.prototype.getApplicationUpgradeFailedUnknownMessage = function () {
            return this.getMessage(ModuleMessageKeys.UpgradeFailed, "");
        };
        BaseMessagesProvider.prototype.getMessage = function (key, defaultMessage) {
            var _a;
            var msg = (_a = this.messages[key]) !== null && _a !== void 0 ? _a : defaultMessage;
            var translationSvc = Injector_1.default.resolve(KnownServices_1.ServiceNames.TranslationsService);
            if (translationSvc) {
                return translationSvc.getMessage(key, msg);
            }
            else {
                return msg;
            }
        };
        BaseMessagesProvider.prototype.setMessage = function (key, value) {
            this.messages[key] = value;
        };
        return BaseMessagesProvider;
    }());
    exports.BaseMessagesProvider = BaseMessagesProvider;
});
//# sourceMappingURL=LanguageResources.js.map;
define('OutSystems/ClientRuntime/Model',["require", "exports", "tslib", "./DataConversion", "./DataTypes", "./Logger", "./WidgetNaming"], function (require, exports, tslib_1, DataConversion_1, DataTypes_1, Logger, WidgetNaming_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModelFactory = exports.DummyViewModel = exports.VariablelessViewModel = exports.calculateDataFetchStatus = exports.BaseViewModel = exports.AggregateRecord = exports.DataSourceRecord = exports.BaseWidgetRecordMap = exports.ValidationWidgetRecord = exports.WidgetRecord = exports.Variable = void 0;
    var WIDGET_RECORD_ID_ATTR = "idAttr";
    var WIDGET_RECORD_NAME_ATTR = "nameAttr";
    var VALIDATION_WIDGET_RECORD_VALID_ATTR = "validAttr";
    var VALIDATION_WIDGET_RECORD_VALIDATIONMSG_ATTR = "validationMessageAttr";
    var Variable = (function () {
        function Variable(type, _value, setter, model) {
            this.type = type;
            this._value = _value;
            this.setter = setter;
            this.model = model;
        }
        Object.defineProperty(Variable.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                var convertedValue = DataConversion_1.JSConversions.convertTo(value, this.type);
                this.setter(convertedValue);
                this.model.flush();
            },
            enumerable: false,
            configurable: true
        });
        Variable.prototype.isAcceptable = function (value) {
            return DataConversion_1.JSConversions.isConvertibleTo(value, this.type);
        };
        Variable.prototype.fastEquals = function (other) {
            return other && this.constructor === other.constructor && this.value === other.value;
        };
        Variable.prototype.equals = function (other) {
            return other && this.constructor === other.constructor && (0, DataTypes_1.equals)(this.value, other.value);
        };
        return Variable;
    }());
    exports.Variable = Variable;
    var WidgetRecord = (function (_super) {
        tslib_1.__extends(WidgetRecord, _super);
        function WidgetRecord(defaults) {
            return _super.call(this, defaults) || this;
        }
        Object.defineProperty(WidgetRecord.prototype, "idAttr", {
            get: function () {
                return this.getBasicProperty(WIDGET_RECORD_ID_ATTR);
            },
            set: function (value) {
                this.setBasicProperty(WIDGET_RECORD_ID_ATTR, value, DataTypes_1.DataTypes.Text);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetRecord.prototype, "nameAttr", {
            get: function () {
                return this.getBasicProperty(WIDGET_RECORD_NAME_ATTR);
            },
            set: function (value) {
                this.setBasicProperty(WIDGET_RECORD_NAME_ATTR, value, DataTypes_1.DataTypes.Text);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetRecord.prototype, "generationNode", {
            get: function () {
                return this.getBasicProperty(WidgetRecord.WidgetGenerationNodeAttributeName);
            },
            set: function (node) {
                this.setBasicProperty(WidgetRecord.WidgetGenerationNodeAttributeName, node, DataTypes_1.DataTypes.Object);
            },
            enumerable: false,
            configurable: true
        });
        WidgetRecord.prototype.asReadOnly = function () {
            return {
                idAttr: this.idAttr,
                nameAttr: this.nameAttr,
            };
        };
        WidgetRecord.prototype.refreshGeneration = function () {
            if (this.generationNode) {
                this.generationNode.generation = GenerationsTree.currentGeneration;
            }
        };
        WidgetRecord.WidgetGenerationNodeAttributeName = "widgetGenerationNode";
        WidgetRecord.RecordClass = DataTypes_1.Record.defineRecordClass({
            idAttr: "",
            nameAttr: "",
            widgetGenerationNode: null,
        });
        return WidgetRecord;
    }(DataTypes_1.Record));
    exports.WidgetRecord = WidgetRecord;
    function validationWidgetRecordAsReadOnly(data) {
        return {
            idAttr: data.get(WIDGET_RECORD_ID_ATTR),
            nameAttr: data.get(WIDGET_RECORD_NAME_ATTR),
            validAttr: data.get(VALIDATION_WIDGET_RECORD_VALID_ATTR),
            validationMessageAttr: data.get(VALIDATION_WIDGET_RECORD_VALIDATIONMSG_ATTR),
        };
    }
    var ValidationWidgetRecord = (function (_super) {
        tslib_1.__extends(ValidationWidgetRecord, _super);
        function ValidationWidgetRecord(defaults) {
            return _super.call(this, defaults) || this;
        }
        Object.defineProperty(ValidationWidgetRecord.prototype, "validAttr", {
            get: function () {
                return this.getBasicProperty(VALIDATION_WIDGET_RECORD_VALID_ATTR);
            },
            set: function (value) {
                this.setBasicProperty(VALIDATION_WIDGET_RECORD_VALID_ATTR, value, DataTypes_1.DataTypes.Boolean);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ValidationWidgetRecord.prototype, "validationMessageAttr", {
            get: function () {
                return this.getBasicProperty(VALIDATION_WIDGET_RECORD_VALIDATIONMSG_ATTR);
            },
            set: function (value) {
                this.setBasicProperty(VALIDATION_WIDGET_RECORD_VALIDATIONMSG_ATTR, value, DataTypes_1.DataTypes.Text);
            },
            enumerable: false,
            configurable: true
        });
        ValidationWidgetRecord.prototype.onPropertyValueChanged = function (propertyName) {
            if (propertyName === VALIDATION_WIDGET_RECORD_VALID_ATTR ||
                propertyName === VALIDATION_WIDGET_RECORD_VALIDATIONMSG_ATTR) {
                this.refreshGeneration();
            }
        };
        ValidationWidgetRecord.prototype.asReadOnly = function () {
            return validationWidgetRecordAsReadOnly(this.data);
        };
        ValidationWidgetRecord.RecordClass = (function () {
            var record = new WidgetRecord.RecordClass().toJS();
            record.validAttr = true;
            record.validationMessageAttr = "";
            return DataTypes_1.Record.defineRecordClass(record);
        })();
        return ValidationWidgetRecord;
    }(WidgetRecord));
    exports.ValidationWidgetRecord = ValidationWidgetRecord;
    var BaseWidgetRecordMap = (function (_super) {
        tslib_1.__extends(BaseWidgetRecordMap, _super);
        function BaseWidgetRecordMap(defaults) {
            var _this = _super.call(this, defaults) || this;
            _this.widgetsIdToRecord = _this.data.get(BaseWidgetRecordMap.WidgetRecordsAttribute);
            _this.widgetsIdToRecordDataCache = _this.data.get(BaseWidgetRecordMap.WidgetRecordsDataCacheAttribute);
            return _this;
        }
        BaseWidgetRecordMap.createDefaultData = function () {
            return new BaseWidgetRecordMap.RecordClass({
                records: new Map(),
                recordsCache: new Map(),
            });
        };
        BaseWidgetRecordMap.getWidgetsType = function () {
            return {};
        };
        BaseWidgetRecordMap.prototype.getWidgetsType = function () {
            return this.constructor.getWidgetsType();
        };
        BaseWidgetRecordMap.prototype.getWidgetRecordType = function (widgetName) {
            return this.getWidgetsType()[widgetName] || WidgetRecord;
        };
        BaseWidgetRecordMap.prototype.get = function (widgetId) {
            var record = this.widgetsIdToRecord.get(widgetId);
            if (record) {
                return record;
            }
            record = this.create(widgetId);
            this.add(record);
            return record;
        };
        BaseWidgetRecordMap.prototype.set = function (widgetId, widgetRecord) {
            this.widgetsIdToRecord.set(widgetId, widgetRecord);
            this.widgetsIdToRecordDataCache.delete(widgetId);
            this.writePropagate(this.data, null);
        };
        BaseWidgetRecordMap.prototype.internalSet = function (widgetId, widgetRecordData) {
            this.widgetsIdToRecord.delete(widgetId);
            this.widgetsIdToRecordDataCache.set(widgetId, widgetRecordData);
            this.writePropagate(this.data, null);
        };
        BaseWidgetRecordMap.prototype.create = function (widgetId) {
            var widgetName = WidgetNaming_1.WidgetIdService.nameFromId(widgetId);
            var recordType = this.getWidgetRecordType(widgetName);
            var recordData = this.widgetsIdToRecordDataCache.get(widgetId);
            var record = new recordType(recordData);
            record.idAttr = widgetId;
            record.nameAttr = widgetName;
            return record;
        };
        BaseWidgetRecordMap.prototype.add = function (record) {
            BaseWidgetRecordMap.setPropagationHandler(record, this, record.idAttr, this.internalSet);
            this.widgetsIdToRecordDataCache.delete(record.idAttr);
            this.widgetsIdToRecord.set(record.idAttr, record);
        };
        BaseWidgetRecordMap.prototype.remove = function (widgetId) {
            this.widgetsIdToRecord.delete(widgetId);
            this.widgetsIdToRecordDataCache.delete(widgetId);
            this.writePropagate(this.data, null);
        };
        BaseWidgetRecordMap.WidgetRecordsAttribute = "records";
        BaseWidgetRecordMap.WidgetRecordsDataCacheAttribute = "recordsCache";
        BaseWidgetRecordMap.RecordClass = DataTypes_1.Record.defineRecordClass({
            records: null,
            recordsCache: null,
        });
        return BaseWidgetRecordMap;
    }(DataTypes_1.Record));
    exports.BaseWidgetRecordMap = BaseWidgetRecordMap;
    var DataSourceRecord = (function (_super) {
        tslib_1.__extends(DataSourceRecord, _super);
        function DataSourceRecord() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DataSourceRecord.prototype, "dataFetchStatusAttr", {
            get: function () {
                return this.getBasicProperty(DataSourceRecord.DataFetchStatusAttributeName);
            },
            set: function (value) {
                this.setBasicProperty(DataSourceRecord.DataFetchStatusAttributeName, value, DataTypes_1.DataTypes.Integer);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataSourceRecord.prototype, "isDataFetchedAttr", {
            get: function () {
                return this.dataFetchStatusAttr === 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataSourceRecord.prototype, "hasFetchErrorAttr", {
            get: function () {
                return this.dataFetchStatusAttr === 2;
            },
            enumerable: false,
            configurable: true
        });
        DataSourceRecord.attributesToDeclare = function () {
            return [
                DataTypes_1.GenericRecord.attr("DataFetchStatus", DataSourceRecord.DataFetchStatusAttributeName, "", true, false, DataTypes_1.DataTypes.Integer, function () { return 0; }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        DataSourceRecord.prototype.replaceWith = function (other) {
            var newDataSourceRecord = new this.constructor(DataTypes_1.Record.getData(other));
            newDataSourceRecord.dataFetchStatusAttr = this.dataFetchStatusAttr;
            this.writePropagate(DataTypes_1.Record.getData(newDataSourceRecord), new DataTypes_1.Cache());
        };
        DataSourceRecord.DataFetchStatusAttributeName = "dataFetchStatusAttr";
        return DataSourceRecord;
    }(DataTypes_1.GenericRecord));
    exports.DataSourceRecord = DataSourceRecord;
    var AggregateRecord = (function (_super) {
        tslib_1.__extends(AggregateRecord, _super);
        function AggregateRecord() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AggregateRecord.prototype, "listOut", {
            get: function () {
                return this.getComplexProperty(AggregateRecord.ListOutAttributeName, this.getRecordListType());
            },
            set: function (value) {
                this.setComplexProperty(AggregateRecord.ListOutAttributeName, value, DataTypes_1.DataTypes.RecordList, this.getRecordListType());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AggregateRecord.prototype, "countOut", {
            get: function () {
                return this.getBasicProperty(AggregateRecord.CountOutAttributeName);
            },
            set: function (value) {
                this.setBasicProperty(AggregateRecord.CountOutAttributeName, value, DataTypes_1.DataTypes.LongInteger);
            },
            enumerable: false,
            configurable: true
        });
        AggregateRecord.prototype.bulkSet = function (listValue, dataFetchStatusValue, countValue) {
            var properties = [
                { name: AggregateRecord.ListOutAttributeName, value: listValue, isBasicType: false },
                { name: DataSourceRecord.DataFetchStatusAttributeName, value: dataFetchStatusValue, isBasicType: true },
            ];
            if (countValue !== undefined) {
                properties.push({ name: AggregateRecord.CountOutAttributeName, value: countValue, isBasicType: true });
            }
            this.setProperties(properties);
        };
        AggregateRecord.prototype.getRecordListType = function () {
            return this.constructor.RecordListType;
        };
        AggregateRecord.attributesToDeclare = function () {
            return [
                DataTypes_1.GenericRecord.attr("List", AggregateRecord.ListOutAttributeName, "List", true, false, DataTypes_1.DataTypes.RecordList, function () { return false; }, true, this.RecordListType),
                DataTypes_1.GenericRecord.attr("Count", AggregateRecord.CountOutAttributeName, "Count", true, false, DataTypes_1.DataTypes.LongInteger, function () { return DataTypes_1.LongInteger.defaultValue; }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        AggregateRecord.init = function () {
            if (!this.RecordListType) {
                throw new TypeError("AggregateRecords must define a RecordListType");
            }
            _super.init.call(this);
        };
        AggregateRecord.ListOutAttributeName = "listOut";
        AggregateRecord.CountOutAttributeName = "countOut";
        return AggregateRecord;
    }(DataSourceRecord));
    exports.AggregateRecord = AggregateRecord;
    var BaseViewModel = (function (_super) {
        tslib_1.__extends(BaseViewModel, _super);
        function BaseViewModel(_context) {
            var _this = _super.call(this) || this;
            _this._context = _context;
            _this.writeSubscriptions = [];
            _this.cachedValues = {};
            _this.modified = false;
            if (_this.hasVariables) {
                _this.variables;
            }
            if (_this.hasValidationWidgets) {
                _this.widgets;
            }
            return _this;
        }
        BaseViewModel.createDefaultData = function () {
            var variablesRecord = this.newVariablesRecord();
            var widgetsRecord = this.newWidgetsRecord();
            return new BaseViewModel.RecordClass({
                variables: DataTypes_1.Record.getData(variablesRecord),
                widgets: DataTypes_1.Record.getData(widgetsRecord),
                clientVariablesGeneration: 0,
                currentLocale: null,
            });
        };
        BaseViewModel.prototype.onDefaultWritePropagate = function (arg) {
            _super.prototype.onDefaultWritePropagate.call(this, arg);
            this.modified = true;
            this.innerFlush(true);
        };
        BaseViewModel.prototype.cloneCache = function () {
            return this.cache;
        };
        Object.defineProperty(BaseViewModel.prototype, "isModified", {
            get: function () {
                return this.modified;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.prototype.scheduleFlush = function () {
            var _this = this;
            if (!this.pendingFlush) {
                this.pendingFlush = setTimeout(function () { return _this.flush(); }, 0);
            }
        };
        BaseViewModel.prototype.flush = function () {
            if (this.pendingFlush) {
                clearTimeout(this.pendingFlush);
                this.pendingFlush = undefined;
            }
            if (this.modified) {
                this.modified = false;
                GenerationsTree.currentGeneration++;
                this.innerFlush(false);
                Logger.trace(this, "Flushing model on ".concat(this.displayName));
            }
        };
        Object.defineProperty(BaseViewModel.prototype, "displayName", {
            get: function () {
                return "".concat(this.context.viewName).concat(this.context.componentName && this.context.componentName !== this.context.viewName
                    ? "/".concat(this.context.componentName)
                    : "");
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.prototype.innerFlush = function (immediate) {
            for (var i = 0; i < this.writeSubscriptions.length; i++) {
                var registration = this.writeSubscriptions[i];
                if (registration.immediate === immediate) {
                    registration.handler(this);
                }
            }
        };
        BaseViewModel.prototype.subscribeWrites = function (handler, notifyImmediatly) {
            if (notifyImmediatly === void 0) { notifyImmediatly = false; }
            if (this.hasVariables ||
                this.hasValidationWidgets ||
                this.currentLocale !== null ||
                this.currentLocale !== undefined) {
                if (!!handler) {
                    this.writeSubscriptions.push({ handler: handler, immediate: notifyImmediatly });
                    return true;
                }
            }
            return false;
        };
        BaseViewModel.prototype.unsubscribeWrites = function (handler) {
            if (!!handler) {
                var idx = -1;
                for (var i = 0, l = this.writeSubscriptions.length; i < l; i++) {
                    if (this.writeSubscriptions[i].handler === handler) {
                        idx = i;
                        break;
                    }
                }
                if (idx >= 0) {
                    this.writeSubscriptions.splice(idx, 1);
                    return true;
                }
            }
            return false;
        };
        BaseViewModel.prototype.clearSubscriptions = function () {
            this.writeSubscriptions = [];
        };
        Object.defineProperty(BaseViewModel, "hasVariables", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewModel.prototype, "hasVariables", {
            get: function () {
                return this.constructor.hasVariables;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.getVariablesRecordConstructor = function () {
            throw new Error("@abstract");
        };
        BaseViewModel.newVariablesRecord = function (data) {
            if (this.hasVariables) {
                return new (this.getVariablesRecordConstructor())(data);
            }
            else {
                return undefined;
            }
        };
        BaseViewModel.prototype.getVariables = function () {
            var classDef = this.constructor;
            if (this.hasVariables) {
                return this.getComplexProperty(BaseViewModel.VariablesPropertyName, classDef.getVariablesRecordConstructor());
            }
            else {
                throw new Error("Model does not contain variables");
            }
        };
        Object.defineProperty(BaseViewModel.prototype, "variables", {
            get: function () {
                return this.getVariables();
            },
            set: function (value) {
                var classDef = this.constructor;
                this.setComplexProperty(BaseViewModel.VariablesPropertyName, value, DataTypes_1.DataTypes.Record, classDef.getVariablesRecordConstructor());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewModel.prototype, "clientVariablesGeneration", {
            get: function () {
                return this.getBasicProperty(BaseViewModel.ClientVariablesGenerationPropertyName);
            },
            set: function (value) {
                this.setBasicProperty(BaseViewModel.ClientVariablesGenerationPropertyName, value, DataTypes_1.DataTypes.Integer);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewModel, "hasValidationWidgets", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewModel.prototype, "hasValidationWidgets", {
            get: function () {
                return this.constructor.hasValidationWidgets;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseViewModel.prototype, "currentLocale", {
            get: function () {
                return this.getBasicProperty(BaseViewModel.CurrentLocalePropertyName);
            },
            set: function (value) {
                if (this.currentLocale !== value) {
                    this.clearCachedValues();
                }
                this.setBasicProperty(BaseViewModel.CurrentLocalePropertyName, value, DataTypes_1.DataTypes.Text);
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.getWidgetsRecordConstructor = function () {
            throw new Error("@abstract");
        };
        BaseViewModel.newWidgetsRecord = function (data) {
            if (this.hasValidationWidgets) {
                return new (this.getWidgetsRecordConstructor())(data);
            }
            else {
                return undefined;
            }
        };
        BaseViewModel.prototype.getWidgets = function () {
            var classDef = this.constructor;
            if (this.hasValidationWidgets) {
                return this.getComplexProperty(BaseViewModel.WidgetsPropertyName, classDef.getWidgetsRecordConstructor());
            }
            else {
                throw new Error("Model does not contain validation widgets");
            }
        };
        Object.defineProperty(BaseViewModel.prototype, "widgets", {
            get: function () {
                return this.getWidgets();
            },
            set: function (value) {
                this.setComplexProperty(BaseViewModel.WidgetsPropertyName, value, DataTypes_1.DataTypes.Object);
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.prototype.hasCachedValue = function (key) {
            return this.cachedValues.hasOwnProperty(key);
        };
        BaseViewModel.prototype.getCachedValue = function (key, getValue) {
            var deferredArgs = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                deferredArgs[_i - 2] = arguments[_i];
            }
            var expr = this.cachedValues[key];
            var valueArgs = deferredArgs.map(function (deferred, i) {
                try {
                    return deferred();
                }
                catch (ex) {
                    return BaseViewModel.InvalidValue;
                }
            });
            var useCachedValue = expr !== undefined &&
                deferredArgs.length === expr.args.length &&
                valueArgs.every(function (e, i) { return e === expr.args[i]; });
            if (!useCachedValue) {
                expr = { args: valueArgs, value: getValue() };
                this.cachedValues[key] = expr;
            }
            return expr.value;
        };
        BaseViewModel.prototype.clearCachedValues = function () {
            this.cachedValues = {};
        };
        BaseViewModel.prototype.createVariable = function (type, defaultValue, setter) {
            return new Variable(type, defaultValue, setter, this);
        };
        BaseViewModel.prototype.fromOther = function (otherModel) {
            this.fromImmutableData(otherModel.data);
        };
        BaseViewModel.prototype.toImmutableData = function () {
            return this.data;
        };
        BaseViewModel.prototype.fromImmutableData = function (data) {
            this.data = data;
            this.writePropagate(this.data, this.cache);
            this.cache.invalidate();
        };
        BaseViewModel.prototype.setInputs = function (obj) {
            throw new Error("@abstract");
        };
        Object.defineProperty(BaseViewModel.prototype, "widgetsGenerationsTree", {
            get: function () {
                if (!this._widgetsGenerationsTree) {
                    this._widgetsGenerationsTree = new GenerationsTree();
                }
                return this._widgetsGenerationsTree;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.prototype.getReadOnlyWidgetRecord = function (widgetId) {
            return this.widgets.get(widgetId).asReadOnly();
        };
        Object.defineProperty(BaseViewModel.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: false,
            configurable: true
        });
        BaseViewModel.prototype.sanitize = function (data) {
            var newData = data;
            if (this.hasVariables) {
                if (data.constructor !== this.data.constructor) {
                    throw new Error("Expected data to be the same type of this model data");
                }
                var nonSerializableAttributes = this.variables.getNonSerializableAttributes();
                if (nonSerializableAttributes.length > 0) {
                    var variables_1 = newData.get(BaseViewModel.VariablesPropertyName);
                    nonSerializableAttributes.forEach(function (a) { return (variables_1 = variables_1.set(a, null)); });
                    newData = newData.set(BaseViewModel.VariablesPropertyName, variables_1);
                }
            }
            return newData;
        };
        BaseViewModel.VariablesPropertyName = "variables";
        BaseViewModel.WidgetsPropertyName = "widgets";
        BaseViewModel.ClientVariablesGenerationPropertyName = "clientVariablesGeneration";
        BaseViewModel.CurrentLocalePropertyName = "currentLocale";
        BaseViewModel.InvalidValue = new Object();
        BaseViewModel.RecordClass = DataTypes_1.Record.defineRecordClass({
            variables: null,
            widgets: null,
            clientVariablesGeneration: 0,
            currentLocale: null,
        });
        return BaseViewModel;
    }(DataTypes_1.Record));
    exports.BaseViewModel = BaseViewModel;
    function calculateDataFetchStatus() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var status = 1;
        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
            var value = values_1[_a];
            switch (value) {
                case 2:
                    return 2;
                case 0:
                    status = 0;
                    break;
                default:
                    break;
            }
        }
        return status;
    }
    exports.calculateDataFetchStatus = calculateDataFetchStatus;
    var VariablelessViewModel = (function (_super) {
        tslib_1.__extends(VariablelessViewModel, _super);
        function VariablelessViewModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(VariablelessViewModel, "hasVariables", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        VariablelessViewModel.prototype.setInputs = function () { };
        return VariablelessViewModel;
    }(BaseViewModel));
    exports.VariablelessViewModel = VariablelessViewModel;
    var DummyViewModel = (function (_super) {
        tslib_1.__extends(DummyViewModel, _super);
        function DummyViewModel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DummyViewModel, "hasVariables", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DummyViewModel, "hasValidationWidgets", {
            get: function () {
                return false;
            },
            enumerable: false,
            configurable: true
        });
        DummyViewModel.prototype.setInputs = function () { };
        DummyViewModel.create = function (viewName, componentName, navigatedFromHistory, viewWasRestoredFromCache) {
            return new DummyViewModel({
                viewName: viewName,
                componentName: componentName,
                navigatedFromHistory: navigatedFromHistory,
                viewWasRestoredFromCache: viewWasRestoredFromCache,
            });
        };
        return DummyViewModel;
    }(BaseViewModel));
    exports.DummyViewModel = DummyViewModel;
    var ModelFactory = (function () {
        function ModelFactory(modelClass, componentName) {
            if (componentName === void 0) { componentName = ""; }
            this.modelClass = modelClass;
            this.componentName = componentName;
        }
        ModelFactory.prototype.create = function (context) {
            if (context) {
                context.componentName = this.componentName;
            }
            if (!this.modelClass.hasVariables && !this.modelClass.hasValidationWidgets) {
                return new DummyViewModel(context);
            }
            return new this.modelClass(context);
        };
        Object.defineProperty(ModelFactory.prototype, "hasValidationWidgets", {
            get: function () {
                return this.modelClass.hasValidationWidgets;
            },
            enumerable: false,
            configurable: true
        });
        return ModelFactory;
    }());
    exports.ModelFactory = ModelFactory;
    var GenerationNode = (function () {
        function GenerationNode(_parent) {
            this._parent = _parent;
            this._generation = _parent ? _parent.generation : 0;
        }
        Object.defineProperty(GenerationNode.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GenerationNode.prototype, "generation", {
            get: function () {
                return this._generation;
            },
            set: function (value) {
                if (this.generation < value) {
                    this._generation = value;
                    if (this.parent) {
                        this.parent.generation = value;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        GenerationNode.prototype.addChild = function () {
            return new GenerationNode(this);
        };
        return GenerationNode;
    }());
    var GenerationsTree = (function () {
        function GenerationsTree() {
            this._root = new GenerationNode(null);
            this._root.generation = GenerationsTree.currentGeneration;
            GenerationsTree.currentGeneration++;
        }
        Object.defineProperty(GenerationsTree.prototype, "root", {
            get: function () {
                return this._root;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GenerationsTree, "currentGeneration", {
            get: function () {
                return GenerationsTree.generation;
            },
            set: function (value) {
                GenerationsTree.generation = value;
            },
            enumerable: false,
            configurable: true
        });
        GenerationsTree.generation = 0;
        return GenerationsTree;
    }());
});
//# sourceMappingURL=Model.js.map;
define('OutSystems/ClientRuntime/modules/Database/WebSQL/WebSQLUtils',["require", "exports", "../../../Exceptions", "../../../RegExpHelper"], function (require, exports, Exceptions_1, RegExpHelper) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAttributeFromOrderBy = exports.validateQueryOrderBy = exports.getOrderByColumnsWithoutDuplicates = exports.replaceEntityReferencesInOrderBy = void 0;
    function replaceEntityReferencesInOrderBy(paramValue, entityNames, entityAliases) {
        var ret = null;
        var mc = null;
        var m = null;
        var regExpToDetectNotAllowedPrefix = '(^|\\s|\\.)(\\[|"|)(ossys_|osltm_|oslog_|osevt_|osusr_|osext_)';
        var regExpToDetectInputDynSort = "((((\\{\\w+\\})|(\\w+)).)?((\\[\\w+\\])|(\\w+))(( )+(desc|asc))?)(( )*,( )*(((\\{\\w+\\})|(\\w+)).)?((\\[\\w+\\])|(\\w+))(( )+(desc|asc))?)*";
        paramValue = paramValue.trim();
        mc = RegExpHelper.matches(paramValue, regExpToDetectNotAllowedPrefix, true);
        if (mc.length > 0) {
            m = mc[0];
            throw new Exceptions_1.Exceptions.DataBaseException("", "'".concat(m.groups[2] + m.groups[3], "' found in 'Order By' parameter is a reserved prefix"));
        }
        if (paramValue !== "") {
            mc = RegExpHelper.matches(paramValue, regExpToDetectInputDynSort, true);
            if (mc.length !== 1 || mc[0].value !== paramValue) {
                throw new Exceptions_1.Exceptions.DataBaseException("", "Invalid syntax in 'Order By' parameter.");
            }
        }
        var meReplaceEntityName = function (match) {
            return replaceEntityNameInOrderBy(match, entityNames, entityAliases);
        };
        var meReplaceAttributeName = function (match) {
            return replaceAttributeName(match);
        };
        ret = RegExpHelper.replace(paramValue, "(\\{\\w+\\}|\\w+\\.)", false, meReplaceEntityName);
        ret = RegExpHelper.replace(ret, "(\\[\\w+\\])", false, meReplaceAttributeName);
        return ret;
    }
    exports.replaceEntityReferencesInOrderBy = replaceEntityReferencesInOrderBy;
    function replaceEntityNameInOrderBy(m, entityNames, entityAliases) {
        var result = "";
        var entityName = getEntityNameFromMatch(m);
        var found = false;
        for (var i = 0; i < entityNames.length; i++) {
            if (entityNames[i].toLowerCase() === entityName.toLowerCase()) {
                found = true;
                result = '"' + entityAliases[i] + '"';
                break;
            }
        }
        if (!found) {
            throw new Exceptions_1.Exceptions.DataBaseException("", "'".concat(entityName, "' found in 'Order By' parameter is an invalid Entity"));
        }
        if (m.value.charAt(m.value.length - 1) === ".") {
            return result + ".";
        }
        else {
            return result;
        }
    }
    function replaceAttributeName(m) {
        var result = m.value.substr(1, m.value.length - 2);
        return !result
            ? ""
            : (result.charAt(0) === '"' ? "" : '"') + result + (result.charAt(result.length - 1) === '"' ? "" : '"');
    }
    function getEntityNameFromMatch(m) {
        if (m.value.charAt(m.value.length - 1) === ".") {
            return m.value.substr(0, m.value.length - 1);
        }
        else {
            return m.value.substr(1, m.value.length - 2);
        }
    }
    function getOrderByColumnsWithoutDuplicates(orderByColumns) {
        return filterDuplicateOrderByColumns(orderByColumns).join(", ");
    }
    exports.getOrderByColumnsWithoutDuplicates = getOrderByColumnsWithoutDuplicates;
    function filterDuplicateOrderByColumns(orderByColumns) {
        var result = [];
        var usedColumns = {};
        orderByColumns.forEach(function (col) {
            var trimmed = col.trim();
            if (trimmed !== "") {
                var invariant = trimmed
                    .replace(new RegExp("\b((ASC)|(DESC))$", "im"), "")
                    .replace('"', "")
                    .replace("[", "")
                    .replace("]", "")
                    .trim()
                    .toLowerCase();
                if (usedColumns[invariant] !== true) {
                    result.push(trimmed);
                    usedColumns[invariant] = true;
                }
            }
        });
        return result;
    }
    function validateQueryOrderBy(entitiesInfo, orderByColumns) {
        orderByColumns.forEach(function (orderBy) {
            var attr = getAttributeFromOrderBy(orderBy);
            for (var index = 0; index < entitiesInfo.length; index++) {
                var ent = entitiesInfo[index];
                if (ent.attributes.some(function (at) { return at.name.toLowerCase() === attr.toLowerCase(); })) {
                    return true;
                }
            }
            throw new Exceptions_1.Exceptions.DataBaseException("", "Invalid attribute in 'Order By' parameter: ".concat(orderBy));
        });
        return true;
    }
    exports.validateQueryOrderBy = validateQueryOrderBy;
    function getAttributeFromOrderBy(orderBy) {
        var parts = orderBy.trim().split(" ");
        var attrParts = parts[0].split(".");
        return attrParts[attrParts.length - 1].replace(/["]+/g, "");
    }
    exports.getAttributeFromOrderBy = getAttributeFromOrderBy;
});
//# sourceMappingURL=WebSQLUtils.js.map;
define('OutSystems/ClientRuntime/ScriptsManager',["require", "exports", "./Logger", "./Settings"], function (require, exports, Logger, Settings_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scheduleCustomJsLoading = exports.addScript = exports.getNumberOfScriptLoadRetries = exports.setNumberOfScriptLoadRetries = exports.clearScripts = void 0;
    var SCRIPT_FINISHED_ATTR = "data-os-finished";
    var SCRIPTS_MANAGER_MODULE_NAME = "ScriptsManager";
    var managedScripts = new Map();
    function clearScripts() {
        managedScripts.clear();
        lastAddedScript = null;
    }
    exports.clearScripts = clearScripts;
    function createScriptElement(scriptURL, dom) {
        var scriptElement = dom.createElement("script");
        scriptElement.async = false;
        scriptElement.setAttribute("src", scriptURL);
        scriptElement.setAttribute(SCRIPT_FINISHED_ATTR, "false");
        return scriptElement;
    }
    function retryOnErrorScript(dom, scriptElement, scriptURL, onFinish, retriesLeft, onRetry) {
        return new Promise(function (resolve, reject) {
            if (retriesLeft === 0) {
                onFinish();
                reject("Error adding script '".concat(scriptURL, "' to document '").concat(dom.baseURI, "'. No retries left."));
                scriptElement.parentNode.removeChild(scriptElement);
                lastAddedScript = null;
                return;
            }
            onRetry === null || onRetry === void 0 ? void 0 : onRetry();
            trace("Error while loading script", scriptURL, "\nRetrying...");
            var newScript = createScriptElement(scriptURL, dom);
            newScript.onerror = function () {
                retryOnErrorScript(dom, newScript, scriptURL, onFinish, retriesLeft - 1, onRetry)
                    .then(resolve)
                    .catch(reject);
            };
            newScript.onabort = scriptElement.onabort;
            newScript.onload = scriptElement.onload;
            var scriptParentNode = scriptElement.parentNode;
            var scriptNextSibling = scriptElement.nextElementSibling;
            scriptElement.parentNode.removeChild(scriptElement);
            if (scriptNextSibling) {
                scriptParentNode.insertBefore(newScript, scriptNextSibling);
            }
            else {
                scriptParentNode.appendChild(newScript);
            }
        });
    }
    var numberOfScriptLoadRetries = 3;
    function setNumberOfScriptLoadRetries(value) {
        Logger.trace(SCRIPTS_MANAGER_MODULE_NAME, "Setting number of script's load retries to ".concat(value));
        numberOfScriptLoadRetries = value;
    }
    exports.setNumberOfScriptLoadRetries = setNumberOfScriptLoadRetries;
    function getNumberOfScriptLoadRetries() {
        return numberOfScriptLoadRetries;
    }
    exports.getNumberOfScriptLoadRetries = getNumberOfScriptLoadRetries;
    var initialized = false;
    var lastAddedScript = null;
    function addScript(scriptURL, onRetry, dom) {
        if (dom === void 0) { dom = document; }
        trace("Adding script", scriptURL);
        initialize(dom);
        var scriptInfo = managedScripts.get(scriptURL);
        if (scriptInfo) {
            trace("Script already added", scriptURL);
            return scriptInfo.promise;
        }
        var scriptElement = createScriptElement(scriptURL, dom);
        var loadScriptPromise = new Promise(function (resolve, reject) {
            var onFinish = function () {
                scriptElement.setAttribute(SCRIPT_FINISHED_ATTR, "true");
            };
            scriptElement.onerror = function () {
                var numRetries = (0, Settings_1.getEnvParams)().CDNFilenameVersioning ? numberOfScriptLoadRetries : 0;
                retryOnErrorScript(dom, scriptElement, scriptURL, onFinish, numRetries, onRetry)
                    .then(resolve)
                    .catch(reject);
            };
            scriptElement.onabort = function () {
                onFinish();
                reject("Aborted due to user action. Error adding script '".concat(scriptURL, "' to document '").concat(dom.baseURI, "'"));
            };
            scriptElement.onload = function (ev) {
                trace("Script added", scriptURL);
                onFinish();
                resolve(ev);
            };
        });
        if (lastAddedScript) {
            lastAddedScript.domElement.parentNode.insertBefore(scriptElement, lastAddedScript.domElement.nextSibling);
        }
        else {
            dom.head.appendChild(scriptElement);
        }
        managedScripts.set(scriptURL, {
            promise: loadScriptPromise,
            domElement: scriptElement,
        });
        lastAddedScript = managedScripts.get(scriptURL);
        return loadScriptPromise;
    }
    exports.addScript = addScript;
    function trace(message, script, extraInfo) {
        if (extraInfo === void 0) { extraInfo = ""; }
        Logger.trace(SCRIPTS_MANAGER_MODULE_NAME, "".concat(message, " '").concat(script, "' : document '").concat(document.baseURI, "'").concat(extraInfo));
    }
    function initialize(dom) {
        if (initialized) {
            return;
        }
        initialized = true;
        Object.defineProperty(define, "amd", {
            get: hideRequireDependingOnCaller.bind(this, define.amd, dom),
            configurable: true,
        });
    }
    function hideRequireDependingOnCaller(amd, dom) {
        var thisScript = dom.currentScript;
        if (thisScript && thisScript.hasAttribute(SCRIPT_FINISHED_ATTR)) {
            return undefined;
        }
        return amd;
    }
    function scheduleCustomJsLoading(urls, onErrorLoadingScript, onRetryLoadingScript, dom) {
        if (dom === void 0) { dom = document; }
        return Promise.all(urls.map(function (s) { return addScript(s, onRetryLoadingScript, dom).catch(onErrorLoadingScript); }));
    }
    exports.scheduleCustomJsLoading = scheduleCustomJsLoading;
});
//# sourceMappingURL=ScriptsManager.js.map;
define('OutSystems/ClientRuntime/SystemActions',["require", "exports", "tslib", "./DataTypes", "./Injector", "./Injector/KnownServices", "./Logger", "./Navigation", "./ScriptsManager"], function (require, exports, tslib_1, DataTypes, Injector_1, KnownServices_1, Logger, Navigation, ScriptsManager) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setCurrentLocale = exports.logMessage = exports.requireScript = exports.listIndexOf = exports.listSort = exports.listFilter = exports.listAny = exports.listAll = exports.listDistinct = exports.listDuplicate = exports.listAppendAll = exports.listRemove = exports.listInsert = exports.listClear = exports.listAppend = void 0;
    var ListDuplicateOutputTypeFactory = new DataTypes.ComplexTypeKeyedTypeFactory("DuplicatedList", "duplicatedListOut");
    var ListFilterOutputTypeFactory = new DataTypes.ComplexTypeKeyedTypeFactory("FilteredList", "filteredListOut");
    var ListDistinctOutputTypeFactory = new DataTypes.ComplexTypeKeyedTypeFactory("DistinctList", "distinctListOut");
    var NullIterationContext = (function () {
        function NullIterationContext() {
        }
        NullIterationContext.prototype.getCurrentRowNumber = function (list) {
            return 0;
        };
        NullIterationContext.prototype.setCurrentRowNumber = function (list, newCurrentRowNumber) { };
        NullIterationContext.prototype.isBeingIterated = function (list) {
            return false;
        };
        NullIterationContext.prototype.registerIterationStart = function (list) { };
        NullIterationContext.prototype.registerIterationEnd = function (list) { };
        NullIterationContext.prototype.getIterator = function (list) {
            return null;
        };
        NullIterationContext.prototype.clone = function () {
            return this;
        };
        return NullIterationContext;
    }());
    function validateIterationState(list, iterationContext, opName) {
        if (iterationContext.isBeingIterated(list)) {
            throw new Error("List is being iterated: " + opName + " is not allowed");
        }
    }
    function wrapInIteration(list, iterationContext, operationName, body) {
        validateIterationState(list, iterationContext, operationName);
        try {
            iterationContext.registerIterationStart(list);
            return body();
        }
        finally {
            iterationContext.registerIterationEnd(list);
        }
    }
    function getIterationContextOrDefault(callContext) {
        if (callContext) {
            return callContext.iterationContext;
        }
        else {
            return new NullIterationContext();
        }
    }
    function listAppend(list, element, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        validateIterationState(list, iterationContext, "append");
        list.append(element);
    }
    exports.listAppend = listAppend;
    function listClear(list, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        validateIterationState(list, iterationContext, "clear");
        list.clear();
        iterationContext.setCurrentRowNumber(list, 0);
    }
    exports.listClear = listClear;
    function listInsert(list, element, position, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        validateIterationState(list, iterationContext, "insert");
        list.insert(position, element);
        var currentRowNumber = iterationContext.getCurrentRowNumber(list);
        if (list.length > 1 && position <= currentRowNumber) {
            iterationContext.setCurrentRowNumber(list, currentRowNumber + 1);
        }
    }
    exports.listInsert = listInsert;
    function listRemove(list, position, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        validateIterationState(list, iterationContext, "remove");
        var listWillBecomeEmpty = list.length === 1;
        var singleItem;
        if (listWillBecomeEmpty) {
            singleItem = list.getItem(0);
        }
        list.remove(position);
        if (listWillBecomeEmpty) {
            list.emptyListItem = singleItem;
        }
        var currentRowNumber = iterationContext.getCurrentRowNumber(list);
        if (position < currentRowNumber) {
            iterationContext.setCurrentRowNumber(list, currentRowNumber - 1);
        }
        else if (position === list.length) {
            iterationContext.setCurrentRowNumber(list, Math.max(0, list.length - 1));
        }
    }
    exports.listRemove = listRemove;
    function listAppendAll(list, listToAppend, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        validateIterationState(list, iterationContext, "appendAll");
        list.appendAll(listToAppend);
    }
    exports.listAppendAll = listAppendAll;
    function listDuplicate(sourceList, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        validateIterationState(sourceList, iterationContext, "duplicate");
        var result = new (ListDuplicateOutputTypeFactory.getType(sourceList.constructor))();
        result.duplicatedListOut = sourceList.clone();
        return result;
    }
    exports.listDuplicate = listDuplicate;
    function listDistinct(sourceList, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        return wrapInIteration(sourceList, iterationContext, "distinct", function () {
            var result = new (ListDistinctOutputTypeFactory.getType(sourceList.constructor))();
            result.distinctListOut = sourceList.distinct();
            return result;
        });
    }
    exports.listDistinct = listDistinct;
    var ListOperationBooleanResultRecord = (function (_super) {
        tslib_1.__extends(ListOperationBooleanResultRecord, _super);
        function ListOperationBooleanResultRecord(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        ListOperationBooleanResultRecord.attributesToDeclare = function () {
            return [
                this.attr("Result", "resultOut", "resultOut", true, true, DataTypes.DataTypes.Boolean, function () {
                    return;
                }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        ListOperationBooleanResultRecord._constructor = (function () {
            ListOperationBooleanResultRecord.init();
        })();
        return ListOperationBooleanResultRecord;
    }(DataTypes.GenericRecord));
    function listAll(list, condition, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        return wrapInIteration(list, iterationContext, "all", function () {
            var result = new ListOperationBooleanResultRecord();
            result.resultOut = list.all(condition);
            return result;
        });
    }
    exports.listAll = listAll;
    function listAny(list, condition, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        return wrapInIteration(list, iterationContext, "any", function () {
            var result = new ListOperationBooleanResultRecord();
            result.resultOut = list.any(condition);
            return result;
        });
    }
    exports.listAny = listAny;
    function listFilter(list, condition, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        return wrapInIteration(list, iterationContext, "filter", function () {
            var result = new (ListFilterOutputTypeFactory.getType(list.constructor))();
            result.filteredListOut = list.filter(condition);
            return result;
        });
    }
    exports.listFilter = listFilter;
    function listSort(list, by, ascending, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        return wrapInIteration(list, iterationContext, "sort", function () {
            list.sort(by, ascending);
        });
    }
    exports.listSort = listSort;
    var ListOperationNumberResultRecord = (function (_super) {
        tslib_1.__extends(ListOperationNumberResultRecord, _super);
        function ListOperationNumberResultRecord(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        ListOperationNumberResultRecord.attributesToDeclare = function () {
            return [
                this.attr("Position", "positionOut", "positionOut", true, true, DataTypes.DataTypes.Integer, function () {
                    return;
                }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        ListOperationNumberResultRecord._constructor = (function () {
            ListOperationNumberResultRecord.init();
        })();
        return ListOperationNumberResultRecord;
    }(DataTypes.GenericRecord));
    function listIndexOf(list, condition, callContext) {
        var iterationContext = getIterationContextOrDefault(callContext);
        return wrapInIteration(list, iterationContext, "indexOf", function () {
            var result = new ListOperationNumberResultRecord();
            result.positionOut = list.indexOf(condition);
            return result;
        });
    }
    exports.listIndexOf = listIndexOf;
    function requireScript(scriptURL, callContext) {
        var versionedScriptURL = Navigation.VersionedURL.getVersionedUrl(scriptURL);
        return ScriptsManager.addScript(versionedScriptURL);
    }
    exports.requireScript = requireScript;
    function logMessage(message, moduleName, callContext) {
        Logger.log(moduleName, message);
    }
    exports.logMessage = logMessage;
    function setCurrentLocale(locale, callContext, injector) {
        if (injector === void 0) { injector = Injector_1.default; }
        var localeService = injector.resolve(KnownServices_1.ServiceNames.LocaleService);
        if (!localeService) {
            throw new Error("Undefined locale service: can't set current locale.");
        }
        localeService.setCurrentLocale(locale);
    }
    exports.setCurrentLocale = setCurrentLocale;
});
//# sourceMappingURL=SystemActions.js.map;
define('OutSystems/ClientRuntime/SystemStructures',["require", "exports", "tslib", "./DataTypes"], function (require, exports, tslib_1, DataTypes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AttachmentRecordList = exports.AttachmentList = exports.AttachmentRecord = exports.AttachmentRec = void 0;
    var AttachmentRec = (function (_super) {
        tslib_1.__extends(AttachmentRec, _super);
        function AttachmentRec(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        AttachmentRec.attributesToDeclare = function () {
            return [
                this.attr("FileName", "fileNameAttr", "FileName", false, false, DataTypes_1.DataTypes.Text, function () {
                    return (0, DataTypes_1.defaultForType)(DataTypes_1.DataTypes.Text);
                }),
                this.attr("FileContent", "fileContentAttr", "FileContent", false, false, DataTypes_1.DataTypes.BinaryData, function () {
                    return (0, DataTypes_1.defaultForType)(DataTypes_1.DataTypes.BinaryData);
                }),
                this.attr("MimeType", "mimeTypeAttr", "MimeType", false, false, DataTypes_1.DataTypes.Text, function () {
                    return (0, DataTypes_1.defaultForType)(DataTypes_1.DataTypes.Text);
                }),
            ].concat(_super.attributesToDeclare.call(this));
        };
        AttachmentRec = tslib_1.__decorate([
            (0, DataTypes_1.RecordWithStaticConstructor)()
        ], AttachmentRec);
        return AttachmentRec;
    }(DataTypes_1.GenericRecord));
    exports.AttachmentRec = AttachmentRec;
    var AttachmentRecord = (function (_super) {
        tslib_1.__extends(AttachmentRecord, _super);
        function AttachmentRecord(defaults, cache) {
            return _super.call(this, defaults, cache) || this;
        }
        AttachmentRecord_1 = AttachmentRecord;
        AttachmentRecord.attributesToDeclare = function () {
            return [
                this.attr("Attachment", "attachmentAttr", "Attachment", false, false, DataTypes_1.DataTypes.Record, function () { return DataTypes_1.ImmutableBase.getData(new AttachmentRec()); }, AttachmentRec),
            ].concat(DataTypes_1.GenericRecord.attributesToDeclare());
        };
        var AttachmentRecord_1;
        AttachmentRecord._isAnonymousRecord = true;
        AttachmentRecord.fromStructure = function (str) {
            return new AttachmentRecord_1(new AttachmentRecord_1.RecordClass({
                attachmentAttr: DataTypes_1.ImmutableBase.getData(str),
            }));
        };
        AttachmentRecord = AttachmentRecord_1 = tslib_1.__decorate([
            (0, DataTypes_1.RecordWithStaticConstructor)()
        ], AttachmentRecord);
        return AttachmentRecord;
    }(DataTypes_1.GenericRecord));
    exports.AttachmentRecord = AttachmentRecord;
    var AttachmentList = (function (_super) {
        tslib_1.__extends(AttachmentList, _super);
        function AttachmentList(defaults) {
            return _super.call(this, defaults) || this;
        }
        AttachmentList.itemType = AttachmentRec;
        return AttachmentList;
    }(DataTypes_1.GenericRecordList));
    exports.AttachmentList = AttachmentList;
    var AttachmentRecordList = (function (_super) {
        tslib_1.__extends(AttachmentRecordList, _super);
        function AttachmentRecordList(defaults) {
            return _super.call(this, defaults) || this;
        }
        AttachmentRecordList.itemType = AttachmentRecord;
        return AttachmentRecordList;
    }(DataTypes_1.GenericRecordList));
    exports.AttachmentRecordList = AttachmentRecordList;
});
//# sourceMappingURL=SystemStructures.js.map;
define('OutSystems/ClientRuntime/Utils',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringUtils = void 0;
    var StringUtils = (function () {
        function StringUtils() {
        }
        StringUtils.safeParseInt = function (str) {
            var retValue = str;
            if (!!str && !isNaN(Number(str))) {
                retValue = parseInt(str, 10);
            }
            return retValue;
        };
        return StringUtils;
    }());
    exports.StringUtils = StringUtils;
});
//# sourceMappingURL=Utils.js.map;
define('OutSystems/ClientRuntime/Main',["require", "exports", "./Application", "./ApplicationInfo", "./BuiltinFunctions", "./ClientInfo", "./Communication", "./Controller", "./CookiesManager", "./DataConversion", "./DataTypes", "./Entities", "./ErrorHandling", "./ErrorScreen", "./EventDispatcher", "./Exceptions", "./FeedbackMessageService", "./Flow", "./Format", "./Injector", "./Injector/KnownServices", "./Interfaces", "./JSONUtils", "./LanguageResources", "./LightImmutable", "./Logger", "./Model", "./modules/Database/IndexedDB/IndexedDBSerializer", "./modules/Database/IndexedDB/IndexedDBUtils", "./modules/Database/TableInfoUtils", "./modules/Database/WebSQL/WebSQLSerializer", "./modules/Database/WebSQL/WebSQLUtils", "./NativeHelper", "./Navigation", "./ObjectExtensions", "./Performance", "./Public", "./RegExpHelper", "./Request", "./RequireManager", "./ResourceCache", "./RolesInfo", "./ScreenStateCache", "./ScriptsManager", "./Settings", "./StorageProvider", "./SystemActions", "./SystemStructures", "./TransitionAnimation", "./Transitions", "./Utils", "./Validation", "./VersionDefinition", "./VersionsManager", "./WidgetNaming"], function (require, exports, ApplicationModule, ApplicationInfoModule, BuiltinFunctionsModule, ClientInfoModule, CommunicationModule, ControllerModule, CookiesManagerModule, DataConversionModule, DataTypesModule, EntitiesModule, ErrorHandlingModule, ErrorScreenModule, EventDispatcherModule, ExceptionsModule, FeedbackMessageServiceModule, FlowModule, FormatModule, Injector_1, KnownServicesModule, InterfacesModule, JSONUtilsModule, LanguageResourcesModule, LightImmutableModule, LoggerModule, ModelModule, IndexedDBSerializerModule, IndexedDBUtilsModule, TableInfoUtilsModule, WebSQLSerializerModule, WebSQLUtilsModule, NativeHelperModule, NavigationModule, ObjectExtensionsModule, PerformanceModule, PublicModule, RegExpHelperModule, RequestModule, RequireManagerModule, ResourceCacheModule, RolesInfoModule, ScreenStateCacheModule, ScriptsManagerModule, SettingsModule, StorageProviderModule, SystemActionsModule, SystemStructuresModule, TransitionAnimationModule, TransitionsModule, UtilsModule, ValidationModule, VersionDefinitionModule, VersionsManagerModule, WidgetNamingModule) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Version = exports.Public = exports.Internal = void 0;
    RequireManagerModule.initialize();
    var Internal;
    (function (Internal) {
        Internal.Application = ApplicationModule;
        Internal.ApplicationInfo = ApplicationInfoModule;
        Internal.Flow = FlowModule;
        Internal.BuiltinFunctions = BuiltinFunctionsModule;
        Internal.JSONUtils = JSONUtilsModule;
        Internal.SystemActions = SystemActionsModule;
        Internal.SystemStructures = SystemStructuresModule;
        Internal.ResourceCache = ResourceCacheModule;
        Internal.Communication = CommunicationModule;
        Internal.Controller = ControllerModule;
        Internal.CookiesManager = CookiesManagerModule;
        Internal.DataTypes = DataTypesModule;
        Internal.ErrorHandling = ErrorHandlingModule;
        Internal.ErrorScreen = ErrorScreenModule;
        Internal.EventDispatcher = EventDispatcherModule;
        Internal.FeedbackMessageService = FeedbackMessageServiceModule;
        Internal.Format = FormatModule;
        Internal.ServiceNames = KnownServicesModule.ServiceNames;
        Internal.Injector = Injector_1.default;
        Internal.Interfaces = InterfacesModule;
        Internal.LanguageResources = LanguageResourcesModule;
        Internal.LightImmutable = LightImmutableModule;
        Internal.Logger = LoggerModule;
        Internal.Model = ModelModule;
        Internal.NativeHelper = NativeHelperModule;
        Internal.Navigation = NavigationModule;
        Internal.ObjectExtensions = ObjectExtensionsModule;
        Internal.Request = RequestModule;
        Internal.ScriptsManager = ScriptsManagerModule;
        Internal.StorageProvider = StorageProviderModule;
        Internal.TransitionAnimation = TransitionAnimationModule;
        Internal.Transitions = TransitionsModule;
        Internal.Validation = ValidationModule;
        Internal.VersionsManager = VersionsManagerModule;
        Internal.Utils = UtilsModule;
        Internal.WidgetNaming = WidgetNamingModule;
        Internal.Entities = EntitiesModule;
        Internal.Exceptions = ExceptionsModule;
        Internal.RegExpHelper = RegExpHelperModule;
        Internal.RequireManager = RequireManagerModule;
        Internal.RolesInfo = RolesInfoModule;
        Internal.Performance = PerformanceModule;
        Internal.ScreenStateCache = ScreenStateCacheModule;
        Internal.DataConversion = DataConversionModule;
        Internal.Settings = SettingsModule;
        Internal.ClientInfo = ClientInfoModule;
        Internal.TableInfoUtils = TableInfoUtilsModule;
        Internal.WebSQLSerializer = WebSQLSerializerModule;
        Internal.WebSQLUtils = WebSQLUtilsModule;
        Internal.IndexedDBSerializer = IndexedDBSerializerModule;
        Internal.IndexedDBUtils = IndexedDBUtilsModule;
        Internal.VersionDefinition = VersionDefinitionModule;
        Internal.Types = Internal.DataTypes.DataTypes;
    })(Internal || (exports.Internal = Internal = {}));
    exports.Public = PublicModule;
    exports.Version = "3.56.1";
    VersionDefinitionModule.registerPackage("client-runtime-core", exports.Version);
});
//# sourceMappingURL=Main.js.map;
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define('es6-promise',e):t.ES6Promise=e()}(this,function(){"use strict";function t(t){var e=typeof t;return null!==t&&("object"===e||"function"===e)}function e(t){return"function"==typeof t}function n(t){W=t}function r(t){z=t}function o(){return function(){return process.nextTick(a)}}function i(){return"undefined"!=typeof U?function(){U(a)}:c()}function s(){var t=0,e=new H(a),n=document.createTextNode("");return e.observe(n,{characterData:!0}),function(){n.data=t=++t%2}}function u(){var t=new MessageChannel;return t.port1.onmessage=a,function(){return t.port2.postMessage(0)}}function c(){var t=setTimeout;return function(){return t(a,1)}}function a(){for(var t=0;t<N;t+=2){var e=Q[t],n=Q[t+1];e(n),Q[t]=void 0,Q[t+1]=void 0}N=0}function f(){try{var t=Function("return this")().require("vertx");return U=t.runOnLoop||t.runOnContext,i()}catch(e){return c()}}function l(t,e){var n=this,r=new this.constructor(p);void 0===r[V]&&x(r);var o=n._state;if(o){var i=arguments[o-1];z(function(){return T(o,r,i,n._result)})}else j(n,r,t,e);return r}function h(t){var e=this;if(t&&"object"==typeof t&&t.constructor===e)return t;var n=new e(p);return w(n,t),n}function p(){}function v(){return new TypeError("You cannot resolve a promise with itself")}function d(){return new TypeError("A promises callback cannot return that same promise.")}function _(t,e,n,r){try{t.call(e,n,r)}catch(o){return o}}function y(t,e,n){z(function(t){var r=!1,o=_(n,e,function(n){r||(r=!0,e!==n?w(t,n):A(t,n))},function(e){r||(r=!0,S(t,e))},"Settle: "+(t._label||" unknown promise"));!r&&o&&(r=!0,S(t,o))},t)}function m(t,e){e._state===Z?A(t,e._result):e._state===$?S(t,e._result):j(e,void 0,function(e){return w(t,e)},function(e){return S(t,e)})}function b(t,n,r){n.constructor===t.constructor&&r===l&&n.constructor.resolve===h?m(t,n):void 0===r?A(t,n):e(r)?y(t,n,r):A(t,n)}function w(e,n){if(e===n)S(e,v());else if(t(n)){var r=void 0;try{r=n.then}catch(o){return void S(e,o)}b(e,n,r)}else A(e,n)}function g(t){t._onerror&&t._onerror(t._result),E(t)}function A(t,e){t._state===X&&(t._result=e,t._state=Z,0!==t._subscribers.length&&z(E,t))}function S(t,e){t._state===X&&(t._state=$,t._result=e,z(g,t))}function j(t,e,n,r){var o=t._subscribers,i=o.length;t._onerror=null,o[i]=e,o[i+Z]=n,o[i+$]=r,0===i&&t._state&&z(E,t)}function E(t){var e=t._subscribers,n=t._state;if(0!==e.length){for(var r=void 0,o=void 0,i=t._result,s=0;s<e.length;s+=3)r=e[s],o=e[s+n],r?T(n,r,o,i):o(i);t._subscribers.length=0}}function T(t,n,r,o){var i=e(r),s=void 0,u=void 0,c=!0;if(i){try{s=r(o)}catch(a){c=!1,u=a}if(n===s)return void S(n,d())}else s=o;n._state!==X||(i&&c?w(n,s):c===!1?S(n,u):t===Z?A(n,s):t===$&&S(n,s))}function M(t,e){try{e(function(e){w(t,e)},function(e){S(t,e)})}catch(n){S(t,n)}}function P(){return tt++}function x(t){t[V]=tt++,t._state=void 0,t._result=void 0,t._subscribers=[]}function C(){return new Error("Array Methods must be provided an Array")}function O(t){return new et(this,t).promise}function k(t){var e=this;return new e(L(t)?function(n,r){for(var o=t.length,i=0;i<o;i++)e.resolve(t[i]).then(n,r)}:function(t,e){return e(new TypeError("You must pass an array to race."))})}function F(t){var e=this,n=new e(p);return S(n,t),n}function Y(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function q(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function D(){var t=void 0;if("undefined"!=typeof global)t=global;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(e){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=t.Promise;if(n){var r=null;try{r=Object.prototype.toString.call(n.resolve())}catch(e){}if("[object Promise]"===r&&!n.cast)return}t.Promise=nt}var K=void 0;K=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)};var L=K,N=0,U=void 0,W=void 0,z=function(t,e){Q[N]=t,Q[N+1]=e,N+=2,2===N&&(W?W(a):R())},B="undefined"!=typeof window?window:void 0,G=B||{},H=G.MutationObserver||G.WebKitMutationObserver,I="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),J="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3),R=void 0;R=I?o():H?s():J?u():void 0===B&&"function"==typeof require?f():c();var V=Math.random().toString(36).substring(2),X=void 0,Z=1,$=2,tt=0,et=function(){function t(t,e){this._instanceConstructor=t,this.promise=new t(p),this.promise[V]||x(this.promise),L(e)?(this.length=e.length,this._remaining=e.length,this._result=new Array(this.length),0===this.length?A(this.promise,this._result):(this.length=this.length||0,this._enumerate(e),0===this._remaining&&A(this.promise,this._result))):S(this.promise,C())}return t.prototype._enumerate=function(t){for(var e=0;this._state===X&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var n=this._instanceConstructor,r=n.resolve;if(r===h){var o=void 0,i=void 0,s=!1;try{o=t.then}catch(u){s=!0,i=u}if(o===l&&t._state!==X)this._settledAt(t._state,e,t._result);else if("function"!=typeof o)this._remaining--,this._result[e]=t;else if(n===nt){var c=new n(p);s?S(c,i):b(c,t,o),this._willSettleAt(c,e)}else this._willSettleAt(new n(function(e){return e(t)}),e)}else this._willSettleAt(r(t),e)},t.prototype._settledAt=function(t,e,n){var r=this.promise;r._state===X&&(this._remaining--,t===$?S(r,n):this._result[e]=n),0===this._remaining&&A(r,this._result)},t.prototype._willSettleAt=function(t,e){var n=this;j(t,void 0,function(t){return n._settledAt(Z,e,t)},function(t){return n._settledAt($,e,t)})},t}(),nt=function(){function t(e){this[V]=P(),this._result=this._state=void 0,this._subscribers=[],p!==e&&("function"!=typeof e&&Y(),this instanceof t?M(this,e):q())}return t.prototype["catch"]=function(t){return this.then(null,t)},t.prototype["finally"]=function(t){var n=this,r=n.constructor;return e(t)?n.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})}):n.then(t,t)},t}();return nt.prototype.then=l,nt.all=O,nt.race=k,nt.resolve=h,nt.reject=F,nt._setScheduler=n,nt._setAsap=r,nt._asap=z,nt.polyfill=D,nt.Promise=nt,nt.polyfill(),nt});
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var isValue             = require("type/value/is")
  , ensureValue         = require("type/value/ensure")
  , ensurePlainFunction = require("type/plain-function/ensure")
  , copy                = require("es5-ext/object/copy")
  , normalizeOptions    = require("es5-ext/object/normalize-options")
  , map                 = require("es5-ext/object/map");

var bind = Function.prototype.bind
  , defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, options) {
	var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, options*/) {
	var options = normalizeOptions(arguments[1]);
	if (isValue(options.resolveContext)) ensurePlainFunction(options.resolveContext);
	return map(props, function (desc, name) { return define(name, desc, options); });
};

},{"es5-ext/object/copy":24,"es5-ext/object/map":32,"es5-ext/object/normalize-options":33,"type/plain-function/ensure":73,"type/value/ensure":77,"type/value/is":78}],2:[function(require,module,exports){
"use strict";

var isValue         = require("type/value/is")
  , isPlainFunction = require("type/plain-function/is")
  , assign          = require("es5-ext/object/assign")
  , normalizeOpts   = require("es5-ext/object/normalize-options")
  , contains        = require("es5-ext/string/#/contains");

var d = (module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if (arguments.length < 2 || typeof dscr !== "string") {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
		w = contains.call(dscr, "w");
	} else {
		c = w = true;
		e = false;
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
});

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== "string") {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (!isValue(get)) {
		get = undefined;
	} else if (!isPlainFunction(get)) {
		options = get;
		get = set = undefined;
	} else if (!isValue(set)) {
		set = undefined;
	} else if (!isPlainFunction(set)) {
		options = set;
		set = undefined;
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
	} else {
		c = true;
		e = false;
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

},{"es5-ext/object/assign":21,"es5-ext/object/normalize-options":33,"es5-ext/string/#/contains":39,"type/plain-function/is":74,"type/value/is":78}],3:[function(require,module,exports){
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear



var value = require("../../object/valid-value");

module.exports = function () {
	value(this).length = 0;
	return this;
};

},{"../../object/valid-value":38}],4:[function(require,module,exports){
"use strict";

var numberIsNaN       = require("../../number/is-nan")
  , toPosInt          = require("../../number/to-pos-integer")
  , value             = require("../../object/valid-value")
  , indexOf           = Array.prototype.indexOf
  , objHasOwnProperty = Object.prototype.hasOwnProperty
  , abs               = Math.abs
  , floor             = Math.floor;

module.exports = function (searchElement /*, fromIndex*/) {
	var i, length, fromIndex, val;
	if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);

	length = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < length; ++i) {
		if (objHasOwnProperty.call(this, i)) {
			val = this[i];
			if (numberIsNaN(val)) return i; // Jslint: ignore
		}
	}
	return -1;
};

},{"../../number/is-nan":15,"../../number/to-pos-integer":19,"../../object/valid-value":38}],5:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Array.from : require("./shim");

},{"./is-implemented":6,"./shim":7}],6:[function(require,module,exports){
"use strict";

module.exports = function () {
	var from = Array.from, arr, result;
	if (typeof from !== "function") return false;
	arr = ["raz", "dwa"];
	result = from(arr);
	return Boolean(result && result !== arr && result[1] === "dwa");
};

},{}],7:[function(require,module,exports){
"use strict";

var iteratorSymbol = require("es6-symbol").iterator
  , isArguments    = require("../../function/is-arguments")
  , isFunction     = require("../../function/is-function")
  , toPosInt       = require("../../number/to-pos-integer")
  , callable       = require("../../object/valid-callable")
  , validValue     = require("../../object/valid-value")
  , isValue        = require("../../object/is-value")
  , isString       = require("../../string/is-string")
  , isArray        = Array.isArray
  , call           = Function.prototype.call
  , desc           = { configurable: true, enumerable: true, writable: true, value: null }
  , defineProperty = Object.defineProperty;

// eslint-disable-next-line complexity, max-lines-per-function
module.exports = function (arrayLike /*, mapFn, thisArg*/) {
	var mapFn = arguments[1]
	  , thisArg = arguments[2]
	  , Context
	  , i
	  , j
	  , arr
	  , length
	  , code
	  , iterator
	  , result
	  , getIterator
	  , value;

	arrayLike = Object(validValue(arrayLike));

	if (isValue(mapFn)) callable(mapFn);
	if (!this || this === Array || !isFunction(this)) {
		// Result: Plain array
		if (!mapFn) {
			if (isArguments(arrayLike)) {
				// Source: Arguments
				length = arrayLike.length;
				if (length !== 1) return Array.apply(null, arrayLike);
				arr = new Array(1);
				arr[0] = arrayLike[0];
				return arr;
			}
			if (isArray(arrayLike)) {
				// Source: Array
				arr = new Array((length = arrayLike.length));
				for (i = 0; i < length; ++i) arr[i] = arrayLike[i];
				return arr;
			}
		}
		arr = [];
	} else {
		// Result: Non plain array
		Context = this;
	}

	if (!isArray(arrayLike)) {
		if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {
			// Source: Iterator
			iterator = callable(getIterator).call(arrayLike);
			if (Context) arr = new Context();
			result = iterator.next();
			i = 0;
			while (!result.done) {
				value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, i, desc);
				} else {
					arr[i] = value;
				}
				result = iterator.next();
				++i;
			}
			length = i;
		} else if (isString(arrayLike)) {
			// Source: String
			length = arrayLike.length;
			if (Context) arr = new Context();
			for (i = 0, j = 0; i < length; ++i) {
				value = arrayLike[i];
				if (i + 1 < length) {
					code = value.charCodeAt(0);
					// eslint-disable-next-line max-depth
					if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];
				}
				value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, j, desc);
				} else {
					arr[j] = value;
				}
				++j;
			}
			length = j;
		}
	}
	if (length === undefined) {
		// Source: array or array-like
		length = toPosInt(arrayLike.length);
		if (Context) arr = new Context(length);
		for (i = 0; i < length; ++i) {
			value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
			if (Context) {
				desc.value = value;
				defineProperty(arr, i, desc);
			} else {
				arr[i] = value;
			}
		}
	}
	if (Context) {
		desc.value = null;
		arr.length = length;
	}
	return arr;
};

},{"../../function/is-arguments":8,"../../function/is-function":9,"../../number/to-pos-integer":19,"../../object/is-value":28,"../../object/valid-callable":37,"../../object/valid-value":38,"../../string/is-string":42,"es6-symbol":56}],8:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString
  , id = objToString.call((function () { return arguments; })());

module.exports = function (value) { return objToString.call(value) === id; };

},{}],9:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString
  , isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);

module.exports = function (value) {
	return typeof value === "function" && isFunctionStringTag(objToString.call(value));
};

},{}],10:[function(require,module,exports){
"use strict";

// eslint-disable-next-line no-empty-function
module.exports = function () {};

},{}],11:[function(require,module,exports){
var naiveFallback = function () {
	if (typeof self === "object" && self) return self;
	if (typeof window === "object" && window) return window;
	throw new Error("Unable to resolve global `this`");
};

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

	// Fallback to standard globalThis if available
	if (typeof globalThis === "object" && globalThis) return globalThis;

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	try {
		Object.defineProperty(Object.prototype, "__global__", {
			get: function () { return this; },
			configurable: true
		});
	} catch (error) {
		// Unfortunate case of updates to Object.prototype being restricted
		// via preventExtensions, seal or freeze
		return naiveFallback();
	}
	try {
		// Safari case (window.__global__ works, but __global__ does not)
		if (!__global__) return naiveFallback();
		return __global__;
	} finally {
		delete Object.prototype.__global__;
	}
})();

},{}],12:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Math.sign : require("./shim");

},{"./is-implemented":13,"./shim":14}],13:[function(require,module,exports){
"use strict";

module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== "function") return false;
	return sign(10) === 1 && sign(-20) === -1;
};

},{}],14:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || value === 0) return value;
	return value > 0 ? 1 : -1;
};

},{}],15:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Number.isNaN : require("./shim");

},{"./is-implemented":16,"./shim":17}],16:[function(require,module,exports){
"use strict";

module.exports = function () {
	var numberIsNaN = Number.isNaN;
	if (typeof numberIsNaN !== "function") return false;
	return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
};

},{}],17:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	// eslint-disable-next-line no-self-compare
	return value !== value;
};

},{}],18:[function(require,module,exports){
"use strict";

var sign  = require("../math/sign")
  , abs   = Math.abs
  , floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if (value === 0 || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};

},{"../math/sign":12}],19:[function(require,module,exports){
"use strict";

var toInteger = require("./to-integer")
  , max       = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };

},{"./to-integer":18}],20:[function(require,module,exports){
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order



var callable                = require("./valid-callable")
  , value                   = require("./valid-value")
  , bind                    = Function.prototype.bind
  , call                    = Function.prototype.call
  , keys                    = Object.keys
  , objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb /*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== "function") method = list[method];
		return call.call(method, list, function (key, index) {
			if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};

},{"./valid-callable":37,"./valid-value":38}],21:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Object.assign : require("./shim");

},{"./is-implemented":22,"./shim":23}],22:[function(require,module,exports){
"use strict";

module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== "function") return false;
	obj = { foo: "raz" };
	assign(obj, { bar: "dwa" }, { trzy: "trzy" });
	return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
};

},{}],23:[function(require,module,exports){
"use strict";

var keys  = require("../keys")
  , value = require("../valid-value")
  , max   = Math.max;

module.exports = function (dest, src /*, …srcn*/) {
	var error, i, length = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try {
			dest[key] = src[key];
		} catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < length; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};

},{"../keys":29,"../valid-value":38}],24:[function(require,module,exports){
"use strict";

var aFrom  = require("../array/from")
  , assign = require("./assign")
  , value  = require("./valid-value");

module.exports = function (obj /*, propertyNames, options*/) {
	var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
	if (copy !== obj && !propertyNames) return copy;
	var result = {};
	if (propertyNames) {
		aFrom(propertyNames, function (propertyName) {
			if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];
		});
	} else {
		assign(result, obj);
	}
	return result;
};

},{"../array/from":5,"./assign":21,"./valid-value":38}],25:[function(require,module,exports){
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804



var create = Object.create, shim;

if (!require("./set-prototype-of/is-implemented")()) {
	shim = require("./set-prototype-of/shim");
}

module.exports = (function () {
	var nullObject, polyProps, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	polyProps = {};
	desc = { configurable: false, enumerable: false, writable: true, value: undefined };
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === "__proto__") {
			polyProps[name] = {
				configurable: true,
				enumerable: false,
				writable: true,
				value: undefined
			};
			return;
		}
		polyProps[name] = desc;
	});
	Object.defineProperties(nullObject, polyProps);

	Object.defineProperty(shim, "nullPolyfill", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: nullObject
	});

	return function (prototype, props) {
		return create(prototype === null ? nullObject : prototype, props);
	};
})();

},{"./set-prototype-of/is-implemented":35,"./set-prototype-of/shim":36}],26:[function(require,module,exports){
"use strict";

module.exports = require("./_iterate")("forEach");

},{"./_iterate":20}],27:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

var map = { function: true, object: true };

module.exports = function (value) { return (isValue(value) && map[typeof value]) || false; };

},{"./is-value":28}],28:[function(require,module,exports){
"use strict";

var _undefined = require("../function/noop")(); // Support ES3 engines

module.exports = function (val) { return val !== _undefined && val !== null; };

},{"../function/noop":10}],29:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Object.keys : require("./shim");

},{"./is-implemented":30,"./shim":31}],30:[function(require,module,exports){
"use strict";

module.exports = function () {
	try {
		Object.keys("primitive");
		return true;
	} catch (e) {
		return false;
	}
};

},{}],31:[function(require,module,exports){
"use strict";

var isValue = require("../is-value");

var keys = Object.keys;

module.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };

},{"../is-value":28}],32:[function(require,module,exports){
"use strict";

var callable = require("./valid-callable")
  , forEach  = require("./for-each")
  , call     = Function.prototype.call;

module.exports = function (obj, cb /*, thisArg*/) {
	var result = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, targetObj, index) {
		result[key] = call.call(cb, thisArg, value, key, targetObj, index);
	});
	return result;
};

},{"./for-each":26,"./valid-callable":37}],33:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

// eslint-disable-next-line no-unused-vars
module.exports = function (opts1 /*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (!isValue(options)) return;
		process(Object(options), result);
	});
	return result;
};

},{"./is-value":28}],34:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Object.setPrototypeOf : require("./shim");

},{"./is-implemented":35,"./shim":36}],35:[function(require,module,exports){
"use strict";

var create = Object.create, getPrototypeOf = Object.getPrototypeOf, plainObject = {};

module.exports = function (/* CustomCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== "function") return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
};

},{}],36:[function(require,module,exports){
/* eslint no-proto: "off" */

// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554



var isObject         = require("../is-object")
  , value            = require("../valid-value")
  , objIsPrototypeOf = Object.prototype.isPrototypeOf
  , defineProperty   = Object.defineProperty
  , nullDesc         = { configurable: true, enumerable: false, writable: true, value: undefined }
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if (prototype === null || isObject(prototype)) return obj;
	throw new TypeError("Prototype must be null or an object");
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = objIsPrototypeOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, "__proto__", nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, "level", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: status.level
	});
})(
	(function () {
		var tmpObj1 = Object.create(null)
		  , tmpObj2 = {}
		  , set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(tmpObj1, tmpObj2);
			} catch (ignore) {}
			if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set: set, level: 2 };
		}

		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };

		tmpObj1 = {};
		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };

		return false;
	})()
);

require("../create");

},{"../create":25,"../is-object":27,"../valid-value":38}],37:[function(require,module,exports){
"use strict";

module.exports = function (fn) {
	if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
	return fn;
};

},{}],38:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

module.exports = function (value) {
	if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
	return value;
};

},{"./is-value":28}],39:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? String.prototype.contains : require("./shim");

},{"./is-implemented":40,"./shim":41}],40:[function(require,module,exports){
"use strict";

var str = "razdwatrzy";

module.exports = function () {
	if (typeof str.contains !== "function") return false;
	return str.contains("dwa") === true && str.contains("foo") === false;
};

},{}],41:[function(require,module,exports){
"use strict";

var indexOf = String.prototype.indexOf;

module.exports = function (searchString /*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};

},{}],42:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString, id = objToString.call("");

module.exports = function (value) {
	return (
		typeof value === "string" ||
		(value &&
			typeof value === "object" &&
			(value instanceof String || objToString.call(value) === id)) ||
		false
	);
};

},{}],43:[function(require,module,exports){
"use strict";

var setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , contains       = require("es5-ext/string/#/contains")
  , d              = require("d")
  , Symbol         = require("es6-symbol")
  , Iterator       = require("./");

var defineProperty = Object.defineProperty, ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) throw new TypeError("Constructor requires 'new'");
	Iterator.call(this, arr);
	if (!kind) kind = "value";
	else if (contains.call(kind, "key+value")) kind = "key+value";
	else if (contains.call(kind, "key")) kind = "key";
	else kind = "value";
	defineProperty(this, "__kind__", d("", kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete ArrayIterator.prototype.constructor;

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	_resolve: d(function (i) {
		if (this.__kind__ === "value") return this.__list__[i];
		if (this.__kind__ === "key+value") return [i, this.__list__[i]];
		return i;
	})
});
defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d("c", "Array Iterator"));

},{"./":46,"d":2,"es5-ext/object/set-prototype-of":34,"es5-ext/string/#/contains":39,"es6-symbol":56}],44:[function(require,module,exports){
"use strict";

var isArguments = require("es5-ext/function/is-arguments")
  , callable    = require("es5-ext/object/valid-callable")
  , isString    = require("es5-ext/string/is-string")
  , get         = require("./get");

var isArray = Array.isArray, call = Function.prototype.call, some = Array.prototype.some;

module.exports = function (iterable, cb /*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, length, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = "array";
	else if (isString(iterable)) mode = "string";
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () {
		broken = true;
	};
	if (mode === "array") {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			return broken;
		});
		return;
	}
	if (mode === "string") {
		length = iterable.length;
		for (i = 0; i < length; ++i) {
			char = iterable[i];
			if (i + 1 < length) {
				code = char.charCodeAt(0);
				if (code >= 0xd800 && code <= 0xdbff) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};

},{"./get":45,"es5-ext/function/is-arguments":8,"es5-ext/object/valid-callable":37,"es5-ext/string/is-string":42}],45:[function(require,module,exports){
"use strict";

var isArguments    = require("es5-ext/function/is-arguments")
  , isString       = require("es5-ext/string/is-string")
  , ArrayIterator  = require("./array")
  , StringIterator = require("./string")
  , iterable       = require("./valid-iterable")
  , iteratorSymbol = require("es6-symbol").iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === "function") return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};

},{"./array":43,"./string":48,"./valid-iterable":49,"es5-ext/function/is-arguments":8,"es5-ext/string/is-string":42,"es6-symbol":56}],46:[function(require,module,exports){
"use strict";

var clear    = require("es5-ext/array/#/clear")
  , assign   = require("es5-ext/object/assign")
  , callable = require("es5-ext/object/valid-callable")
  , value    = require("es5-ext/object/valid-value")
  , d        = require("d")
  , autoBind = require("d/auto-bind")
  , Symbol   = require("es6-symbol");

var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) throw new TypeError("Constructor requires 'new'");
	defineProperties(this, {
		__list__: d("w", value(list)),
		__context__: d("w", context),
		__nextIndex__: d("w", 0)
	});
	if (!context) return;
	callable(context.on);
	context.on("_add", this._onAdd);
	context.on("_delete", this._onDelete);
	context.on("_clear", this._onClear);
};

// Internal %IteratorPrototype% doesn't expose its constructor
delete Iterator.prototype.constructor;

defineProperties(
	Iterator.prototype,
	assign(
		{
			_next: d(function () {
				var i;
				if (!this.__list__) return undefined;
				if (this.__redo__) {
					i = this.__redo__.shift();
					if (i !== undefined) return i;
				}
				if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
				this._unBind();
				return undefined;
			}),
			next: d(function () {
				return this._createResult(this._next());
			}),
			_createResult: d(function (i) {
				if (i === undefined) return { done: true, value: undefined };
				return { done: false, value: this._resolve(i) };
			}),
			_resolve: d(function (i) {
				return this.__list__[i];
			}),
			_unBind: d(function () {
				this.__list__ = null;
				delete this.__redo__;
				if (!this.__context__) return;
				this.__context__.off("_add", this._onAdd);
				this.__context__.off("_delete", this._onDelete);
				this.__context__.off("_clear", this._onClear);
				this.__context__ = null;
			}),
			toString: d(function () {
				return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
			})
		},
		autoBind({
			_onAdd: d(function (index) {
				if (index >= this.__nextIndex__) return;
				++this.__nextIndex__;
				if (!this.__redo__) {
					defineProperty(this, "__redo__", d("c", [index]));
					return;
				}
				this.__redo__.forEach(function (redo, i) {
					if (redo >= index) this.__redo__[i] = ++redo;
				}, this);
				this.__redo__.push(index);
			}),
			_onDelete: d(function (index) {
				var i;
				if (index >= this.__nextIndex__) return;
				--this.__nextIndex__;
				if (!this.__redo__) return;
				i = this.__redo__.indexOf(index);
				if (i !== -1) this.__redo__.splice(i, 1);
				this.__redo__.forEach(function (redo, j) {
					if (redo > index) this.__redo__[j] = --redo;
				}, this);
			}),
			_onClear: d(function () {
				if (this.__redo__) clear.call(this.__redo__);
				this.__nextIndex__ = 0;
			})
		})
	)
);

defineProperty(
	Iterator.prototype,
	Symbol.iterator,
	d(function () {
		return this;
	})
);

},{"d":2,"d/auto-bind":1,"es5-ext/array/#/clear":3,"es5-ext/object/assign":21,"es5-ext/object/valid-callable":37,"es5-ext/object/valid-value":38,"es6-symbol":56}],47:[function(require,module,exports){
"use strict";

var isArguments = require("es5-ext/function/is-arguments")
  , isValue     = require("es5-ext/object/is-value")
  , isString    = require("es5-ext/string/is-string");

var iteratorSymbol = require("es6-symbol").iterator
  , isArray        = Array.isArray;

module.exports = function (value) {
	if (!isValue(value)) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return typeof value[iteratorSymbol] === "function";
};

},{"es5-ext/function/is-arguments":8,"es5-ext/object/is-value":28,"es5-ext/string/is-string":42,"es6-symbol":56}],48:[function(require,module,exports){
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols



var setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , d              = require("d")
  , Symbol         = require("es6-symbol")
  , Iterator       = require("./");

var defineProperty = Object.defineProperty, StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) throw new TypeError("Constructor requires 'new'");
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, "__length__", d("", str.length));
};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete StringIterator.prototype.constructor;

StringIterator.prototype = Object.create(Iterator.prototype, {
	_next: d(function () {
		if (!this.__list__) return undefined;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
		return undefined;
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if (code >= 0xd800 && code <= 0xdbff) return char + this.__list__[this.__nextIndex__++];
		return char;
	})
});
defineProperty(StringIterator.prototype, Symbol.toStringTag, d("c", "String Iterator"));

},{"./":46,"d":2,"es5-ext/object/set-prototype-of":34,"es6-symbol":56}],49:[function(require,module,exports){
"use strict";

var isIterable = require("./is-iterable");

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};

},{"./is-iterable":47}],50:[function(require,module,exports){
"use strict";

if (!require("./is-implemented")()) {
	Object.defineProperty(require("es5-ext/global"), "Set", {
		value: require("./polyfill"),
		configurable: true,
		enumerable: false,
		writable: true
	});
}

},{"./is-implemented":51,"./polyfill":55,"es5-ext/global":11}],51:[function(require,module,exports){
"use strict";

module.exports = function () {
	var set, iterator, result;
	if (typeof Set !== "function") return false;
	set = new Set(["raz", "dwa", "trzy"]);
	if (String(set) !== "[object Set]") return false;
	if (set.size !== 3) return false;
	if (typeof set.add !== "function") return false;
	if (typeof set.clear !== "function") return false;
	if (typeof set.delete !== "function") return false;
	if (typeof set.entries !== "function") return false;
	if (typeof set.forEach !== "function") return false;
	if (typeof set.has !== "function") return false;
	if (typeof set.keys !== "function") return false;
	if (typeof set.values !== "function") return false;

	iterator = set.values();
	result = iterator.next();
	if (result.done !== false) return false;
	if (result.value !== "raz") return false;

	return true;
};

},{}],52:[function(require,module,exports){
// Exports true if environment provides native `Set` implementation,
// whatever that is.



module.exports = (function () {
	if (typeof Set === "undefined") return false;
	return Object.prototype.toString.call(Set.prototype) === "[object Set]";
})();

},{}],53:[function(require,module,exports){
"use strict";

var setPrototypeOf    = require("es5-ext/object/set-prototype-of")
  , contains          = require("es5-ext/string/#/contains")
  , d                 = require("d")
  , Iterator          = require("es6-iterator")
  , toStringTagSymbol = require("es6-symbol").toStringTag
  , defineProperty    = Object.defineProperty
  , SetIterator;

SetIterator = module.exports = function (set, kind) {
	if (!(this instanceof SetIterator)) return new SetIterator(set, kind);
	Iterator.call(this, set.__setData__, set);
	if (!kind) kind = "value";
	else if (contains.call(kind, "key+value")) kind = "key+value";
	else kind = "value";
	return defineProperty(this, "__kind__", d("", kind));
};
if (setPrototypeOf) setPrototypeOf(SetIterator, Iterator);

SetIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(SetIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === "value") return this.__list__[i];
		return [this.__list__[i], this.__list__[i]];
	}),
	toString: d(function () { return "[object Set Iterator]"; })
});
defineProperty(SetIterator.prototype, toStringTagSymbol, d("c", "Set Iterator"));

},{"d":2,"es5-ext/object/set-prototype-of":34,"es5-ext/string/#/contains":39,"es6-iterator":46,"es6-symbol":56}],54:[function(require,module,exports){
"use strict";

// ES3 safe
var _undefined = void 0;

module.exports = function (value) { return value !== _undefined && value !== null; };

},{}],55:[function(require,module,exports){
"use strict";

var isValue        = require("type/value/is")
  , clear          = require("es5-ext/array/#/clear")
  , eIndexOf       = require("es5-ext/array/#/e-index-of")
  , setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , callable       = require("es5-ext/object/valid-callable")
  , d              = require("d")
  , ee             = require("event-emitter")
  , Symbol         = require("es6-symbol")
  , iterator       = require("es6-iterator/valid-iterable")
  , forOf          = require("es6-iterator/for-of")
  , Iterator       = require("./lib/iterator")
  , isNative       = require("./is-native-implemented")
  , call           = Function.prototype.call
  , defineProperty = Object.defineProperty
  , getPrototypeOf = Object.getPrototypeOf
  , SetPoly
  , getValues
  , NativeSet;

if (isNative) NativeSet = Set;

module.exports = SetPoly = function Set(/* iterable*/) {
	var iterable = arguments[0], self;
	if (!(this instanceof SetPoly)) throw new TypeError("Constructor requires 'new'");
	if (isNative && setPrototypeOf) self = setPrototypeOf(new NativeSet(), getPrototypeOf(this));
	else self = this;
	if (isValue(iterable)) iterator(iterable);
	defineProperty(self, "__setData__", d("c", []));
	if (!iterable) return self;
	forOf(
		iterable,
		function (value) {
			if (eIndexOf.call(this, value) !== -1) return;
			this.push(value);
		},
		self.__setData__
	);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(SetPoly, NativeSet);
	SetPoly.prototype = Object.create(NativeSet.prototype, { constructor: d(SetPoly) });
}

ee(
	Object.defineProperties(SetPoly.prototype, {
		add: d(function (value) {
			if (this.has(value)) return this;
			this.emit("_add", this.__setData__.push(value) - 1, value);
			return this;
		}),
		clear: d(function () {
			if (!this.__setData__.length) return;
			clear.call(this.__setData__);
			this.emit("_clear");
		}),
		delete: d(function (value) {
			var index = eIndexOf.call(this.__setData__, value);
			if (index === -1) return false;
			this.__setData__.splice(index, 1);
			this.emit("_delete", index, value);
			return true;
		}),
		entries: d(function () { return new Iterator(this, "key+value"); }),
		forEach: d(function (cb /*, thisArg*/) {
			var thisArg = arguments[1], iterator, result, value;
			callable(cb);
			iterator = this.values();
			result = iterator._next();
			while (result !== undefined) {
				value = iterator._resolve(result);
				call.call(cb, thisArg, value, value, this);
				result = iterator._next();
			}
		}),
		has: d(function (value) { return eIndexOf.call(this.__setData__, value) !== -1; }),
		keys: d((getValues = function () { return this.values(); })),
		size: d.gs(function () { return this.__setData__.length; }),
		values: d(function () { return new Iterator(this); }),
		toString: d(function () { return "[object Set]"; })
	})
);
defineProperty(SetPoly.prototype, Symbol.iterator, d(getValues));
defineProperty(SetPoly.prototype, Symbol.toStringTag, d("c", "Set"));

},{"./is-native-implemented":52,"./lib/iterator":53,"d":2,"es5-ext/array/#/clear":3,"es5-ext/array/#/e-index-of":4,"es5-ext/object/set-prototype-of":34,"es5-ext/object/valid-callable":37,"es6-iterator/for-of":44,"es6-iterator/valid-iterable":49,"es6-symbol":56,"event-emitter":64,"type/value/is":54}],56:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? require("ext/global-this").Symbol
	: require("./polyfill");

},{"./is-implemented":57,"./polyfill":62,"ext/global-this":66}],57:[function(require,module,exports){
"use strict";

var global     = require("ext/global-this")
  , validTypes = { object: true, symbol: true };

module.exports = function () {
	var Symbol = global.Symbol;
	var symbol;
	if (typeof Symbol !== "function") return false;
	symbol = Symbol("test symbol");
	try { String(symbol); }
	catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};

},{"ext/global-this":66}],58:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	if (!value) return false;
	if (typeof value === "symbol") return true;
	if (!value.constructor) return false;
	if (value.constructor.name !== "Symbol") return false;
	return value[value.constructor.toStringTag] === "Symbol";
};

},{}],59:[function(require,module,exports){
"use strict";

var d = require("d");

var create = Object.create, defineProperty = Object.defineProperty, objPrototype = Object.prototype;

var created = create(null);
module.exports = function (desc) {
	var postfix = 0, name, ie11BugWorkaround;
	while (created[desc + (postfix || "")]) ++postfix;
	desc += postfix || "";
	created[desc] = true;
	name = "@@" + desc;
	defineProperty(
		objPrototype,
		name,
		d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		})
	);
	return name;
};

},{"d":2}],60:[function(require,module,exports){
"use strict";

var d            = require("d")
  , NativeSymbol = require("ext/global-this").Symbol;

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		// To ensure proper interoperability with other native functions (e.g. Array.from)
		// fallback to eventual native implementation of given symbol
		hasInstance: d(
			"", (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill("hasInstance")
		),
		isConcatSpreadable: d(
			"",
			(NativeSymbol && NativeSymbol.isConcatSpreadable) ||
				SymbolPolyfill("isConcatSpreadable")
		),
		iterator: d("", (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill("iterator")),
		match: d("", (NativeSymbol && NativeSymbol.match) || SymbolPolyfill("match")),
		replace: d("", (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill("replace")),
		search: d("", (NativeSymbol && NativeSymbol.search) || SymbolPolyfill("search")),
		species: d("", (NativeSymbol && NativeSymbol.species) || SymbolPolyfill("species")),
		split: d("", (NativeSymbol && NativeSymbol.split) || SymbolPolyfill("split")),
		toPrimitive: d(
			"", (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill("toPrimitive")
		),
		toStringTag: d(
			"", (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill("toStringTag")
		),
		unscopables: d(
			"", (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill("unscopables")
		)
	});
};

},{"d":2,"ext/global-this":66}],61:[function(require,module,exports){
"use strict";

var d              = require("d")
  , validateSymbol = require("../../../validate-symbol");

var registry = Object.create(null);

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (registry[key]) return registry[key];
			return (registry[key] = SymbolPolyfill(String(key)));
		}),
		keyFor: d(function (symbol) {
			var key;
			validateSymbol(symbol);
			for (key in registry) {
				if (registry[key] === symbol) return key;
			}
			return undefined;
		})
	});
};

},{"../../../validate-symbol":63,"d":2}],62:[function(require,module,exports){
// ES2015 Symbol polyfill for environments that do not (or partially) support it



var d                    = require("d")
  , validateSymbol       = require("./validate-symbol")
  , NativeSymbol         = require("ext/global-this").Symbol
  , generateName         = require("./lib/private/generate-name")
  , setupStandardSymbols = require("./lib/private/setup/standard-symbols")
  , setupSymbolRegistry  = require("./lib/private/setup/symbol-registry");

var create = Object.create
  , defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty;

var SymbolPolyfill, HiddenSymbol, isNativeSafe;

if (typeof NativeSymbol === "function") {
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
} else {
	NativeSymbol = null;
}

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError("Symbol is not a constructor");
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError("Symbol is not a constructor");
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = description === undefined ? "" : String(description);
	return defineProperties(symbol, {
		__description__: d("", description),
		__name__: d("", generateName(description))
	});
};

setupStandardSymbols(SymbolPolyfill);
setupSymbolRegistry(SymbolPolyfill);

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d("", function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return "Symbol (" + validateSymbol(this).__description__ + ")"; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(
	SymbolPolyfill.prototype,
	SymbolPolyfill.toPrimitive,
	d("", function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === "symbol") return symbol;
		return symbol.toString();
	})
);
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol"));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
);

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
);

},{"./lib/private/generate-name":59,"./lib/private/setup/standard-symbols":60,"./lib/private/setup/symbol-registry":61,"./validate-symbol":63,"d":2,"ext/global-this":66}],63:[function(require,module,exports){
"use strict";

var isSymbol = require("./is-symbol");

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};

},{"./is-symbol":58}],64:[function(require,module,exports){
'use strict';

var d        = require('d')
  , callable = require('es5-ext/object/valid-callable')

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;

},{"d":2,"es5-ext/object/valid-callable":37}],65:[function(require,module,exports){
var naiveFallback = function () {
	if (typeof self === "object" && self) return self;
	if (typeof window === "object" && window) return window;
	throw new Error("Unable to resolve global `this`");
};

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	try {
		Object.defineProperty(Object.prototype, "__global__", {
			get: function () { return this; },
			configurable: true
		});
	} catch (error) {
		// Unfortunate case of Object.prototype being sealed (via preventExtensions, seal or freeze)
		return naiveFallback();
	}
	try {
		// Safari case (window.__global__ is resolved with global context, but __global__ does not)
		if (!__global__) return naiveFallback();
		return __global__;
	} finally {
		delete Object.prototype.__global__;
	}
})();

},{}],66:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? globalThis : require("./implementation");

},{"./implementation":65,"./is-implemented":67}],67:[function(require,module,exports){
"use strict";

module.exports = function () {
	if (typeof globalThis !== "object") return false;
	if (!globalThis) return false;
	return globalThis.Array === Array;
};

},{}],68:[function(require,module,exports){
"use strict";

var isPrototype = require("../prototype/is");

module.exports = function (value) {
	if (typeof value !== "function") return false;

	if (!hasOwnProperty.call(value, "length")) return false;

	try {
		if (typeof value.length !== "number") return false;
		if (typeof value.call !== "function") return false;
		if (typeof value.apply !== "function") return false;
	} catch (error) {
		return false;
	}

	return !isPrototype(value);
};

},{"../prototype/is":75}],69:[function(require,module,exports){
"use strict";

var isValue       = require("../value/is")
  , isObject      = require("../object/is")
  , stringCoerce  = require("../string/coerce")
  , toShortString = require("./to-short-string");

var resolveMessage = function (message, value) {
	return message.replace("%v", toShortString(value));
};

module.exports = function (value, defaultMessage, inputOptions) {
	if (!isObject(inputOptions)) throw new TypeError(resolveMessage(defaultMessage, value));
	if (!isValue(value)) {
		if ("default" in inputOptions) return inputOptions["default"];
		if (inputOptions.isOptional) return null;
	}
	var errorMessage = stringCoerce(inputOptions.errorMessage);
	if (!isValue(errorMessage)) errorMessage = defaultMessage;
	throw new TypeError(resolveMessage(errorMessage, value));
};

},{"../object/is":72,"../string/coerce":76,"../value/is":78,"./to-short-string":71}],70:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	try {
		return value.toString();
	} catch (error) {
		try { return String(value); }
		catch (error2) { return null; }
	}
};

},{}],71:[function(require,module,exports){
"use strict";

var safeToString = require("./safe-to-string");

var reNewLine = /[\n\r\u2028\u2029]/g;

module.exports = function (value) {
	var string = safeToString(value);
	if (string === null) return "<Non-coercible to string value>";
	// Trim if too long
	if (string.length > 100) string = string.slice(0, 99) + "…";
	// Replace eventual new lines
	string = string.replace(reNewLine, function (char) {
		switch (char) {
			case "\n":
				return "\\n";
			case "\r":
				return "\\r";
			case "\u2028":
				return "\\u2028";
			case "\u2029":
				return "\\u2029";
			/* istanbul ignore next */
			default:
				throw new Error("Unexpected character");
		}
	});
	return string;
};

},{"./safe-to-string":70}],72:[function(require,module,exports){
"use strict";

var isValue = require("../value/is");

// prettier-ignore
var possibleTypes = { "object": true, "function": true, "undefined": true /* document.all */ };

module.exports = function (value) {
	if (!isValue(value)) return false;
	return hasOwnProperty.call(possibleTypes, typeof value);
};

},{"../value/is":78}],73:[function(require,module,exports){
"use strict";

var resolveException = require("../lib/resolve-exception")
  , is               = require("./is");

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "%v is not a plain function", arguments[1]);
};

},{"../lib/resolve-exception":69,"./is":74}],74:[function(require,module,exports){
"use strict";

var isFunction = require("../function/is");

var classRe = /^\s*class[\s{/}]/, functionToString = Function.prototype.toString;

module.exports = function (value) {
	if (!isFunction(value)) return false;
	if (classRe.test(functionToString.call(value))) return false;
	return true;
};

},{"../function/is":68}],75:[function(require,module,exports){
"use strict";

var isObject = require("../object/is");

module.exports = function (value) {
	if (!isObject(value)) return false;
	try {
		if (!value.constructor) return false;
		return value.constructor.prototype === value;
	} catch (error) {
		return false;
	}
};

},{"../object/is":72}],76:[function(require,module,exports){
"use strict";

var isValue  = require("../value/is")
  , isObject = require("../object/is");

var objectToString = Object.prototype.toString;

module.exports = function (value) {
	if (!isValue(value)) return null;
	if (isObject(value)) {
		// Reject Object.prototype.toString coercion
		var valueToString = value.toString;
		if (typeof valueToString !== "function") return null;
		if (valueToString === objectToString) return null;
		// Note: It can be object coming from other realm, still as there's no ES3 and CSP compliant
		// way to resolve its realm's Object.prototype.toString it's left as not addressed edge case
	}
	try {
		return "" + value; // Ensure implicit coercion
	} catch (error) {
		return null;
	}
};

},{"../object/is":72,"../value/is":78}],77:[function(require,module,exports){
"use strict";

var resolveException = require("../lib/resolve-exception")
  , is               = require("./is");

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "Cannot use %v", arguments[1]);
};

},{"../lib/resolve-exception":69,"./is":78}],78:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}]},{},[50]);

define("es6-set", function(){});

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var isValue             = require("type/value/is")
  , ensureValue         = require("type/value/ensure")
  , ensurePlainFunction = require("type/plain-function/ensure")
  , copy                = require("es5-ext/object/copy")
  , normalizeOptions    = require("es5-ext/object/normalize-options")
  , map                 = require("es5-ext/object/map");

var bind = Function.prototype.bind
  , defineProperty = Object.defineProperty
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , define;

define = function (name, desc, options) {
	var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
	dgs = copy(desc);
	delete dgs.writable;
	delete dgs.value;
	dgs.get = function () {
		if (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;
		desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
		defineProperty(this, name, desc);
		return this[name];
	};
	return dgs;
};

module.exports = function (props/*, options*/) {
	var options = normalizeOptions(arguments[1]);
	if (isValue(options.resolveContext)) ensurePlainFunction(options.resolveContext);
	return map(props, function (desc, name) { return define(name, desc, options); });
};

},{"es5-ext/object/copy":24,"es5-ext/object/map":32,"es5-ext/object/normalize-options":33,"type/plain-function/ensure":74,"type/value/ensure":78,"type/value/is":79}],2:[function(require,module,exports){
"use strict";

var isValue         = require("type/value/is")
  , isPlainFunction = require("type/plain-function/is")
  , assign          = require("es5-ext/object/assign")
  , normalizeOpts   = require("es5-ext/object/normalize-options")
  , contains        = require("es5-ext/string/#/contains");

var d = (module.exports = function (dscr, value/*, options*/) {
	var c, e, w, options, desc;
	if (arguments.length < 2 || typeof dscr !== "string") {
		options = value;
		value = dscr;
		dscr = null;
	} else {
		options = arguments[2];
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
		w = contains.call(dscr, "w");
	} else {
		c = w = true;
		e = false;
	}

	desc = { value: value, configurable: c, enumerable: e, writable: w };
	return !options ? desc : assign(normalizeOpts(options), desc);
});

d.gs = function (dscr, get, set/*, options*/) {
	var c, e, options, desc;
	if (typeof dscr !== "string") {
		options = set;
		set = get;
		get = dscr;
		dscr = null;
	} else {
		options = arguments[3];
	}
	if (!isValue(get)) {
		get = undefined;
	} else if (!isPlainFunction(get)) {
		options = get;
		get = set = undefined;
	} else if (!isValue(set)) {
		set = undefined;
	} else if (!isPlainFunction(set)) {
		options = set;
		set = undefined;
	}
	if (isValue(dscr)) {
		c = contains.call(dscr, "c");
		e = contains.call(dscr, "e");
	} else {
		c = true;
		e = false;
	}

	desc = { get: get, set: set, configurable: c, enumerable: e };
	return !options ? desc : assign(normalizeOpts(options), desc);
};

},{"es5-ext/object/assign":21,"es5-ext/object/normalize-options":33,"es5-ext/string/#/contains":40,"type/plain-function/is":75,"type/value/is":79}],3:[function(require,module,exports){
// Inspired by Google Closure:
// http://closure-library.googlecode.com/svn/docs/
// closure_goog_array_array.js.html#goog.array.clear



var value = require("../../object/valid-value");

module.exports = function () {
	value(this).length = 0;
	return this;
};

},{"../../object/valid-value":39}],4:[function(require,module,exports){
"use strict";

var numberIsNaN       = require("../../number/is-nan")
  , toPosInt          = require("../../number/to-pos-integer")
  , value             = require("../../object/valid-value")
  , indexOf           = Array.prototype.indexOf
  , objHasOwnProperty = Object.prototype.hasOwnProperty
  , abs               = Math.abs
  , floor             = Math.floor;

module.exports = function (searchElement /*, fromIndex*/) {
	var i, length, fromIndex, val;
	if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);

	length = toPosInt(value(this).length);
	fromIndex = arguments[1];
	if (isNaN(fromIndex)) fromIndex = 0;
	else if (fromIndex >= 0) fromIndex = floor(fromIndex);
	else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

	for (i = fromIndex; i < length; ++i) {
		if (objHasOwnProperty.call(this, i)) {
			val = this[i];
			if (numberIsNaN(val)) return i; // Jslint: ignore
		}
	}
	return -1;
};

},{"../../number/is-nan":15,"../../number/to-pos-integer":19,"../../object/valid-value":39}],5:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Array.from : require("./shim");

},{"./is-implemented":6,"./shim":7}],6:[function(require,module,exports){
"use strict";

module.exports = function () {
	var from = Array.from, arr, result;
	if (typeof from !== "function") return false;
	arr = ["raz", "dwa"];
	result = from(arr);
	return Boolean(result && result !== arr && result[1] === "dwa");
};

},{}],7:[function(require,module,exports){
"use strict";

var iteratorSymbol = require("es6-symbol").iterator
  , isArguments    = require("../../function/is-arguments")
  , isFunction     = require("../../function/is-function")
  , toPosInt       = require("../../number/to-pos-integer")
  , callable       = require("../../object/valid-callable")
  , validValue     = require("../../object/valid-value")
  , isValue        = require("../../object/is-value")
  , isString       = require("../../string/is-string")
  , isArray        = Array.isArray
  , call           = Function.prototype.call
  , desc           = { configurable: true, enumerable: true, writable: true, value: null }
  , defineProperty = Object.defineProperty;

// eslint-disable-next-line complexity, max-lines-per-function
module.exports = function (arrayLike /*, mapFn, thisArg*/) {
	var mapFn = arguments[1]
	  , thisArg = arguments[2]
	  , Context
	  , i
	  , j
	  , arr
	  , length
	  , code
	  , iterator
	  , result
	  , getIterator
	  , value;

	arrayLike = Object(validValue(arrayLike));

	if (isValue(mapFn)) callable(mapFn);
	if (!this || this === Array || !isFunction(this)) {
		// Result: Plain array
		if (!mapFn) {
			if (isArguments(arrayLike)) {
				// Source: Arguments
				length = arrayLike.length;
				if (length !== 1) return Array.apply(null, arrayLike);
				arr = new Array(1);
				arr[0] = arrayLike[0];
				return arr;
			}
			if (isArray(arrayLike)) {
				// Source: Array
				arr = new Array((length = arrayLike.length));
				for (i = 0; i < length; ++i) arr[i] = arrayLike[i];
				return arr;
			}
		}
		arr = [];
	} else {
		// Result: Non plain array
		Context = this;
	}

	if (!isArray(arrayLike)) {
		if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {
			// Source: Iterator
			iterator = callable(getIterator).call(arrayLike);
			if (Context) arr = new Context();
			result = iterator.next();
			i = 0;
			while (!result.done) {
				value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, i, desc);
				} else {
					arr[i] = value;
				}
				result = iterator.next();
				++i;
			}
			length = i;
		} else if (isString(arrayLike)) {
			// Source: String
			length = arrayLike.length;
			if (Context) arr = new Context();
			for (i = 0, j = 0; i < length; ++i) {
				value = arrayLike[i];
				if (i + 1 < length) {
					code = value.charCodeAt(0);
					// eslint-disable-next-line max-depth
					if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];
				}
				value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
				if (Context) {
					desc.value = value;
					defineProperty(arr, j, desc);
				} else {
					arr[j] = value;
				}
				++j;
			}
			length = j;
		}
	}
	if (length === undefined) {
		// Source: array or array-like
		length = toPosInt(arrayLike.length);
		if (Context) arr = new Context(length);
		for (i = 0; i < length; ++i) {
			value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
			if (Context) {
				desc.value = value;
				defineProperty(arr, i, desc);
			} else {
				arr[i] = value;
			}
		}
	}
	if (Context) {
		desc.value = null;
		arr.length = length;
	}
	return arr;
};

},{"../../function/is-arguments":8,"../../function/is-function":9,"../../number/to-pos-integer":19,"../../object/is-value":28,"../../object/valid-callable":38,"../../object/valid-value":39,"../../string/is-string":43,"es6-symbol":57}],8:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString
  , id = objToString.call((function () { return arguments; })());

module.exports = function (value) { return objToString.call(value) === id; };

},{}],9:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString
  , isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);

module.exports = function (value) {
	return typeof value === "function" && isFunctionStringTag(objToString.call(value));
};

},{}],10:[function(require,module,exports){
"use strict";

// eslint-disable-next-line no-empty-function
module.exports = function () {};

},{}],11:[function(require,module,exports){
var naiveFallback = function () {
	if (typeof self === "object" && self) return self;
	if (typeof window === "object" && window) return window;
	throw new Error("Unable to resolve global `this`");
};

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

	// Fallback to standard globalThis if available
	if (typeof globalThis === "object" && globalThis) return globalThis;

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	try {
		Object.defineProperty(Object.prototype, "__global__", {
			get: function () { return this; },
			configurable: true
		});
	} catch (error) {
		// Unfortunate case of updates to Object.prototype being restricted
		// via preventExtensions, seal or freeze
		return naiveFallback();
	}
	try {
		// Safari case (window.__global__ works, but __global__ does not)
		if (!__global__) return naiveFallback();
		return __global__;
	} finally {
		delete Object.prototype.__global__;
	}
})();

},{}],12:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Math.sign : require("./shim");

},{"./is-implemented":13,"./shim":14}],13:[function(require,module,exports){
"use strict";

module.exports = function () {
	var sign = Math.sign;
	if (typeof sign !== "function") return false;
	return sign(10) === 1 && sign(-20) === -1;
};

},{}],14:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	value = Number(value);
	if (isNaN(value) || value === 0) return value;
	return value > 0 ? 1 : -1;
};

},{}],15:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Number.isNaN : require("./shim");

},{"./is-implemented":16,"./shim":17}],16:[function(require,module,exports){
"use strict";

module.exports = function () {
	var numberIsNaN = Number.isNaN;
	if (typeof numberIsNaN !== "function") return false;
	return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
};

},{}],17:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	// eslint-disable-next-line no-self-compare
	return value !== value;
};

},{}],18:[function(require,module,exports){
"use strict";

var sign  = require("../math/sign")
  , abs   = Math.abs
  , floor = Math.floor;

module.exports = function (value) {
	if (isNaN(value)) return 0;
	value = Number(value);
	if (value === 0 || !isFinite(value)) return value;
	return sign(value) * floor(abs(value));
};

},{"../math/sign":12}],19:[function(require,module,exports){
"use strict";

var toInteger = require("./to-integer")
  , max       = Math.max;

module.exports = function (value) { return max(0, toInteger(value)); };

},{"./to-integer":18}],20:[function(require,module,exports){
// Internal method, used by iteration functions.
// Calls a function for each key-value pair found in object
// Optionally takes compareFn to iterate object in specific order



var callable                = require("./valid-callable")
  , value                   = require("./valid-value")
  , bind                    = Function.prototype.bind
  , call                    = Function.prototype.call
  , keys                    = Object.keys
  , objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;

module.exports = function (method, defVal) {
	return function (obj, cb /*, thisArg, compareFn*/) {
		var list, thisArg = arguments[2], compareFn = arguments[3];
		obj = Object(value(obj));
		callable(cb);

		list = keys(obj);
		if (compareFn) {
			list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : undefined);
		}
		if (typeof method !== "function") method = list[method];
		return call.call(method, list, function (key, index) {
			if (!objPropertyIsEnumerable.call(obj, key)) return defVal;
			return call.call(cb, thisArg, obj[key], key, obj, index);
		});
	};
};

},{"./valid-callable":38,"./valid-value":39}],21:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Object.assign : require("./shim");

},{"./is-implemented":22,"./shim":23}],22:[function(require,module,exports){
"use strict";

module.exports = function () {
	var assign = Object.assign, obj;
	if (typeof assign !== "function") return false;
	obj = { foo: "raz" };
	assign(obj, { bar: "dwa" }, { trzy: "trzy" });
	return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
};

},{}],23:[function(require,module,exports){
"use strict";

var keys  = require("../keys")
  , value = require("../valid-value")
  , max   = Math.max;

module.exports = function (dest, src /*, …srcn*/) {
	var error, i, length = max(arguments.length, 2), assign;
	dest = Object(value(dest));
	assign = function (key) {
		try {
			dest[key] = src[key];
		} catch (e) {
			if (!error) error = e;
		}
	};
	for (i = 1; i < length; ++i) {
		src = arguments[i];
		keys(src).forEach(assign);
	}
	if (error !== undefined) throw error;
	return dest;
};

},{"../keys":29,"../valid-value":39}],24:[function(require,module,exports){
"use strict";

var aFrom  = require("../array/from")
  , assign = require("./assign")
  , value  = require("./valid-value");

module.exports = function (obj /*, propertyNames, options*/) {
	var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
	if (copy !== obj && !propertyNames) return copy;
	var result = {};
	if (propertyNames) {
		aFrom(propertyNames, function (propertyName) {
			if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];
		});
	} else {
		assign(result, obj);
	}
	return result;
};

},{"../array/from":5,"./assign":21,"./valid-value":39}],25:[function(require,module,exports){
// Workaround for http://code.google.com/p/v8/issues/detail?id=2804



var create = Object.create, shim;

if (!require("./set-prototype-of/is-implemented")()) {
	shim = require("./set-prototype-of/shim");
}

module.exports = (function () {
	var nullObject, polyProps, desc;
	if (!shim) return create;
	if (shim.level !== 1) return create;

	nullObject = {};
	polyProps = {};
	desc = { configurable: false, enumerable: false, writable: true, value: undefined };
	Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
		if (name === "__proto__") {
			polyProps[name] = {
				configurable: true,
				enumerable: false,
				writable: true,
				value: undefined
			};
			return;
		}
		polyProps[name] = desc;
	});
	Object.defineProperties(nullObject, polyProps);

	Object.defineProperty(shim, "nullPolyfill", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: nullObject
	});

	return function (prototype, props) {
		return create(prototype === null ? nullObject : prototype, props);
	};
})();

},{"./set-prototype-of/is-implemented":36,"./set-prototype-of/shim":37}],26:[function(require,module,exports){
"use strict";

module.exports = require("./_iterate")("forEach");

},{"./_iterate":20}],27:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

var map = { function: true, object: true };

module.exports = function (value) { return (isValue(value) && map[typeof value]) || false; };

},{"./is-value":28}],28:[function(require,module,exports){
"use strict";

var _undefined = require("../function/noop")(); // Support ES3 engines

module.exports = function (val) { return val !== _undefined && val !== null; };

},{"../function/noop":10}],29:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Object.keys : require("./shim");

},{"./is-implemented":30,"./shim":31}],30:[function(require,module,exports){
"use strict";

module.exports = function () {
	try {
		Object.keys("primitive");
		return true;
	} catch (e) {
		return false;
	}
};

},{}],31:[function(require,module,exports){
"use strict";

var isValue = require("../is-value");

var keys = Object.keys;

module.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };

},{"../is-value":28}],32:[function(require,module,exports){
"use strict";

var callable = require("./valid-callable")
  , forEach  = require("./for-each")
  , call     = Function.prototype.call;

module.exports = function (obj, cb /*, thisArg*/) {
	var result = {}, thisArg = arguments[2];
	callable(cb);
	forEach(obj, function (value, key, targetObj, index) {
		result[key] = call.call(cb, thisArg, value, key, targetObj, index);
	});
	return result;
};

},{"./for-each":26,"./valid-callable":38}],33:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

var forEach = Array.prototype.forEach, create = Object.create;

var process = function (src, obj) {
	var key;
	for (key in src) obj[key] = src[key];
};

// eslint-disable-next-line no-unused-vars
module.exports = function (opts1 /*, …options*/) {
	var result = create(null);
	forEach.call(arguments, function (options) {
		if (!isValue(options)) return;
		process(Object(options), result);
	});
	return result;
};

},{"./is-value":28}],34:[function(require,module,exports){
"use strict";

var forEach = Array.prototype.forEach, create = Object.create;

// eslint-disable-next-line no-unused-vars
module.exports = function (arg /*, …args*/) {
	var set = create(null);
	forEach.call(arguments, function (name) { set[name] = true; });
	return set;
};

},{}],35:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? Object.setPrototypeOf : require("./shim");

},{"./is-implemented":36,"./shim":37}],36:[function(require,module,exports){
"use strict";

var create = Object.create, getPrototypeOf = Object.getPrototypeOf, plainObject = {};

module.exports = function (/* CustomCreate*/) {
	var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
	if (typeof setPrototypeOf !== "function") return false;
	return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
};

},{}],37:[function(require,module,exports){
/* eslint no-proto: "off" */

// Big thanks to @WebReflection for sorting this out
// https://gist.github.com/WebReflection/5593554



var isObject         = require("../is-object")
  , value            = require("../valid-value")
  , objIsPrototypeOf = Object.prototype.isPrototypeOf
  , defineProperty   = Object.defineProperty
  , nullDesc         = { configurable: true, enumerable: false, writable: true, value: undefined }
  , validate;

validate = function (obj, prototype) {
	value(obj);
	if (prototype === null || isObject(prototype)) return obj;
	throw new TypeError("Prototype must be null or an object");
};

module.exports = (function (status) {
	var fn, set;
	if (!status) return null;
	if (status.level === 2) {
		if (status.set) {
			set = status.set;
			fn = function (obj, prototype) {
				set.call(validate(obj, prototype), prototype);
				return obj;
			};
		} else {
			fn = function (obj, prototype) {
				validate(obj, prototype).__proto__ = prototype;
				return obj;
			};
		}
	} else {
		fn = function self(obj, prototype) {
			var isNullBase;
			validate(obj, prototype);
			isNullBase = objIsPrototypeOf.call(self.nullPolyfill, obj);
			if (isNullBase) delete self.nullPolyfill.__proto__;
			if (prototype === null) prototype = self.nullPolyfill;
			obj.__proto__ = prototype;
			if (isNullBase) defineProperty(self.nullPolyfill, "__proto__", nullDesc);
			return obj;
		};
	}
	return Object.defineProperty(fn, "level", {
		configurable: false,
		enumerable: false,
		writable: false,
		value: status.level
	});
})(
	(function () {
		var tmpObj1 = Object.create(null)
		  , tmpObj2 = {}
		  , set
		  , desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(tmpObj1, tmpObj2);
			} catch (ignore) {}
			if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set: set, level: 2 };
		}

		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };

		tmpObj1 = {};
		tmpObj1.__proto__ = tmpObj2;
		if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };

		return false;
	})()
);

require("../create");

},{"../create":25,"../is-object":27,"../valid-value":39}],38:[function(require,module,exports){
"use strict";

module.exports = function (fn) {
	if (typeof fn !== "function") throw new TypeError(fn + " is not a function");
	return fn;
};

},{}],39:[function(require,module,exports){
"use strict";

var isValue = require("./is-value");

module.exports = function (value) {
	if (!isValue(value)) throw new TypeError("Cannot use null or undefined");
	return value;
};

},{"./is-value":28}],40:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? String.prototype.contains : require("./shim");

},{"./is-implemented":41,"./shim":42}],41:[function(require,module,exports){
"use strict";

var str = "razdwatrzy";

module.exports = function () {
	if (typeof str.contains !== "function") return false;
	return str.contains("dwa") === true && str.contains("foo") === false;
};

},{}],42:[function(require,module,exports){
"use strict";

var indexOf = String.prototype.indexOf;

module.exports = function (searchString /*, position*/) {
	return indexOf.call(this, searchString, arguments[1]) > -1;
};

},{}],43:[function(require,module,exports){
"use strict";

var objToString = Object.prototype.toString, id = objToString.call("");

module.exports = function (value) {
	return (
		typeof value === "string" ||
		(value &&
			typeof value === "object" &&
			(value instanceof String || objToString.call(value) === id)) ||
		false
	);
};

},{}],44:[function(require,module,exports){
"use strict";

var setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , contains       = require("es5-ext/string/#/contains")
  , d              = require("d")
  , Symbol         = require("es6-symbol")
  , Iterator       = require("./");

var defineProperty = Object.defineProperty, ArrayIterator;

ArrayIterator = module.exports = function (arr, kind) {
	if (!(this instanceof ArrayIterator)) throw new TypeError("Constructor requires 'new'");
	Iterator.call(this, arr);
	if (!kind) kind = "value";
	else if (contains.call(kind, "key+value")) kind = "key+value";
	else if (contains.call(kind, "key")) kind = "key";
	else kind = "value";
	defineProperty(this, "__kind__", d("", kind));
};
if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete ArrayIterator.prototype.constructor;

ArrayIterator.prototype = Object.create(Iterator.prototype, {
	_resolve: d(function (i) {
		if (this.__kind__ === "value") return this.__list__[i];
		if (this.__kind__ === "key+value") return [i, this.__list__[i]];
		return i;
	})
});
defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d("c", "Array Iterator"));

},{"./":47,"d":2,"es5-ext/object/set-prototype-of":35,"es5-ext/string/#/contains":40,"es6-symbol":57}],45:[function(require,module,exports){
"use strict";

var isArguments = require("es5-ext/function/is-arguments")
  , callable    = require("es5-ext/object/valid-callable")
  , isString    = require("es5-ext/string/is-string")
  , get         = require("./get");

var isArray = Array.isArray, call = Function.prototype.call, some = Array.prototype.some;

module.exports = function (iterable, cb /*, thisArg*/) {
	var mode, thisArg = arguments[2], result, doBreak, broken, i, length, char, code;
	if (isArray(iterable) || isArguments(iterable)) mode = "array";
	else if (isString(iterable)) mode = "string";
	else iterable = get(iterable);

	callable(cb);
	doBreak = function () {
		broken = true;
	};
	if (mode === "array") {
		some.call(iterable, function (value) {
			call.call(cb, thisArg, value, doBreak);
			return broken;
		});
		return;
	}
	if (mode === "string") {
		length = iterable.length;
		for (i = 0; i < length; ++i) {
			char = iterable[i];
			if (i + 1 < length) {
				code = char.charCodeAt(0);
				if (code >= 0xd800 && code <= 0xdbff) char += iterable[++i];
			}
			call.call(cb, thisArg, char, doBreak);
			if (broken) break;
		}
		return;
	}
	result = iterable.next();

	while (!result.done) {
		call.call(cb, thisArg, result.value, doBreak);
		if (broken) return;
		result = iterable.next();
	}
};

},{"./get":46,"es5-ext/function/is-arguments":8,"es5-ext/object/valid-callable":38,"es5-ext/string/is-string":43}],46:[function(require,module,exports){
"use strict";

var isArguments    = require("es5-ext/function/is-arguments")
  , isString       = require("es5-ext/string/is-string")
  , ArrayIterator  = require("./array")
  , StringIterator = require("./string")
  , iterable       = require("./valid-iterable")
  , iteratorSymbol = require("es6-symbol").iterator;

module.exports = function (obj) {
	if (typeof iterable(obj)[iteratorSymbol] === "function") return obj[iteratorSymbol]();
	if (isArguments(obj)) return new ArrayIterator(obj);
	if (isString(obj)) return new StringIterator(obj);
	return new ArrayIterator(obj);
};

},{"./array":44,"./string":49,"./valid-iterable":50,"es5-ext/function/is-arguments":8,"es5-ext/string/is-string":43,"es6-symbol":57}],47:[function(require,module,exports){
"use strict";

var clear    = require("es5-ext/array/#/clear")
  , assign   = require("es5-ext/object/assign")
  , callable = require("es5-ext/object/valid-callable")
  , value    = require("es5-ext/object/valid-value")
  , d        = require("d")
  , autoBind = require("d/auto-bind")
  , Symbol   = require("es6-symbol");

var defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, Iterator;

module.exports = Iterator = function (list, context) {
	if (!(this instanceof Iterator)) throw new TypeError("Constructor requires 'new'");
	defineProperties(this, {
		__list__: d("w", value(list)),
		__context__: d("w", context),
		__nextIndex__: d("w", 0)
	});
	if (!context) return;
	callable(context.on);
	context.on("_add", this._onAdd);
	context.on("_delete", this._onDelete);
	context.on("_clear", this._onClear);
};

// Internal %IteratorPrototype% doesn't expose its constructor
delete Iterator.prototype.constructor;

defineProperties(
	Iterator.prototype,
	assign(
		{
			_next: d(function () {
				var i;
				if (!this.__list__) return undefined;
				if (this.__redo__) {
					i = this.__redo__.shift();
					if (i !== undefined) return i;
				}
				if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
				this._unBind();
				return undefined;
			}),
			next: d(function () {
				return this._createResult(this._next());
			}),
			_createResult: d(function (i) {
				if (i === undefined) return { done: true, value: undefined };
				return { done: false, value: this._resolve(i) };
			}),
			_resolve: d(function (i) {
				return this.__list__[i];
			}),
			_unBind: d(function () {
				this.__list__ = null;
				delete this.__redo__;
				if (!this.__context__) return;
				this.__context__.off("_add", this._onAdd);
				this.__context__.off("_delete", this._onDelete);
				this.__context__.off("_clear", this._onClear);
				this.__context__ = null;
			}),
			toString: d(function () {
				return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
			})
		},
		autoBind({
			_onAdd: d(function (index) {
				if (index >= this.__nextIndex__) return;
				++this.__nextIndex__;
				if (!this.__redo__) {
					defineProperty(this, "__redo__", d("c", [index]));
					return;
				}
				this.__redo__.forEach(function (redo, i) {
					if (redo >= index) this.__redo__[i] = ++redo;
				}, this);
				this.__redo__.push(index);
			}),
			_onDelete: d(function (index) {
				var i;
				if (index >= this.__nextIndex__) return;
				--this.__nextIndex__;
				if (!this.__redo__) return;
				i = this.__redo__.indexOf(index);
				if (i !== -1) this.__redo__.splice(i, 1);
				this.__redo__.forEach(function (redo, j) {
					if (redo > index) this.__redo__[j] = --redo;
				}, this);
			}),
			_onClear: d(function () {
				if (this.__redo__) clear.call(this.__redo__);
				this.__nextIndex__ = 0;
			})
		})
	)
);

defineProperty(
	Iterator.prototype,
	Symbol.iterator,
	d(function () {
		return this;
	})
);

},{"d":2,"d/auto-bind":1,"es5-ext/array/#/clear":3,"es5-ext/object/assign":21,"es5-ext/object/valid-callable":38,"es5-ext/object/valid-value":39,"es6-symbol":57}],48:[function(require,module,exports){
"use strict";

var isArguments = require("es5-ext/function/is-arguments")
  , isValue     = require("es5-ext/object/is-value")
  , isString    = require("es5-ext/string/is-string");

var iteratorSymbol = require("es6-symbol").iterator
  , isArray        = Array.isArray;

module.exports = function (value) {
	if (!isValue(value)) return false;
	if (isArray(value)) return true;
	if (isString(value)) return true;
	if (isArguments(value)) return true;
	return typeof value[iteratorSymbol] === "function";
};

},{"es5-ext/function/is-arguments":8,"es5-ext/object/is-value":28,"es5-ext/string/is-string":43,"es6-symbol":57}],49:[function(require,module,exports){
// Thanks @mathiasbynens
// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols



var setPrototypeOf = require("es5-ext/object/set-prototype-of")
  , d              = require("d")
  , Symbol         = require("es6-symbol")
  , Iterator       = require("./");

var defineProperty = Object.defineProperty, StringIterator;

StringIterator = module.exports = function (str) {
	if (!(this instanceof StringIterator)) throw new TypeError("Constructor requires 'new'");
	str = String(str);
	Iterator.call(this, str);
	defineProperty(this, "__length__", d("", str.length));
};
if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

// Internal %ArrayIteratorPrototype% doesn't expose its constructor
delete StringIterator.prototype.constructor;

StringIterator.prototype = Object.create(Iterator.prototype, {
	_next: d(function () {
		if (!this.__list__) return undefined;
		if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
		this._unBind();
		return undefined;
	}),
	_resolve: d(function (i) {
		var char = this.__list__[i], code;
		if (this.__nextIndex__ === this.__length__) return char;
		code = char.charCodeAt(0);
		if (code >= 0xd800 && code <= 0xdbff) return char + this.__list__[this.__nextIndex__++];
		return char;
	})
});
defineProperty(StringIterator.prototype, Symbol.toStringTag, d("c", "String Iterator"));

},{"./":47,"d":2,"es5-ext/object/set-prototype-of":35,"es6-symbol":57}],50:[function(require,module,exports){
"use strict";

var isIterable = require("./is-iterable");

module.exports = function (value) {
	if (!isIterable(value)) throw new TypeError(value + " is not iterable");
	return value;
};

},{"./is-iterable":48}],51:[function(require,module,exports){
'use strict';

if (!require('./is-implemented')()) {
	Object.defineProperty(require('es5-ext/global'), 'Map',
		{ value: require('./polyfill'), configurable: true, enumerable: false,
			writable: true });
}

},{"./is-implemented":52,"./polyfill":56,"es5-ext/global":11}],52:[function(require,module,exports){
'use strict';

module.exports = function () {
	var map, iterator, result;
	if (typeof Map !== 'function') return false;
	try {
		// WebKit doesn't support arguments and crashes
		map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
	} catch (e) {
		return false;
	}
	if (String(map) !== '[object Map]') return false;
	if (map.size !== 3) return false;
	if (typeof map.clear !== 'function') return false;
	if (typeof map.delete !== 'function') return false;
	if (typeof map.entries !== 'function') return false;
	if (typeof map.forEach !== 'function') return false;
	if (typeof map.get !== 'function') return false;
	if (typeof map.has !== 'function') return false;
	if (typeof map.keys !== 'function') return false;
	if (typeof map.set !== 'function') return false;
	if (typeof map.values !== 'function') return false;

	iterator = map.entries();
	result = iterator.next();
	if (result.done !== false) return false;
	if (!result.value) return false;
	if (result.value[0] !== 'raz') return false;
	if (result.value[1] !== 'one') return false;

	return true;
};

},{}],53:[function(require,module,exports){
// Exports true if environment provides native `Map` implementation,
// whatever that is.



module.exports = (function () {
	if (typeof Map === 'undefined') return false;
	return (Object.prototype.toString.call(new Map()) === '[object Map]');
}());

},{}],54:[function(require,module,exports){
'use strict';

module.exports = require('es5-ext/object/primitive-set')('key',
	'value', 'key+value');

},{"es5-ext/object/primitive-set":34}],55:[function(require,module,exports){
'use strict';

var setPrototypeOf    = require('es5-ext/object/set-prototype-of')
  , d                 = require('d')
  , Iterator          = require('es6-iterator')
  , toStringTagSymbol = require('es6-symbol').toStringTag
  , kinds             = require('./iterator-kinds')

  , defineProperties = Object.defineProperties
  , unBind = Iterator.prototype._unBind
  , MapIterator;

MapIterator = module.exports = function (map, kind) {
	if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
	Iterator.call(this, map.__mapKeysData__, map);
	if (!kind || !kinds[kind]) kind = 'key+value';
	defineProperties(this, {
		__kind__: d('', kind),
		__values__: d('w', map.__mapValuesData__)
	});
};
if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

MapIterator.prototype = Object.create(Iterator.prototype, {
	constructor: d(MapIterator),
	_resolve: d(function (i) {
		if (this.__kind__ === 'value') return this.__values__[i];
		if (this.__kind__ === 'key') return this.__list__[i];
		return [this.__list__[i], this.__values__[i]];
	}),
	_unBind: d(function () {
		this.__values__ = null;
		unBind.call(this);
	}),
	toString: d(function () { return '[object Map Iterator]'; })
});
Object.defineProperty(MapIterator.prototype, toStringTagSymbol,
	d('c', 'Map Iterator'));

},{"./iterator-kinds":54,"d":2,"es5-ext/object/set-prototype-of":35,"es6-iterator":47,"es6-symbol":57}],56:[function(require,module,exports){
'use strict';

var clear          = require('es5-ext/array/#/clear')
  , eIndexOf       = require('es5-ext/array/#/e-index-of')
  , setPrototypeOf = require('es5-ext/object/set-prototype-of')
  , callable       = require('es5-ext/object/valid-callable')
  , validValue     = require('es5-ext/object/valid-value')
  , d              = require('d')
  , ee             = require('event-emitter')
  , Symbol         = require('es6-symbol')
  , iterator       = require('es6-iterator/valid-iterable')
  , forOf          = require('es6-iterator/for-of')
  , Iterator       = require('./lib/iterator')
  , isNative       = require('./is-native-implemented')

  , call = Function.prototype.call
  , defineProperties = Object.defineProperties, getPrototypeOf = Object.getPrototypeOf
  , MapPoly;

module.exports = MapPoly = function (/*iterable*/) {
	var iterable = arguments[0], keys, values, self;
	if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
	if (isNative && setPrototypeOf && (Map !== MapPoly)) {
		self = setPrototypeOf(new Map(), getPrototypeOf(this));
	} else {
		self = this;
	}
	if (iterable != null) iterator(iterable);
	defineProperties(self, {
		__mapKeysData__: d('c', keys = []),
		__mapValuesData__: d('c', values = [])
	});
	if (!iterable) return self;
	forOf(iterable, function (value) {
		var key = validValue(value)[0];
		value = value[1];
		if (eIndexOf.call(keys, key) !== -1) return;
		keys.push(key);
		values.push(value);
	}, self);
	return self;
};

if (isNative) {
	if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
	MapPoly.prototype = Object.create(Map.prototype, {
		constructor: d(MapPoly)
	});
}

ee(defineProperties(MapPoly.prototype, {
	clear: d(function () {
		if (!this.__mapKeysData__.length) return;
		clear.call(this.__mapKeysData__);
		clear.call(this.__mapValuesData__);
		this.emit('_clear');
	}),
	delete: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return false;
		this.__mapKeysData__.splice(index, 1);
		this.__mapValuesData__.splice(index, 1);
		this.emit('_delete', index, key);
		return true;
	}),
	entries: d(function () { return new Iterator(this, 'key+value'); }),
	forEach: d(function (cb/*, thisArg*/) {
		var thisArg = arguments[1], iterator, result;
		callable(cb);
		iterator = this.entries();
		result = iterator._next();
		while (result !== undefined) {
			call.call(cb, thisArg, this.__mapValuesData__[result],
				this.__mapKeysData__[result], this);
			result = iterator._next();
		}
	}),
	get: d(function (key) {
		var index = eIndexOf.call(this.__mapKeysData__, key);
		if (index === -1) return;
		return this.__mapValuesData__[index];
	}),
	has: d(function (key) {
		return (eIndexOf.call(this.__mapKeysData__, key) !== -1);
	}),
	keys: d(function () { return new Iterator(this, 'key'); }),
	set: d(function (key, value) {
		var index = eIndexOf.call(this.__mapKeysData__, key), emit;
		if (index === -1) {
			index = this.__mapKeysData__.push(key) - 1;
			emit = true;
		}
		this.__mapValuesData__[index] = value;
		if (emit) this.emit('_add', index, key);
		return this;
	}),
	size: d.gs(function () { return this.__mapKeysData__.length; }),
	values: d(function () { return new Iterator(this, 'value'); }),
	toString: d(function () { return '[object Map]'; })
}));
Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
	return this.entries();
}));
Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));

},{"./is-native-implemented":53,"./lib/iterator":55,"d":2,"es5-ext/array/#/clear":3,"es5-ext/array/#/e-index-of":4,"es5-ext/object/set-prototype-of":35,"es5-ext/object/valid-callable":38,"es5-ext/object/valid-value":39,"es6-iterator/for-of":45,"es6-iterator/valid-iterable":50,"es6-symbol":57,"event-emitter":65}],57:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")()
	? require("ext/global-this").Symbol
	: require("./polyfill");

},{"./is-implemented":58,"./polyfill":63,"ext/global-this":67}],58:[function(require,module,exports){
"use strict";

var global     = require("ext/global-this")
  , validTypes = { object: true, symbol: true };

module.exports = function () {
	var Symbol = global.Symbol;
	var symbol;
	if (typeof Symbol !== "function") return false;
	symbol = Symbol("test symbol");
	try { String(symbol); }
	catch (e) { return false; }

	// Return 'true' also for polyfills
	if (!validTypes[typeof Symbol.iterator]) return false;
	if (!validTypes[typeof Symbol.toPrimitive]) return false;
	if (!validTypes[typeof Symbol.toStringTag]) return false;

	return true;
};

},{"ext/global-this":67}],59:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	if (!value) return false;
	if (typeof value === "symbol") return true;
	if (!value.constructor) return false;
	if (value.constructor.name !== "Symbol") return false;
	return value[value.constructor.toStringTag] === "Symbol";
};

},{}],60:[function(require,module,exports){
"use strict";

var d = require("d");

var create = Object.create, defineProperty = Object.defineProperty, objPrototype = Object.prototype;

var created = create(null);
module.exports = function (desc) {
	var postfix = 0, name, ie11BugWorkaround;
	while (created[desc + (postfix || "")]) ++postfix;
	desc += postfix || "";
	created[desc] = true;
	name = "@@" + desc;
	defineProperty(
		objPrototype,
		name,
		d.gs(null, function (value) {
			// For IE11 issue see:
			// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
			//    ie11-broken-getters-on-dom-objects
			// https://github.com/medikoo/es6-symbol/issues/12
			if (ie11BugWorkaround) return;
			ie11BugWorkaround = true;
			defineProperty(this, name, d(value));
			ie11BugWorkaround = false;
		})
	);
	return name;
};

},{"d":2}],61:[function(require,module,exports){
"use strict";

var d            = require("d")
  , NativeSymbol = require("ext/global-this").Symbol;

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		// To ensure proper interoperability with other native functions (e.g. Array.from)
		// fallback to eventual native implementation of given symbol
		hasInstance: d(
			"", (NativeSymbol && NativeSymbol.hasInstance) || SymbolPolyfill("hasInstance")
		),
		isConcatSpreadable: d(
			"",
			(NativeSymbol && NativeSymbol.isConcatSpreadable) ||
				SymbolPolyfill("isConcatSpreadable")
		),
		iterator: d("", (NativeSymbol && NativeSymbol.iterator) || SymbolPolyfill("iterator")),
		match: d("", (NativeSymbol && NativeSymbol.match) || SymbolPolyfill("match")),
		replace: d("", (NativeSymbol && NativeSymbol.replace) || SymbolPolyfill("replace")),
		search: d("", (NativeSymbol && NativeSymbol.search) || SymbolPolyfill("search")),
		species: d("", (NativeSymbol && NativeSymbol.species) || SymbolPolyfill("species")),
		split: d("", (NativeSymbol && NativeSymbol.split) || SymbolPolyfill("split")),
		toPrimitive: d(
			"", (NativeSymbol && NativeSymbol.toPrimitive) || SymbolPolyfill("toPrimitive")
		),
		toStringTag: d(
			"", (NativeSymbol && NativeSymbol.toStringTag) || SymbolPolyfill("toStringTag")
		),
		unscopables: d(
			"", (NativeSymbol && NativeSymbol.unscopables) || SymbolPolyfill("unscopables")
		)
	});
};

},{"d":2,"ext/global-this":67}],62:[function(require,module,exports){
"use strict";

var d              = require("d")
  , validateSymbol = require("../../../validate-symbol");

var registry = Object.create(null);

module.exports = function (SymbolPolyfill) {
	return Object.defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (registry[key]) return registry[key];
			return (registry[key] = SymbolPolyfill(String(key)));
		}),
		keyFor: d(function (symbol) {
			var key;
			validateSymbol(symbol);
			for (key in registry) {
				if (registry[key] === symbol) return key;
			}
			return undefined;
		})
	});
};

},{"../../../validate-symbol":64,"d":2}],63:[function(require,module,exports){
// ES2015 Symbol polyfill for environments that do not (or partially) support it



var d                    = require("d")
  , validateSymbol       = require("./validate-symbol")
  , NativeSymbol         = require("ext/global-this").Symbol
  , generateName         = require("./lib/private/generate-name")
  , setupStandardSymbols = require("./lib/private/setup/standard-symbols")
  , setupSymbolRegistry  = require("./lib/private/setup/symbol-registry");

var create = Object.create
  , defineProperties = Object.defineProperties
  , defineProperty = Object.defineProperty;

var SymbolPolyfill, HiddenSymbol, isNativeSafe;

if (typeof NativeSymbol === "function") {
	try {
		String(NativeSymbol());
		isNativeSafe = true;
	} catch (ignore) {}
} else {
	NativeSymbol = null;
}

// Internal constructor (not one exposed) for creating Symbol instances.
// This one is used to ensure that `someSymbol instanceof Symbol` always return false
HiddenSymbol = function Symbol(description) {
	if (this instanceof HiddenSymbol) throw new TypeError("Symbol is not a constructor");
	return SymbolPolyfill(description);
};

// Exposed `Symbol` constructor
// (returns instances of HiddenSymbol)
module.exports = SymbolPolyfill = function Symbol(description) {
	var symbol;
	if (this instanceof Symbol) throw new TypeError("Symbol is not a constructor");
	if (isNativeSafe) return NativeSymbol(description);
	symbol = create(HiddenSymbol.prototype);
	description = description === undefined ? "" : String(description);
	return defineProperties(symbol, {
		__description__: d("", description),
		__name__: d("", generateName(description))
	});
};

setupStandardSymbols(SymbolPolyfill);
setupSymbolRegistry(SymbolPolyfill);

// Internal tweaks for real symbol producer
defineProperties(HiddenSymbol.prototype, {
	constructor: d(SymbolPolyfill),
	toString: d("", function () { return this.__name__; })
});

// Proper implementation of methods exposed on Symbol.prototype
// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
defineProperties(SymbolPolyfill.prototype, {
	toString: d(function () { return "Symbol (" + validateSymbol(this).__description__ + ")"; }),
	valueOf: d(function () { return validateSymbol(this); })
});
defineProperty(
	SymbolPolyfill.prototype,
	SymbolPolyfill.toPrimitive,
	d("", function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === "symbol") return symbol;
		return symbol.toString();
	})
);
defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol"));

// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toStringTag,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
);

// Note: It's important to define `toPrimitive` as last one, as some implementations
// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
// And that may invoke error in definition flow:
// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
defineProperty(
	HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,
	d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
);

},{"./lib/private/generate-name":60,"./lib/private/setup/standard-symbols":61,"./lib/private/setup/symbol-registry":62,"./validate-symbol":64,"d":2,"ext/global-this":67}],64:[function(require,module,exports){
"use strict";

var isSymbol = require("./is-symbol");

module.exports = function (value) {
	if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
	return value;
};

},{"./is-symbol":59}],65:[function(require,module,exports){
'use strict';

var d        = require('d')
  , callable = require('es5-ext/object/valid-callable')

  , apply = Function.prototype.apply, call = Function.prototype.call
  , create = Object.create, defineProperty = Object.defineProperty
  , defineProperties = Object.defineProperties
  , hasOwnProperty = Object.prototype.hasOwnProperty
  , descriptor = { configurable: true, enumerable: false, writable: true }

  , on, once, off, emit, methods, descriptors, base;

on = function (type, listener) {
	var data;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) {
		data = descriptor.value = create(null);
		defineProperty(this, '__ee__', descriptor);
		descriptor.value = null;
	} else {
		data = this.__ee__;
	}
	if (!data[type]) data[type] = listener;
	else if (typeof data[type] === 'object') data[type].push(listener);
	else data[type] = [data[type], listener];

	return this;
};

once = function (type, listener) {
	var once, self;

	callable(listener);
	self = this;
	on.call(this, type, once = function () {
		off.call(self, type, once);
		apply.call(listener, this, arguments);
	});

	once.__eeOnceListener__ = listener;
	return this;
};

off = function (type, listener) {
	var data, listeners, candidate, i;

	callable(listener);

	if (!hasOwnProperty.call(this, '__ee__')) return this;
	data = this.__ee__;
	if (!data[type]) return this;
	listeners = data[type];

	if (typeof listeners === 'object') {
		for (i = 0; (candidate = listeners[i]); ++i) {
			if ((candidate === listener) ||
					(candidate.__eeOnceListener__ === listener)) {
				if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];
				else listeners.splice(i, 1);
			}
		}
	} else {
		if ((listeners === listener) ||
				(listeners.__eeOnceListener__ === listener)) {
			delete data[type];
		}
	}

	return this;
};

emit = function (type) {
	var i, l, listener, listeners, args;

	if (!hasOwnProperty.call(this, '__ee__')) return;
	listeners = this.__ee__[type];
	if (!listeners) return;

	if (typeof listeners === 'object') {
		l = arguments.length;
		args = new Array(l - 1);
		for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

		listeners = listeners.slice();
		for (i = 0; (listener = listeners[i]); ++i) {
			apply.call(listener, this, args);
		}
	} else {
		switch (arguments.length) {
		case 1:
			call.call(listeners, this);
			break;
		case 2:
			call.call(listeners, this, arguments[1]);
			break;
		case 3:
			call.call(listeners, this, arguments[1], arguments[2]);
			break;
		default:
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) {
				args[i - 1] = arguments[i];
			}
			apply.call(listeners, this, args);
		}
	}
};

methods = {
	on: on,
	once: once,
	off: off,
	emit: emit
};

descriptors = {
	on: d(on),
	once: d(once),
	off: d(off),
	emit: d(emit)
};

base = defineProperties({}, descriptors);

module.exports = exports = function (o) {
	return (o == null) ? create(base) : defineProperties(Object(o), descriptors);
};
exports.methods = methods;

},{"d":2,"es5-ext/object/valid-callable":38}],66:[function(require,module,exports){
var naiveFallback = function () {
	if (typeof self === "object" && self) return self;
	if (typeof window === "object" && window) return window;
	throw new Error("Unable to resolve global `this`");
};

module.exports = (function () {
	if (this) return this;

	// Unexpected strict mode (may happen if e.g. bundled into ESM module)

	// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
	// In all ES5+ engines global object inherits from Object.prototype
	// (if you approached one that doesn't please report)
	try {
		Object.defineProperty(Object.prototype, "__global__", {
			get: function () { return this; },
			configurable: true
		});
	} catch (error) {
		// Unfortunate case of Object.prototype being sealed (via preventExtensions, seal or freeze)
		return naiveFallback();
	}
	try {
		// Safari case (window.__global__ is resolved with global context, but __global__ does not)
		if (!__global__) return naiveFallback();
		return __global__;
	} finally {
		delete Object.prototype.__global__;
	}
})();

},{}],67:[function(require,module,exports){
"use strict";

module.exports = require("./is-implemented")() ? globalThis : require("./implementation");

},{"./implementation":66,"./is-implemented":68}],68:[function(require,module,exports){
"use strict";

module.exports = function () {
	if (typeof globalThis !== "object") return false;
	if (!globalThis) return false;
	return globalThis.Array === Array;
};

},{}],69:[function(require,module,exports){
"use strict";

var isPrototype = require("../prototype/is");

module.exports = function (value) {
	if (typeof value !== "function") return false;

	if (!hasOwnProperty.call(value, "length")) return false;

	try {
		if (typeof value.length !== "number") return false;
		if (typeof value.call !== "function") return false;
		if (typeof value.apply !== "function") return false;
	} catch (error) {
		return false;
	}

	return !isPrototype(value);
};

},{"../prototype/is":76}],70:[function(require,module,exports){
"use strict";

var isValue       = require("../value/is")
  , isObject      = require("../object/is")
  , stringCoerce  = require("../string/coerce")
  , toShortString = require("./to-short-string");

var resolveMessage = function (message, value) {
	return message.replace("%v", toShortString(value));
};

module.exports = function (value, defaultMessage, inputOptions) {
	if (!isObject(inputOptions)) throw new TypeError(resolveMessage(defaultMessage, value));
	if (!isValue(value)) {
		if ("default" in inputOptions) return inputOptions["default"];
		if (inputOptions.isOptional) return null;
	}
	var errorMessage = stringCoerce(inputOptions.errorMessage);
	if (!isValue(errorMessage)) errorMessage = defaultMessage;
	throw new TypeError(resolveMessage(errorMessage, value));
};

},{"../object/is":73,"../string/coerce":77,"../value/is":79,"./to-short-string":72}],71:[function(require,module,exports){
"use strict";

module.exports = function (value) {
	try {
		return value.toString();
	} catch (error) {
		try { return String(value); }
		catch (error2) { return null; }
	}
};

},{}],72:[function(require,module,exports){
"use strict";

var safeToString = require("./safe-to-string");

var reNewLine = /[\n\r\u2028\u2029]/g;

module.exports = function (value) {
	var string = safeToString(value);
	if (string === null) return "<Non-coercible to string value>";
	// Trim if too long
	if (string.length > 100) string = string.slice(0, 99) + "…";
	// Replace eventual new lines
	string = string.replace(reNewLine, function (char) {
		switch (char) {
			case "\n":
				return "\\n";
			case "\r":
				return "\\r";
			case "\u2028":
				return "\\u2028";
			case "\u2029":
				return "\\u2029";
			/* istanbul ignore next */
			default:
				throw new Error("Unexpected character");
		}
	});
	return string;
};

},{"./safe-to-string":71}],73:[function(require,module,exports){
"use strict";

var isValue = require("../value/is");

// prettier-ignore
var possibleTypes = { "object": true, "function": true, "undefined": true /* document.all */ };

module.exports = function (value) {
	if (!isValue(value)) return false;
	return hasOwnProperty.call(possibleTypes, typeof value);
};

},{"../value/is":79}],74:[function(require,module,exports){
"use strict";

var resolveException = require("../lib/resolve-exception")
  , is               = require("./is");

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "%v is not a plain function", arguments[1]);
};

},{"../lib/resolve-exception":70,"./is":75}],75:[function(require,module,exports){
"use strict";

var isFunction = require("../function/is");

var classRe = /^\s*class[\s{/}]/, functionToString = Function.prototype.toString;

module.exports = function (value) {
	if (!isFunction(value)) return false;
	if (classRe.test(functionToString.call(value))) return false;
	return true;
};

},{"../function/is":69}],76:[function(require,module,exports){
"use strict";

var isObject = require("../object/is");

module.exports = function (value) {
	if (!isObject(value)) return false;
	try {
		if (!value.constructor) return false;
		return value.constructor.prototype === value;
	} catch (error) {
		return false;
	}
};

},{"../object/is":73}],77:[function(require,module,exports){
"use strict";

var isValue  = require("../value/is")
  , isObject = require("../object/is");

var objectToString = Object.prototype.toString;

module.exports = function (value) {
	if (!isValue(value)) return null;
	if (isObject(value)) {
		// Reject Object.prototype.toString coercion
		var valueToString = value.toString;
		if (typeof valueToString !== "function") return null;
		if (valueToString === objectToString) return null;
		// Note: It can be object coming from other realm, still as there's no ES3 and CSP compliant
		// way to resolve its realm's Object.prototype.toString it's left as not addressed edge case
	}
	try {
		return "" + value; // Ensure implicit coercion
	} catch (error) {
		return null;
	}
};

},{"../object/is":73,"../value/is":79}],78:[function(require,module,exports){
"use strict";

var resolveException = require("../lib/resolve-exception")
  , is               = require("./is");

module.exports = function (value/*, options*/) {
	if (is(value)) return value;
	return resolveException(value, "Cannot use %v", arguments[1]);
};

},{"../lib/resolve-exception":70,"./is":79}],79:[function(require,module,exports){
"use strict";

// ES3 safe
var _undefined = void 0;

module.exports = function (value) { return value !== _undefined && value !== null; };

},{}]},{},[51]);

define("es6-map", function(){});

